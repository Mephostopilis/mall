package dao

import (
"context"
"edu/pkg/tools"
"edu/service/{{.Module}}/internal/model"
{{$ii := 1}}
{{ range .Columns }}
    {{- if eq .GoType "time.Time" -}}{{- if eq $ii 1 -}} "time" {{$ii = 2}}{{- end}}{{- end}}
{{- end }}
)

//Create{{.ClassName}} 创建{{.ClassName}}
func (d *dao) Create{{.ClassName}}(ctx context.Context, e *model.{{.ClassName}}) (model.{{.ClassName}}, error) {
var doc model.{{.ClassName}}
table := d.orm.WithContext(ctx).Table(e.TableName())
if err := table.Create(&e).Error; err != nil {
return doc, err
}
doc = *e
return doc, nil
}


// 获取{{.ClassName}}
func (d *dao) Get{{.ClassName}}(ctx context.Context, e *model.{{.ClassName}}) (model.{{.ClassName}}, error) {
var doc model.{{.ClassName}}
table := d.orm.Table(e.TableName())
{{ range .Columns }}
    {{$x := .Pk}}
    {{- if ($x) }}
        if e.{{.GoField}} != {{if eq .GoType "string" -}} "" {{ else if eq .GoType "int" -}} 0 {{- end}} {
        table = table.Where("{{.ColumnName}}{{if eq .QueryType "EQ"}} = {{else if eq .QueryType "NE"}} != {{else if eq .QueryType "GT"}} >  {{else if eq .QueryType "GTE"}} >=  {{else if eq .QueryType "LT"}} < {{else if eq .QueryType "LTE"}} <= {{else if eq .QueryType "LIKE"}} like {{end}}?", {{ if eq .QueryType "LIKE"}}"%"+e.{{.GoField}}+"%"{{else}}e.{{.GoField}}{{end}})
        }
    {{- else if .IsQuery }}
        if e.{{.GoField}} != {{if eq .GoType "string" -}} "" {{ else if eq .GoType "int" -}} 0 {{- end}} {
        table = table.Where("{{.ColumnName}}{{if eq .QueryType "EQ"}} = {{else if eq .QueryType "NE"}} != {{else if eq .QueryType "GT"}} >  {{else if eq .QueryType "GTE"}} >=  {{else if eq .QueryType "LT"}} < {{else if eq .QueryType "LTE"}} <= {{else if eq .QueryType "LIKE"}} like {{end}}?", {{ if eq .QueryType "LIKE"}}"%"+e.{{.GoField}}+"%"{{else}}e.{{.GoField}}{{end}})
        }
    {{ end -}}
{{- end }}

if err := table.First(&doc).Error; err != nil {
return doc, err
}
return doc, nil
}

// 获取{{.ClassName}}带分页
func (d *dao) Get{{.ClassName}}Page(ctx context.Context, e *model.{{.ClassName}},pageSize int, pageIndex int) (docs []model.{{.ClassName}}, total int64, err error) {

table := d.orm.Table(e.TableName())
{{ range .Columns }}
    {{- if .IsQuery }}
        if e.{{.GoField}} != {{if eq .GoType "string" -}} "" {{ else if eq .GoType "int" -}} 0 {{- end}} {
        table = table.Where("{{.ColumnName}}{{if eq .QueryType "EQ"}} = {{else if eq .QueryType "NE"}} != {{else if eq .QueryType "GT"}} >  {{else if eq .QueryType "GTE"}} >=  {{else if eq .QueryType "LT"}} < {{else if eq .QueryType "LTE"}} <= {{else if eq .QueryType "LIKE"}} like {{end}}?", {{ if eq .QueryType "LIKE"}}"%"+e.{{.GoField}}+"%"{{else}}e.{{.GoField}}{{end}})
        }
    {{ end -}}
{{- end }}

if err = table.Where("`deleted_at` IS NULL").Count(&total).Error; err != nil {
    return
}
if err = table.Offset((pageIndex - 1) * pageSize).Limit(pageSize).Find(&docs).Error; err != nil {
return
}

return
}

// 更新{{.ClassName}}
func (d *dao) Update{{.ClassName}}(ctx context.Context, e *model.{{.ClassName}},id int) (update model.{{.ClassName}}, err error) {
    if err = d.orm.Table(e.TableName()).Where("{{.PkColumn}} = ?", id).First(&update).Error; err != nil {
        return
    }

    //参数1:是要修改的数据
    //参数2:是修改的数据
    if err = d.orm.Table(e.TableName()).Model(&update).Updates(&e).Error; err != nil {
        return
    }
    return
}

// 删除{{.ClassName}}
func (d *dao) Delete{{.ClassName}}(ctx context.Context, e *model.{{.ClassName}}, id int) (success bool, err error) {
    if err = d.orm.Table(e.TableName()).Where("{{.PkColumn}} = ?", id).Delete(&model.{{.ClassName}}{}).Error; err != nil {
        success = false
        return
    }
    success = true
    return
}

//批量删除
func (d *dao) BatchDelete{{.ClassName}}(ctx context.Context, e *model.{{.ClassName}}, id []int) (Result bool, err error) {
    if err = d.orm.Table(e.TableName()).Where("{{.PkColumn}} in (?)", id).Delete(&model.{{.ClassName}}{}).Error; err != nil {
        return
    }
    Result = true
    return
}
