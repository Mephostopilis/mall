// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package oms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	ListOrder(ctx context.Context, in *ListOrderRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*ApiReply, error)
	CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*ApiReply, error)
	ListCompanyAddress(ctx context.Context, in *ListCompanyAddressRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetCompanyAddress(ctx context.Context, in *GetCompanyAddressRequest, opts ...grpc.CallOption) (*ApiReply, error)
	CreateCompanyAddress(ctx context.Context, in *CompanyAddress, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateCompanyAddress(ctx context.Context, in *CompanyAddress, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteCompanyAddress(ctx context.Context, in *DeleteCompanyAddressRequest, opts ...grpc.CallOption) (*ApiReply, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) ListOrder(ctx context.Context, in *ListOrderRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.oms.Admin/ListOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.oms.Admin/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.oms.Admin/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.oms.Admin/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.oms.Admin/DeleteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListCompanyAddress(ctx context.Context, in *ListCompanyAddressRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.oms.Admin/ListCompanyAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetCompanyAddress(ctx context.Context, in *GetCompanyAddressRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.oms.Admin/GetCompanyAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateCompanyAddress(ctx context.Context, in *CompanyAddress, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.oms.Admin/CreateCompanyAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateCompanyAddress(ctx context.Context, in *CompanyAddress, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.oms.Admin/UpdateCompanyAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteCompanyAddress(ctx context.Context, in *DeleteCompanyAddressRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.oms.Admin/DeleteCompanyAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	ListOrder(context.Context, *ListOrderRequest) (*ApiReply, error)
	GetOrder(context.Context, *GetOrderRequest) (*ApiReply, error)
	CreateOrder(context.Context, *Order) (*ApiReply, error)
	UpdateOrder(context.Context, *Order) (*ApiReply, error)
	DeleteOrder(context.Context, *DeleteOrderRequest) (*ApiReply, error)
	ListCompanyAddress(context.Context, *ListCompanyAddressRequest) (*ApiReply, error)
	GetCompanyAddress(context.Context, *GetCompanyAddressRequest) (*ApiReply, error)
	CreateCompanyAddress(context.Context, *CompanyAddress) (*ApiReply, error)
	UpdateCompanyAddress(context.Context, *CompanyAddress) (*ApiReply, error)
	DeleteCompanyAddress(context.Context, *DeleteCompanyAddressRequest) (*ApiReply, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) ListOrder(context.Context, *ListOrderRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrder not implemented")
}
func (UnimplementedAdminServer) GetOrder(context.Context, *GetOrderRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedAdminServer) CreateOrder(context.Context, *Order) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedAdminServer) UpdateOrder(context.Context, *Order) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedAdminServer) DeleteOrder(context.Context, *DeleteOrderRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedAdminServer) ListCompanyAddress(context.Context, *ListCompanyAddressRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanyAddress not implemented")
}
func (UnimplementedAdminServer) GetCompanyAddress(context.Context, *GetCompanyAddressRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyAddress not implemented")
}
func (UnimplementedAdminServer) CreateCompanyAddress(context.Context, *CompanyAddress) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompanyAddress not implemented")
}
func (UnimplementedAdminServer) UpdateCompanyAddress(context.Context, *CompanyAddress) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanyAddress not implemented")
}
func (UnimplementedAdminServer) DeleteCompanyAddress(context.Context, *DeleteCompanyAddressRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompanyAddress not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_ListOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.oms.Admin/ListOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListOrder(ctx, req.(*ListOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.oms.Admin/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.oms.Admin/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.oms.Admin/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.oms.Admin/DeleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteOrder(ctx, req.(*DeleteOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListCompanyAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompanyAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListCompanyAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.oms.Admin/ListCompanyAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListCompanyAddress(ctx, req.(*ListCompanyAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetCompanyAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetCompanyAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.oms.Admin/GetCompanyAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetCompanyAddress(ctx, req.(*GetCompanyAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateCompanyAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateCompanyAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.oms.Admin/CreateCompanyAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateCompanyAddress(ctx, req.(*CompanyAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateCompanyAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateCompanyAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.oms.Admin/UpdateCompanyAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateCompanyAddress(ctx, req.(*CompanyAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteCompanyAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompanyAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteCompanyAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.oms.Admin/DeleteCompanyAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteCompanyAddress(ctx, req.(*DeleteCompanyAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.oms.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrder",
			Handler:    _Admin_ListOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _Admin_GetOrder_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _Admin_CreateOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _Admin_UpdateOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _Admin_DeleteOrder_Handler,
		},
		{
			MethodName: "ListCompanyAddress",
			Handler:    _Admin_ListCompanyAddress_Handler,
		},
		{
			MethodName: "GetCompanyAddress",
			Handler:    _Admin_GetCompanyAddress_Handler,
		},
		{
			MethodName: "CreateCompanyAddress",
			Handler:    _Admin_CreateCompanyAddress_Handler,
		},
		{
			MethodName: "UpdateCompanyAddress",
			Handler:    _Admin_UpdateCompanyAddress_Handler,
		},
		{
			MethodName: "DeleteCompanyAddress",
			Handler:    _Admin_DeleteCompanyAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/oms/oms.proto",
}

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	ListOrder(ctx context.Context, in *ListOrderRequest, opts ...grpc.CallOption) (*ListOrderReply, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderReply, error)
	CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*CreateOrderReply, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) ListOrder(ctx context.Context, in *ListOrderRequest, opts ...grpc.CallOption) (*ListOrderReply, error) {
	out := new(ListOrderReply)
	err := c.cc.Invoke(ctx, "/api.oms.Api/ListOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderReply, error) {
	out := new(GetOrderReply)
	err := c.cc.Invoke(ctx, "/api.oms.Api/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) CreateOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*CreateOrderReply, error) {
	out := new(CreateOrderReply)
	err := c.cc.Invoke(ctx, "/api.oms.Api/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	ListOrder(context.Context, *ListOrderRequest) (*ListOrderReply, error)
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderReply, error)
	CreateOrder(context.Context, *Order) (*CreateOrderReply, error)
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) ListOrder(context.Context, *ListOrderRequest) (*ListOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrder not implemented")
}
func (UnimplementedApiServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedApiServer) CreateOrder(context.Context, *Order) (*CreateOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_ListOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ListOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.oms.Api/ListOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ListOrder(ctx, req.(*ListOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.oms.Api/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.oms.Api/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).CreateOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.oms.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrder",
			Handler:    _Api_ListOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _Api_GetOrder_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _Api_CreateOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/oms/oms.proto",
}
