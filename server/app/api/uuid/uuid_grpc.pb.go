// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package uuid

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UUIDClient is the client API for UUID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UUIDClient interface {
	GenID(ctx context.Context, in *GenIDReq, opts ...grpc.CallOption) (*GenIDResp, error)
}

type uUIDClient struct {
	cc grpc.ClientConnInterface
}

func NewUUIDClient(cc grpc.ClientConnInterface) UUIDClient {
	return &uUIDClient{cc}
}

func (c *uUIDClient) GenID(ctx context.Context, in *GenIDReq, opts ...grpc.CallOption) (*GenIDResp, error) {
	out := new(GenIDResp)
	err := c.cc.Invoke(ctx, "/api.uuid.UUID/GenID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UUIDServer is the server API for UUID service.
// All implementations must embed UnimplementedUUIDServer
// for forward compatibility
type UUIDServer interface {
	GenID(context.Context, *GenIDReq) (*GenIDResp, error)
	mustEmbedUnimplementedUUIDServer()
}

// UnimplementedUUIDServer must be embedded to have forward compatible implementations.
type UnimplementedUUIDServer struct {
}

func (UnimplementedUUIDServer) GenID(context.Context, *GenIDReq) (*GenIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenID not implemented")
}
func (UnimplementedUUIDServer) mustEmbedUnimplementedUUIDServer() {}

// UnsafeUUIDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UUIDServer will
// result in compilation errors.
type UnsafeUUIDServer interface {
	mustEmbedUnimplementedUUIDServer()
}

func RegisterUUIDServer(s grpc.ServiceRegistrar, srv UUIDServer) {
	s.RegisterService(&UUID_ServiceDesc, srv)
}

func _UUID_GenID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UUIDServer).GenID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.uuid.UUID/GenID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UUIDServer).GenID(ctx, req.(*GenIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UUID_ServiceDesc is the grpc.ServiceDesc for UUID service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UUID_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.uuid.UUID",
	HandlerType: (*UUIDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenID",
			Handler:    _UUID_GenID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/uuid/uuid.proto",
}
