// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.0

package member

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AdminHTTPServer interface {
	CreateMember(context.Context, *Member) (*ApiReply, error)
	CreateMemberAssets(context.Context, *MemberAssets) (*ApiReply, error)
	DeleteMember(context.Context, *DeleteMemberRequest) (*ApiReply, error)
	DeleteMemberAssets(context.Context, *DeleteMemberAssetsRequest) (*ApiReply, error)
	GetMember(context.Context, *GetMemberRequest) (*ApiReply, error)
	GetMemberAssets(context.Context, *GetMemberAssetsRequest) (*ApiReply, error)
	ListMember(context.Context, *ListMemberRequest) (*ApiReply, error)
	ListMemberAssets(context.Context, *ListMemberAssetsRequest) (*ApiReply, error)
	UpdateMember(context.Context, *Member) (*ApiReply, error)
	UpdateMemberAssets(context.Context, *MemberAssets) (*ApiReply, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/memberList", _Admin_ListMember0_HTTP_Handler(srv))
	r.GET("/admin/v1/member/{id}", _Admin_GetMember0_HTTP_Handler(srv))
	r.POST("/admin/v1/member", _Admin_CreateMember0_HTTP_Handler(srv))
	r.PUT("/admin/v1/member", _Admin_UpdateMember0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/member/{ids}", _Admin_DeleteMember0_HTTP_Handler(srv))
	r.GET("/admin/v1/memberassetsList", _Admin_ListMemberAssets0_HTTP_Handler(srv))
	r.GET("/admin/v1/memberassets/{id}", _Admin_GetMemberAssets0_HTTP_Handler(srv))
	r.POST("/admin/v1/memberassets", _Admin_CreateMemberAssets0_HTTP_Handler(srv))
	r.PUT("/admin/v1/memberassets", _Admin_UpdateMemberAssets0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/memberassets/{ids}", _Admin_DeleteMemberAssets0_HTTP_Handler(srv))
}

func _Admin_ListMember0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMemberRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.member.Admin/ListMember")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMember(ctx, req.(*ListMemberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetMember0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMemberRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.member.Admin/GetMember")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMember(ctx, req.(*GetMemberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateMember0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Member
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.member.Admin/CreateMember")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMember(ctx, req.(*Member))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateMember0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Member
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.member.Admin/UpdateMember")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMember(ctx, req.(*Member))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteMember0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteMemberRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.member.Admin/DeleteMember")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMember(ctx, req.(*DeleteMemberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListMemberAssets0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMemberAssetsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.member.Admin/ListMemberAssets")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMemberAssets(ctx, req.(*ListMemberAssetsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetMemberAssets0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMemberAssetsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.member.Admin/GetMemberAssets")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMemberAssets(ctx, req.(*GetMemberAssetsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateMemberAssets0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberAssets
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.member.Admin/CreateMemberAssets")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMemberAssets(ctx, req.(*MemberAssets))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateMemberAssets0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MemberAssets
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.member.Admin/UpdateMemberAssets")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMemberAssets(ctx, req.(*MemberAssets))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteMemberAssets0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteMemberAssetsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.member.Admin/DeleteMemberAssets")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMemberAssets(ctx, req.(*DeleteMemberAssetsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	CreateMember(ctx context.Context, req *Member, opts ...http.CallOption) (rsp *ApiReply, err error)
	CreateMemberAssets(ctx context.Context, req *MemberAssets, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteMember(ctx context.Context, req *DeleteMemberRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteMemberAssets(ctx context.Context, req *DeleteMemberAssetsRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetMember(ctx context.Context, req *GetMemberRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetMemberAssets(ctx context.Context, req *GetMemberAssetsRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListMember(ctx context.Context, req *ListMemberRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListMemberAssets(ctx context.Context, req *ListMemberAssetsRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateMember(ctx context.Context, req *Member, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateMemberAssets(ctx context.Context, req *MemberAssets, opts ...http.CallOption) (rsp *ApiReply, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) CreateMember(ctx context.Context, in *Member, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/member"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.member.Admin/CreateMember"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateMemberAssets(ctx context.Context, in *MemberAssets, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/memberassets"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.member.Admin/CreateMemberAssets"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/member/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.member.Admin/DeleteMember"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteMemberAssets(ctx context.Context, in *DeleteMemberAssetsRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/memberassets/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.member.Admin/DeleteMemberAssets"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetMember(ctx context.Context, in *GetMemberRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/member/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.member.Admin/GetMember"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetMemberAssets(ctx context.Context, in *GetMemberAssetsRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/memberassets/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.member.Admin/GetMemberAssets"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListMember(ctx context.Context, in *ListMemberRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/memberList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.member.Admin/ListMember"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListMemberAssets(ctx context.Context, in *ListMemberAssetsRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/memberassetsList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.member.Admin/ListMemberAssets"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateMember(ctx context.Context, in *Member, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/member"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.member.Admin/UpdateMember"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateMemberAssets(ctx context.Context, in *MemberAssets, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/memberassets"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.member.Admin/UpdateMemberAssets"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

type ApiHTTPServer interface {
	GetMember(context.Context, *GetMemberRequest) (*GetMemberReply, error)
	SayHelloURL(context.Context, *HelloReq) (*HelloResp, error)
}

func RegisterApiHTTPServer(s *http.Server, srv ApiHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/oms/say_hello", _Api_SayHelloURL0_HTTP_Handler(srv))
	r.GET("/api/v1/member/{id}", _Api_GetMember1_HTTP_Handler(srv))
}

func _Api_SayHelloURL0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.member.Api/SayHelloURL")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHelloURL(ctx, req.(*HelloReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloResp)
		return ctx.Result(200, reply)
	}
}

func _Api_GetMember1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMemberRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.member.Api/GetMember")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMember(ctx, req.(*GetMemberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMemberReply)
		return ctx.Result(200, reply)
	}
}

type ApiHTTPClient interface {
	GetMember(ctx context.Context, req *GetMemberRequest, opts ...http.CallOption) (rsp *GetMemberReply, err error)
	SayHelloURL(ctx context.Context, req *HelloReq, opts ...http.CallOption) (rsp *HelloResp, err error)
}

type ApiHTTPClientImpl struct {
	cc *http.Client
}

func NewApiHTTPClient(client *http.Client) ApiHTTPClient {
	return &ApiHTTPClientImpl{client}
}

func (c *ApiHTTPClientImpl) GetMember(ctx context.Context, in *GetMemberRequest, opts ...http.CallOption) (*GetMemberReply, error) {
	var out GetMemberReply
	pattern := "/api/v1/member/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.member.Api/GetMember"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) SayHelloURL(ctx context.Context, in *HelloReq, opts ...http.CallOption) (*HelloResp, error) {
	var out HelloResp
	pattern := "/api/v1/oms/say_hello"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.member.Api/SayHelloURL"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
