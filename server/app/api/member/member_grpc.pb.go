// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package member

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	ListMember(ctx context.Context, in *ListMemberRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*ApiReply, error)
	CreateMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*ApiReply, error)
	ListMemberAssets(ctx context.Context, in *ListMemberAssetsRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetMemberAssets(ctx context.Context, in *GetMemberAssetsRequest, opts ...grpc.CallOption) (*ApiReply, error)
	CreateMemberAssets(ctx context.Context, in *MemberAssets, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateMemberAssets(ctx context.Context, in *MemberAssets, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteMemberAssets(ctx context.Context, in *DeleteMemberAssetsRequest, opts ...grpc.CallOption) (*ApiReply, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) ListMember(ctx context.Context, in *ListMemberRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.member.Admin/ListMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.member.Admin/GetMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.member.Admin/CreateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateMember(ctx context.Context, in *Member, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.member.Admin/UpdateMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.member.Admin/DeleteMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListMemberAssets(ctx context.Context, in *ListMemberAssetsRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.member.Admin/ListMemberAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetMemberAssets(ctx context.Context, in *GetMemberAssetsRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.member.Admin/GetMemberAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateMemberAssets(ctx context.Context, in *MemberAssets, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.member.Admin/CreateMemberAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateMemberAssets(ctx context.Context, in *MemberAssets, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.member.Admin/UpdateMemberAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteMemberAssets(ctx context.Context, in *DeleteMemberAssetsRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.member.Admin/DeleteMemberAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	ListMember(context.Context, *ListMemberRequest) (*ApiReply, error)
	GetMember(context.Context, *GetMemberRequest) (*ApiReply, error)
	CreateMember(context.Context, *Member) (*ApiReply, error)
	UpdateMember(context.Context, *Member) (*ApiReply, error)
	DeleteMember(context.Context, *DeleteMemberRequest) (*ApiReply, error)
	ListMemberAssets(context.Context, *ListMemberAssetsRequest) (*ApiReply, error)
	GetMemberAssets(context.Context, *GetMemberAssetsRequest) (*ApiReply, error)
	CreateMemberAssets(context.Context, *MemberAssets) (*ApiReply, error)
	UpdateMemberAssets(context.Context, *MemberAssets) (*ApiReply, error)
	DeleteMemberAssets(context.Context, *DeleteMemberAssetsRequest) (*ApiReply, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) ListMember(context.Context, *ListMemberRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMember not implemented")
}
func (UnimplementedAdminServer) GetMember(context.Context, *GetMemberRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMember not implemented")
}
func (UnimplementedAdminServer) CreateMember(context.Context, *Member) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMember not implemented")
}
func (UnimplementedAdminServer) UpdateMember(context.Context, *Member) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (UnimplementedAdminServer) DeleteMember(context.Context, *DeleteMemberRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedAdminServer) ListMemberAssets(context.Context, *ListMemberAssetsRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMemberAssets not implemented")
}
func (UnimplementedAdminServer) GetMemberAssets(context.Context, *GetMemberAssetsRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberAssets not implemented")
}
func (UnimplementedAdminServer) CreateMemberAssets(context.Context, *MemberAssets) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMemberAssets not implemented")
}
func (UnimplementedAdminServer) UpdateMemberAssets(context.Context, *MemberAssets) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemberAssets not implemented")
}
func (UnimplementedAdminServer) DeleteMemberAssets(context.Context, *DeleteMemberAssetsRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberAssets not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_ListMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.member.Admin/ListMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListMember(ctx, req.(*ListMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.member.Admin/GetMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetMember(ctx, req.(*GetMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.member.Admin/CreateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateMember(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Member)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.member.Admin/UpdateMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateMember(ctx, req.(*Member))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.member.Admin/DeleteMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteMember(ctx, req.(*DeleteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListMemberAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMemberAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListMemberAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.member.Admin/ListMemberAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListMemberAssets(ctx, req.(*ListMemberAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetMemberAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetMemberAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.member.Admin/GetMemberAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetMemberAssets(ctx, req.(*GetMemberAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateMemberAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberAssets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateMemberAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.member.Admin/CreateMemberAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateMemberAssets(ctx, req.(*MemberAssets))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateMemberAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberAssets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateMemberAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.member.Admin/UpdateMemberAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateMemberAssets(ctx, req.(*MemberAssets))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteMemberAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteMemberAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.member.Admin/DeleteMemberAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteMemberAssets(ctx, req.(*DeleteMemberAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.member.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMember",
			Handler:    _Admin_ListMember_Handler,
		},
		{
			MethodName: "GetMember",
			Handler:    _Admin_GetMember_Handler,
		},
		{
			MethodName: "CreateMember",
			Handler:    _Admin_CreateMember_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _Admin_UpdateMember_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _Admin_DeleteMember_Handler,
		},
		{
			MethodName: "ListMemberAssets",
			Handler:    _Admin_ListMemberAssets_Handler,
		},
		{
			MethodName: "GetMemberAssets",
			Handler:    _Admin_GetMemberAssets_Handler,
		},
		{
			MethodName: "CreateMemberAssets",
			Handler:    _Admin_CreateMemberAssets_Handler,
		},
		{
			MethodName: "UpdateMemberAssets",
			Handler:    _Admin_UpdateMemberAssets_Handler,
		},
		{
			MethodName: "DeleteMemberAssets",
			Handler:    _Admin_DeleteMemberAssets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/member/member.proto",
}

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	SayHelloURL(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error)
	GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*GetMemberReply, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) SayHelloURL(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error) {
	out := new(HelloResp)
	err := c.cc.Invoke(ctx, "/api.member.Api/SayHelloURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*GetMemberReply, error) {
	out := new(GetMemberReply)
	err := c.cc.Invoke(ctx, "/api.member.Api/GetMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	SayHelloURL(context.Context, *HelloReq) (*HelloResp, error)
	GetMember(context.Context, *GetMemberRequest) (*GetMemberReply, error)
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) SayHelloURL(context.Context, *HelloReq) (*HelloResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloURL not implemented")
}
func (UnimplementedApiServer) GetMember(context.Context, *GetMemberRequest) (*GetMemberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMember not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_SayHelloURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).SayHelloURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.member.Api/SayHelloURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).SayHelloURL(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.member.Api/GetMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetMember(ctx, req.(*GetMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.member.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHelloURL",
			Handler:    _Api_SayHelloURL_Handler,
		},
		{
			MethodName: "GetMember",
			Handler:    _Api_GetMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/member/member.proto",
}
