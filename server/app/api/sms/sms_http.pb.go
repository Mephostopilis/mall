// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.0

package sms

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AdminHTTPServer interface {
	CreateCoupon(context.Context, *Coupon) (*ApiReply, error)
	CreateCouponHistory(context.Context, *CouponHistory) (*ApiReply, error)
	DeleteCoupon(context.Context, *DeleteCouponRequest) (*ApiReply, error)
	DeleteCouponHistory(context.Context, *DeleteCouponHistoryRequest) (*ApiReply, error)
	GetCoupon(context.Context, *GetCouponRequest) (*ApiReply, error)
	GetCouponHistory(context.Context, *GetCouponHistoryRequest) (*ApiReply, error)
	ListCoupon(context.Context, *ListCouponRequest) (*ApiReply, error)
	ListCouponHistory(context.Context, *ListCouponHistoryRequest) (*ApiReply, error)
	UpdateCoupon(context.Context, *Coupon) (*ApiReply, error)
	UpdateCouponHistory(context.Context, *CouponHistory) (*ApiReply, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/smscouponList", _Admin_ListCoupon2_HTTP_Handler(srv))
	r.GET("/admin/v1/smscoupon/{id}", _Admin_GetCoupon1_HTTP_Handler(srv))
	r.POST("/admin/v1/smscoupon", _Admin_CreateCoupon0_HTTP_Handler(srv))
	r.PUT("/admin/v1/smscoupon", _Admin_UpdateCoupon0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/smscoupon/{ids}", _Admin_DeleteCoupon0_HTTP_Handler(srv))
	r.GET("/admin/v1/smscouponhistoryList", _Admin_ListCouponHistory0_HTTP_Handler(srv))
	r.GET("/admin/v1/smscouponhistory/{id}", _Admin_GetCouponHistory0_HTTP_Handler(srv))
	r.POST("/admin/v1/smscouponhistory", _Admin_CreateCouponHistory0_HTTP_Handler(srv))
	r.PUT("/admin/v1/smscouponhistory", _Admin_UpdateCouponHistory0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/smscouponhistory/{ids}", _Admin_DeleteCouponHistory0_HTTP_Handler(srv))
}

func _Admin_ListCoupon2_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCouponRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sms.Admin/ListCoupon")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCoupon(ctx, req.(*ListCouponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetCoupon1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCouponRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sms.Admin/GetCoupon")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCoupon(ctx, req.(*GetCouponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateCoupon0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Coupon
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sms.Admin/CreateCoupon")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCoupon(ctx, req.(*Coupon))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateCoupon0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Coupon
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sms.Admin/UpdateCoupon")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCoupon(ctx, req.(*Coupon))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteCoupon0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCouponRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sms.Admin/DeleteCoupon")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCoupon(ctx, req.(*DeleteCouponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListCouponHistory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCouponHistoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sms.Admin/ListCouponHistory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCouponHistory(ctx, req.(*ListCouponHistoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetCouponHistory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCouponHistoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sms.Admin/GetCouponHistory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCouponHistory(ctx, req.(*GetCouponHistoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateCouponHistory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CouponHistory
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sms.Admin/CreateCouponHistory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateCouponHistory(ctx, req.(*CouponHistory))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateCouponHistory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CouponHistory
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sms.Admin/UpdateCouponHistory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCouponHistory(ctx, req.(*CouponHistory))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteCouponHistory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCouponHistoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sms.Admin/DeleteCouponHistory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCouponHistory(ctx, req.(*DeleteCouponHistoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	CreateCoupon(ctx context.Context, req *Coupon, opts ...http.CallOption) (rsp *ApiReply, err error)
	CreateCouponHistory(ctx context.Context, req *CouponHistory, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteCoupon(ctx context.Context, req *DeleteCouponRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteCouponHistory(ctx context.Context, req *DeleteCouponHistoryRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetCoupon(ctx context.Context, req *GetCouponRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetCouponHistory(ctx context.Context, req *GetCouponHistoryRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListCoupon(ctx context.Context, req *ListCouponRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListCouponHistory(ctx context.Context, req *ListCouponHistoryRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateCoupon(ctx context.Context, req *Coupon, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateCouponHistory(ctx context.Context, req *CouponHistory, opts ...http.CallOption) (rsp *ApiReply, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) CreateCoupon(ctx context.Context, in *Coupon, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/smscoupon"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sms.Admin/CreateCoupon"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateCouponHistory(ctx context.Context, in *CouponHistory, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/smscouponhistory"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sms.Admin/CreateCouponHistory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteCoupon(ctx context.Context, in *DeleteCouponRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/smscoupon/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sms.Admin/DeleteCoupon"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteCouponHistory(ctx context.Context, in *DeleteCouponHistoryRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/smscouponhistory/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sms.Admin/DeleteCouponHistory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetCoupon(ctx context.Context, in *GetCouponRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/smscoupon/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sms.Admin/GetCoupon"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetCouponHistory(ctx context.Context, in *GetCouponHistoryRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/smscouponhistory/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sms.Admin/GetCouponHistory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListCoupon(ctx context.Context, in *ListCouponRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/smscouponList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sms.Admin/ListCoupon"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListCouponHistory(ctx context.Context, in *ListCouponHistoryRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/smscouponhistoryList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sms.Admin/ListCouponHistory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateCoupon(ctx context.Context, in *Coupon, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/smscoupon"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sms.Admin/UpdateCoupon"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateCouponHistory(ctx context.Context, in *CouponHistory, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/smscouponhistory"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sms.Admin/UpdateCouponHistory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

type ApiHTTPServer interface {
	GetCoupon(context.Context, *GetCouponRequest) (*GetCouponReply, error)
	ListCoupon(context.Context, *ListCouponRequest) (*ListCouponReply, error)
	SayHelloURL(context.Context, *HelloReq) (*HelloResp, error)
}

func RegisterApiHTTPServer(s *http.Server, srv ApiHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/sms/say_hello", _Api_SayHelloURL4_HTTP_Handler(srv))
	r.GET("/api/v1/sms/couponList", _Api_ListCoupon3_HTTP_Handler(srv))
	r.GET("/api/v1/sms/coupon/{id}", _Api_GetCoupon2_HTTP_Handler(srv))
}

func _Api_SayHelloURL4_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sms.Api/SayHelloURL")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHelloURL(ctx, req.(*HelloReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloResp)
		return ctx.Result(200, reply)
	}
}

func _Api_ListCoupon3_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListCouponRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sms.Api/ListCoupon")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListCoupon(ctx, req.(*ListCouponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListCouponReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetCoupon2_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCouponRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sms.Api/GetCoupon")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCoupon(ctx, req.(*GetCouponRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCouponReply)
		return ctx.Result(200, reply)
	}
}

type ApiHTTPClient interface {
	GetCoupon(ctx context.Context, req *GetCouponRequest, opts ...http.CallOption) (rsp *GetCouponReply, err error)
	ListCoupon(ctx context.Context, req *ListCouponRequest, opts ...http.CallOption) (rsp *ListCouponReply, err error)
	SayHelloURL(ctx context.Context, req *HelloReq, opts ...http.CallOption) (rsp *HelloResp, err error)
}

type ApiHTTPClientImpl struct {
	cc *http.Client
}

func NewApiHTTPClient(client *http.Client) ApiHTTPClient {
	return &ApiHTTPClientImpl{client}
}

func (c *ApiHTTPClientImpl) GetCoupon(ctx context.Context, in *GetCouponRequest, opts ...http.CallOption) (*GetCouponReply, error) {
	var out GetCouponReply
	pattern := "/api/v1/sms/coupon/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sms.Api/GetCoupon"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListCoupon(ctx context.Context, in *ListCouponRequest, opts ...http.CallOption) (*ListCouponReply, error) {
	var out ListCouponReply
	pattern := "/api/v1/sms/couponList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sms.Api/ListCoupon"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) SayHelloURL(ctx context.Context, in *HelloReq, opts ...http.CallOption) (*HelloResp, error) {
	var out HelloResp
	pattern := "/api/v1/sms/say_hello"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sms.Api/SayHelloURL"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
