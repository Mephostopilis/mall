// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	ListCoupon(ctx context.Context, in *ListCouponRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetCoupon(ctx context.Context, in *GetCouponRequest, opts ...grpc.CallOption) (*ApiReply, error)
	CreateCoupon(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateCoupon(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteCoupon(ctx context.Context, in *DeleteCouponRequest, opts ...grpc.CallOption) (*ApiReply, error)
	ListCouponHistory(ctx context.Context, in *ListCouponHistoryRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetCouponHistory(ctx context.Context, in *GetCouponHistoryRequest, opts ...grpc.CallOption) (*ApiReply, error)
	CreateCouponHistory(ctx context.Context, in *CouponHistory, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateCouponHistory(ctx context.Context, in *CouponHistory, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteCouponHistory(ctx context.Context, in *DeleteCouponHistoryRequest, opts ...grpc.CallOption) (*ApiReply, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) ListCoupon(ctx context.Context, in *ListCouponRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sms.Admin/ListCoupon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetCoupon(ctx context.Context, in *GetCouponRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sms.Admin/GetCoupon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateCoupon(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sms.Admin/CreateCoupon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateCoupon(ctx context.Context, in *Coupon, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sms.Admin/UpdateCoupon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteCoupon(ctx context.Context, in *DeleteCouponRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sms.Admin/DeleteCoupon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListCouponHistory(ctx context.Context, in *ListCouponHistoryRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sms.Admin/ListCouponHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetCouponHistory(ctx context.Context, in *GetCouponHistoryRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sms.Admin/GetCouponHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateCouponHistory(ctx context.Context, in *CouponHistory, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sms.Admin/CreateCouponHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateCouponHistory(ctx context.Context, in *CouponHistory, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sms.Admin/UpdateCouponHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteCouponHistory(ctx context.Context, in *DeleteCouponHistoryRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sms.Admin/DeleteCouponHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	ListCoupon(context.Context, *ListCouponRequest) (*ApiReply, error)
	GetCoupon(context.Context, *GetCouponRequest) (*ApiReply, error)
	CreateCoupon(context.Context, *Coupon) (*ApiReply, error)
	UpdateCoupon(context.Context, *Coupon) (*ApiReply, error)
	DeleteCoupon(context.Context, *DeleteCouponRequest) (*ApiReply, error)
	ListCouponHistory(context.Context, *ListCouponHistoryRequest) (*ApiReply, error)
	GetCouponHistory(context.Context, *GetCouponHistoryRequest) (*ApiReply, error)
	CreateCouponHistory(context.Context, *CouponHistory) (*ApiReply, error)
	UpdateCouponHistory(context.Context, *CouponHistory) (*ApiReply, error)
	DeleteCouponHistory(context.Context, *DeleteCouponHistoryRequest) (*ApiReply, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) ListCoupon(context.Context, *ListCouponRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCoupon not implemented")
}
func (UnimplementedAdminServer) GetCoupon(context.Context, *GetCouponRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoupon not implemented")
}
func (UnimplementedAdminServer) CreateCoupon(context.Context, *Coupon) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoupon not implemented")
}
func (UnimplementedAdminServer) UpdateCoupon(context.Context, *Coupon) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoupon not implemented")
}
func (UnimplementedAdminServer) DeleteCoupon(context.Context, *DeleteCouponRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoupon not implemented")
}
func (UnimplementedAdminServer) ListCouponHistory(context.Context, *ListCouponHistoryRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCouponHistory not implemented")
}
func (UnimplementedAdminServer) GetCouponHistory(context.Context, *GetCouponHistoryRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCouponHistory not implemented")
}
func (UnimplementedAdminServer) CreateCouponHistory(context.Context, *CouponHistory) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCouponHistory not implemented")
}
func (UnimplementedAdminServer) UpdateCouponHistory(context.Context, *CouponHistory) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCouponHistory not implemented")
}
func (UnimplementedAdminServer) DeleteCouponHistory(context.Context, *DeleteCouponHistoryRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCouponHistory not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_ListCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sms.Admin/ListCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListCoupon(ctx, req.(*ListCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sms.Admin/GetCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetCoupon(ctx, req.(*GetCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Coupon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sms.Admin/CreateCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateCoupon(ctx, req.(*Coupon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Coupon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sms.Admin/UpdateCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateCoupon(ctx, req.(*Coupon))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sms.Admin/DeleteCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteCoupon(ctx, req.(*DeleteCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListCouponHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCouponHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListCouponHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sms.Admin/ListCouponHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListCouponHistory(ctx, req.(*ListCouponHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetCouponHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouponHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetCouponHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sms.Admin/GetCouponHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetCouponHistory(ctx, req.(*GetCouponHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateCouponHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CouponHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateCouponHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sms.Admin/CreateCouponHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateCouponHistory(ctx, req.(*CouponHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateCouponHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CouponHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateCouponHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sms.Admin/UpdateCouponHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateCouponHistory(ctx, req.(*CouponHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteCouponHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCouponHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteCouponHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sms.Admin/DeleteCouponHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteCouponHistory(ctx, req.(*DeleteCouponHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.sms.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCoupon",
			Handler:    _Admin_ListCoupon_Handler,
		},
		{
			MethodName: "GetCoupon",
			Handler:    _Admin_GetCoupon_Handler,
		},
		{
			MethodName: "CreateCoupon",
			Handler:    _Admin_CreateCoupon_Handler,
		},
		{
			MethodName: "UpdateCoupon",
			Handler:    _Admin_UpdateCoupon_Handler,
		},
		{
			MethodName: "DeleteCoupon",
			Handler:    _Admin_DeleteCoupon_Handler,
		},
		{
			MethodName: "ListCouponHistory",
			Handler:    _Admin_ListCouponHistory_Handler,
		},
		{
			MethodName: "GetCouponHistory",
			Handler:    _Admin_GetCouponHistory_Handler,
		},
		{
			MethodName: "CreateCouponHistory",
			Handler:    _Admin_CreateCouponHistory_Handler,
		},
		{
			MethodName: "UpdateCouponHistory",
			Handler:    _Admin_UpdateCouponHistory_Handler,
		},
		{
			MethodName: "DeleteCouponHistory",
			Handler:    _Admin_DeleteCouponHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sms/sms.proto",
}

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	// rpc Ping (.google.protobuf.Empty) returns (.google.protobuf.Empty);
	// rpc SayHello (HelloReq) returns (.google.protobuf.Empty);
	SayHelloURL(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error)
	ListCoupon(ctx context.Context, in *ListCouponRequest, opts ...grpc.CallOption) (*ListCouponReply, error)
	GetCoupon(ctx context.Context, in *GetCouponRequest, opts ...grpc.CallOption) (*GetCouponReply, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) SayHelloURL(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error) {
	out := new(HelloResp)
	err := c.cc.Invoke(ctx, "/api.sms.Api/SayHelloURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ListCoupon(ctx context.Context, in *ListCouponRequest, opts ...grpc.CallOption) (*ListCouponReply, error) {
	out := new(ListCouponReply)
	err := c.cc.Invoke(ctx, "/api.sms.Api/ListCoupon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetCoupon(ctx context.Context, in *GetCouponRequest, opts ...grpc.CallOption) (*GetCouponReply, error) {
	out := new(GetCouponReply)
	err := c.cc.Invoke(ctx, "/api.sms.Api/GetCoupon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	// rpc Ping (.google.protobuf.Empty) returns (.google.protobuf.Empty);
	// rpc SayHello (HelloReq) returns (.google.protobuf.Empty);
	SayHelloURL(context.Context, *HelloReq) (*HelloResp, error)
	ListCoupon(context.Context, *ListCouponRequest) (*ListCouponReply, error)
	GetCoupon(context.Context, *GetCouponRequest) (*GetCouponReply, error)
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) SayHelloURL(context.Context, *HelloReq) (*HelloResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloURL not implemented")
}
func (UnimplementedApiServer) ListCoupon(context.Context, *ListCouponRequest) (*ListCouponReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCoupon not implemented")
}
func (UnimplementedApiServer) GetCoupon(context.Context, *GetCouponRequest) (*GetCouponReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoupon not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_SayHelloURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).SayHelloURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sms.Api/SayHelloURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).SayHelloURL(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ListCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ListCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sms.Api/ListCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ListCoupon(ctx, req.(*ListCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sms.Api/GetCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetCoupon(ctx, req.(*GetCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.sms.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHelloURL",
			Handler:    _Api_SayHelloURL_Handler,
		},
		{
			MethodName: "ListCoupon",
			Handler:    _Api_ListCoupon_Handler,
		},
		{
			MethodName: "GetCoupon",
			Handler:    _Api_GetCoupon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sms/sms.proto",
}
