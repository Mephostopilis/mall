// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.0

package sso

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AdminHTTPServer interface {
	CreateLoginLog(context.Context, *LoginLog) (*ApiReply, error)
	CreateRole(context.Context, *Role) (*ApiReply, error)
	CreateSysUser(context.Context, *SysUser) (*ApiReply, error)
	DeleteLoginLog(context.Context, *DeleteLoginLogRequest) (*ApiReply, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*ApiReply, error)
	DeleteSsoApp(context.Context, *DeleteSsoAppRequest) (*ApiReply, error)
	DeleteSsoToken(context.Context, *DeleteSsoTokenRequest) (*ApiReply, error)
	DeleteSysUser(context.Context, *DeleteSysUserRequest) (*ApiReply, error)
	GenerateCaptchaHandler(context.Context, *GenerateCaptchaHandlerRequest) (*ApiReply, error)
	GetInfo(context.Context, *GetInfoRequest) (*ApiReply, error)
	GetLoginLog(context.Context, *GetLoginLogRequest) (*ApiReply, error)
	GetRole(context.Context, *GetRoleRequest) (*ApiReply, error)
	GetSsoApp(context.Context, *GetSsoAppRequest) (*ApiReply, error)
	GetSsoAppList(context.Context, *GetSsoAppListRequest) (*ApiReply, error)
	GetSsoToken(context.Context, *GetSsoTokenRequest) (*ApiReply, error)
	GetSsoTokenList(context.Context, *GetSsoTokenListRequest) (*ApiReply, error)
	GetSysUser(context.Context, *GetSysUserRequest) (*ApiReply, error)
	GetSysUserInit(context.Context, *GetSysUserInitRequest) (*ApiReply, error)
	GetSysUserProfile(context.Context, *GetSysUserProfileRequest) (*ApiReply, error)
	InsertSsoApp(context.Context, *App) (*ApiReply, error)
	InsertSsoToken(context.Context, *Token) (*ApiReply, error)
	InsetSysUserAvatar(context.Context, *InsetSysUserAvatarRequest) (*ApiReply, error)
	ListLoginLog(context.Context, *ListLoginLogRequest) (*ApiReply, error)
	ListRole(context.Context, *ListRoleRequest) (*ApiReply, error)
	ListSysUser(context.Context, *ListSysUserRequest) (*ApiReply, error)
	Login(context.Context, *LoginRequest) (*ApiReply, error)
	Logout(context.Context, *LogoutReq) (*LogoutResp, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*ApiReply, error)
	SysUserUpdatePwd(context.Context, *SysUserUpdatePwdRequest) (*ApiReply, error)
	UpdateLoginLog(context.Context, *LoginLog) (*ApiReply, error)
	UpdateRole(context.Context, *Role) (*ApiReply, error)
	UpdateSsoApp(context.Context, *App) (*ApiReply, error)
	UpdateSsoToken(context.Context, *Token) (*ApiReply, error)
	UpdateSysUser(context.Context, *SysUser) (*ApiReply, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/getCaptcha", _Admin_GenerateCaptchaHandler0_HTTP_Handler(srv))
	r.POST("/admin/login", _Admin_Login0_HTTP_Handler(srv))
	r.GET("/admin/refresh_token", _Admin_RefreshToken0_HTTP_Handler(srv))
	r.GET("/admin/v1/getinfo", _Admin_GetInfo0_HTTP_Handler(srv))
	r.POST("/admin/v1/logout", _Admin_Logout0_HTTP_Handler(srv))
	r.GET("/admin/v1/ssoappsList", _Admin_GetSsoAppList0_HTTP_Handler(srv))
	r.GET("/admin/v1/ssoapps/{id}", _Admin_GetSsoApp0_HTTP_Handler(srv))
	r.POST("/admin/v1/ssoapps", _Admin_InsertSsoApp0_HTTP_Handler(srv))
	r.PUT("/admin/v1/ssoapps", _Admin_UpdateSsoApp0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/ssoapps", _Admin_DeleteSsoApp0_HTTP_Handler(srv))
	r.GET("/admin/v1/ssotokensList", _Admin_GetSsoTokenList0_HTTP_Handler(srv))
	r.GET("/admin/v1/ssotokens/{id}", _Admin_GetSsoToken0_HTTP_Handler(srv))
	r.POST("/admin/v1/ssotokens", _Admin_InsertSsoToken0_HTTP_Handler(srv))
	r.PUT("/admin/v1/ssotokens", _Admin_UpdateSsoToken0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/ssotokens", _Admin_DeleteSsoToken0_HTTP_Handler(srv))
	r.POST("/admin/v1/loginlog", _Admin_CreateLoginLog0_HTTP_Handler(srv))
	r.PUT("/admin/v1/loginlog", _Admin_UpdateLoginLog0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/loginlog", _Admin_DeleteLoginLog0_HTTP_Handler(srv))
	r.GET("/admin/v1/loginlog/{infoId}", _Admin_GetLoginLog0_HTTP_Handler(srv))
	r.GET("/admin/v1/loginloglist", _Admin_ListLoginLog0_HTTP_Handler(srv))
	r.POST("/admin/v1/role/{roleId}", _Admin_CreateRole0_HTTP_Handler(srv))
	r.PUT("/admin/v1/role", _Admin_UpdateRole0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/role", _Admin_DeleteRole0_HTTP_Handler(srv))
	r.GET("/admin/v1/role/{roleId}", _Admin_GetRole0_HTTP_Handler(srv))
	r.GET("/admin/v1/rolelist", _Admin_ListRole0_HTTP_Handler(srv))
	r.POST("/admin/v1/sysUser", _Admin_CreateSysUser0_HTTP_Handler(srv))
	r.PUT("/admin/v1/sysUser", _Admin_UpdateSysUser0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/sysUser", _Admin_DeleteSysUser0_HTTP_Handler(srv))
	r.GET("/admin/v1/sysUser/{userId}", _Admin_GetSysUser0_HTTP_Handler(srv))
	r.GET("/admin/v1/sysUser", _Admin_GetSysUserInit0_HTTP_Handler(srv))
	r.GET("/admin/v1/sysUserList", _Admin_ListSysUser0_HTTP_Handler(srv))
	r.POST("/admin/v1/user/avatar", _Admin_InsetSysUserAvatar0_HTTP_Handler(srv))
	r.PUT("/admin/v1/user/pwd", _Admin_SysUserUpdatePwd0_HTTP_Handler(srv))
	r.GET("/admin/v1/user/profile", _Admin_GetSysUserProfile0_HTTP_Handler(srv))
}

func _Admin_GenerateCaptchaHandler0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateCaptchaHandlerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/GenerateCaptchaHandler")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateCaptchaHandler(ctx, req.(*GenerateCaptchaHandlerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_Login0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/Login")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_RefreshToken0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RefreshTokenRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/RefreshToken")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RefreshToken(ctx, req.(*RefreshTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetInfo0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/GetInfo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetInfo(ctx, req.(*GetInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_Logout0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/Logout")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutResp)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetSsoAppList0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSsoAppListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/GetSsoAppList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSsoAppList(ctx, req.(*GetSsoAppListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetSsoApp0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSsoAppRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/GetSsoApp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSsoApp(ctx, req.(*GetSsoAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_InsertSsoApp0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in App
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/InsertSsoApp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InsertSsoApp(ctx, req.(*App))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateSsoApp0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in App
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/UpdateSsoApp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSsoApp(ctx, req.(*App))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteSsoApp0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSsoAppRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/DeleteSsoApp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSsoApp(ctx, req.(*DeleteSsoAppRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetSsoTokenList0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSsoTokenListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/GetSsoTokenList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSsoTokenList(ctx, req.(*GetSsoTokenListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetSsoToken0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSsoTokenRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/GetSsoToken")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSsoToken(ctx, req.(*GetSsoTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_InsertSsoToken0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Token
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/InsertSsoToken")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InsertSsoToken(ctx, req.(*Token))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateSsoToken0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Token
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/UpdateSsoToken")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSsoToken(ctx, req.(*Token))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteSsoToken0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSsoTokenRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/DeleteSsoToken")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSsoToken(ctx, req.(*DeleteSsoTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateLoginLog0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginLog
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/CreateLoginLog")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateLoginLog(ctx, req.(*LoginLog))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateLoginLog0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginLog
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/UpdateLoginLog")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateLoginLog(ctx, req.(*LoginLog))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteLoginLog0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteLoginLogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/DeleteLoginLog")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteLoginLog(ctx, req.(*DeleteLoginLogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetLoginLog0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetLoginLogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/GetLoginLog")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetLoginLog(ctx, req.(*GetLoginLogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListLoginLog0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListLoginLogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/ListLoginLog")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListLoginLog(ctx, req.(*ListLoginLogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateRole0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Role
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/CreateRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRole(ctx, req.(*Role))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateRole0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Role
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/UpdateRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRole(ctx, req.(*Role))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteRole0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/DeleteRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRole(ctx, req.(*DeleteRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetRole0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/GetRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRole(ctx, req.(*GetRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListRole0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/ListRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRole(ctx, req.(*ListRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateSysUser0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysUser
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/CreateSysUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSysUser(ctx, req.(*SysUser))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateSysUser0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysUser
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/UpdateSysUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSysUser(ctx, req.(*SysUser))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteSysUser0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSysUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/DeleteSysUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSysUser(ctx, req.(*DeleteSysUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetSysUser0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSysUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/GetSysUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysUser(ctx, req.(*GetSysUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetSysUserInit0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSysUserInitRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/GetSysUserInit")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysUserInit(ctx, req.(*GetSysUserInitRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListSysUser0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSysUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/ListSysUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSysUser(ctx, req.(*ListSysUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_InsetSysUserAvatar0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InsetSysUserAvatarRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/InsetSysUserAvatar")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InsetSysUserAvatar(ctx, req.(*InsetSysUserAvatarRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_SysUserUpdatePwd0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysUserUpdatePwdRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/SysUserUpdatePwd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysUserUpdatePwd(ctx, req.(*SysUserUpdatePwdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetSysUserProfile0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSysUserProfileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Admin/GetSysUserProfile")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysUserProfile(ctx, req.(*GetSysUserProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	CreateLoginLog(ctx context.Context, req *LoginLog, opts ...http.CallOption) (rsp *ApiReply, err error)
	CreateRole(ctx context.Context, req *Role, opts ...http.CallOption) (rsp *ApiReply, err error)
	CreateSysUser(ctx context.Context, req *SysUser, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteLoginLog(ctx context.Context, req *DeleteLoginLogRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteRole(ctx context.Context, req *DeleteRoleRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteSsoApp(ctx context.Context, req *DeleteSsoAppRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteSsoToken(ctx context.Context, req *DeleteSsoTokenRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteSysUser(ctx context.Context, req *DeleteSysUserRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GenerateCaptchaHandler(ctx context.Context, req *GenerateCaptchaHandlerRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetInfo(ctx context.Context, req *GetInfoRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetLoginLog(ctx context.Context, req *GetLoginLogRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetRole(ctx context.Context, req *GetRoleRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetSsoApp(ctx context.Context, req *GetSsoAppRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetSsoAppList(ctx context.Context, req *GetSsoAppListRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetSsoToken(ctx context.Context, req *GetSsoTokenRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetSsoTokenList(ctx context.Context, req *GetSsoTokenListRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetSysUser(ctx context.Context, req *GetSysUserRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetSysUserInit(ctx context.Context, req *GetSysUserInitRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetSysUserProfile(ctx context.Context, req *GetSysUserProfileRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	InsertSsoApp(ctx context.Context, req *App, opts ...http.CallOption) (rsp *ApiReply, err error)
	InsertSsoToken(ctx context.Context, req *Token, opts ...http.CallOption) (rsp *ApiReply, err error)
	InsetSysUserAvatar(ctx context.Context, req *InsetSysUserAvatarRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListLoginLog(ctx context.Context, req *ListLoginLogRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListRole(ctx context.Context, req *ListRoleRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListSysUser(ctx context.Context, req *ListSysUserRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	Logout(ctx context.Context, req *LogoutReq, opts ...http.CallOption) (rsp *LogoutResp, err error)
	RefreshToken(ctx context.Context, req *RefreshTokenRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	SysUserUpdatePwd(ctx context.Context, req *SysUserUpdatePwdRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateLoginLog(ctx context.Context, req *LoginLog, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateRole(ctx context.Context, req *Role, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateSsoApp(ctx context.Context, req *App, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateSsoToken(ctx context.Context, req *Token, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateSysUser(ctx context.Context, req *SysUser, opts ...http.CallOption) (rsp *ApiReply, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) CreateLoginLog(ctx context.Context, in *LoginLog, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/loginlog"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sso.Admin/CreateLoginLog"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateRole(ctx context.Context, in *Role, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/role/{roleId}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sso.Admin/CreateRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateSysUser(ctx context.Context, in *SysUser, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/sysUser"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sso.Admin/CreateSysUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteLoginLog(ctx context.Context, in *DeleteLoginLogRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/loginlog"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Admin/DeleteLoginLog"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/role"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Admin/DeleteRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteSsoApp(ctx context.Context, in *DeleteSsoAppRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/ssoapps"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Admin/DeleteSsoApp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteSsoToken(ctx context.Context, in *DeleteSsoTokenRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/ssotokens"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Admin/DeleteSsoToken"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteSysUser(ctx context.Context, in *DeleteSysUserRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/sysUser"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Admin/DeleteSysUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GenerateCaptchaHandler(ctx context.Context, in *GenerateCaptchaHandlerRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/getCaptcha"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Admin/GenerateCaptchaHandler"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/getinfo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Admin/GetInfo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetLoginLog(ctx context.Context, in *GetLoginLogRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/loginlog/{infoId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Admin/GetLoginLog"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetRole(ctx context.Context, in *GetRoleRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/role/{roleId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Admin/GetRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetSsoApp(ctx context.Context, in *GetSsoAppRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/ssoapps/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Admin/GetSsoApp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetSsoAppList(ctx context.Context, in *GetSsoAppListRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/ssoappsList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Admin/GetSsoAppList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetSsoToken(ctx context.Context, in *GetSsoTokenRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/ssotokens/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Admin/GetSsoToken"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetSsoTokenList(ctx context.Context, in *GetSsoTokenListRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/ssotokensList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Admin/GetSsoTokenList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetSysUser(ctx context.Context, in *GetSysUserRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/sysUser/{userId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Admin/GetSysUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetSysUserInit(ctx context.Context, in *GetSysUserInitRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/sysUser"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Admin/GetSysUserInit"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetSysUserProfile(ctx context.Context, in *GetSysUserProfileRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/user/profile"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Admin/GetSysUserProfile"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) InsertSsoApp(ctx context.Context, in *App, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/ssoapps"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sso.Admin/InsertSsoApp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) InsertSsoToken(ctx context.Context, in *Token, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/ssotokens"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sso.Admin/InsertSsoToken"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) InsetSysUserAvatar(ctx context.Context, in *InsetSysUserAvatarRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/user/avatar"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sso.Admin/InsetSysUserAvatar"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListLoginLog(ctx context.Context, in *ListLoginLogRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/loginloglist"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Admin/ListLoginLog"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListRole(ctx context.Context, in *ListRoleRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/rolelist"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Admin/ListRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListSysUser(ctx context.Context, in *ListSysUserRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/sysUserList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Admin/ListSysUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sso.Admin/Login"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) Logout(ctx context.Context, in *LogoutReq, opts ...http.CallOption) (*LogoutResp, error) {
	var out LogoutResp
	pattern := "/admin/v1/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sso.Admin/Logout"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/refresh_token"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Admin/RefreshToken"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) SysUserUpdatePwd(ctx context.Context, in *SysUserUpdatePwdRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/user/pwd"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sso.Admin/SysUserUpdatePwd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateLoginLog(ctx context.Context, in *LoginLog, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/loginlog"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sso.Admin/UpdateLoginLog"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateRole(ctx context.Context, in *Role, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sso.Admin/UpdateRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateSsoApp(ctx context.Context, in *App, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/ssoapps"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sso.Admin/UpdateSsoApp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateSsoToken(ctx context.Context, in *Token, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/ssotokens"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sso.Admin/UpdateSsoToken"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateSysUser(ctx context.Context, in *SysUser, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/sysUser"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sso.Admin/UpdateSysUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

type ApiHTTPServer interface {
	GenerateCaptchaHandler(context.Context, *GenerateCaptchaHandlerRequest) (*GenerateCaptchaHandlerReply, error)
	GetSysUserProfile(context.Context, *GetSysUserProfileRequest) (*ApiReply, error)
	InsetSysUserAvatar(context.Context, *InsetSysUserAvatarRequest) (*ApiReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	LoginGoogle(context.Context, *LoginGoogleReq) (*LoginGoogleResp, error)
	Logout(context.Context, *LogoutReq) (*LogoutResp, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenReply, error)
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	SMSCode(context.Context, *SMSCodeReq) (*SMSCodeResp, error)
	SayHelloURL(context.Context, *HelloReq) (*HelloResp, error)
	SysUserUpdatePwd(context.Context, *SysUserUpdatePwdRequest) (*ApiReply, error)
}

func RegisterApiHTTPServer(s *http.Server, srv ApiHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/say_hello", _Api_SayHelloURL5_HTTP_Handler(srv))
	r.GET("/api/v1/getCaptcha", _Api_GenerateCaptchaHandler1_HTTP_Handler(srv))
	r.GET("/api/v1/sms", _Api_SMSCode0_HTTP_Handler(srv))
	r.POST("/api/v1/register", _Api_Register0_HTTP_Handler(srv))
	r.POST("/api/v1/login/google", _Api_LoginGoogle0_HTTP_Handler(srv))
	r.POST("/api/v1/login", _Api_Login1_HTTP_Handler(srv))
	r.GET("/api/v1/refresh_token", _Api_RefreshToken1_HTTP_Handler(srv))
	r.POST("/api/v1/logout", _Api_Logout1_HTTP_Handler(srv))
	r.POST("/api/v1/user/avatar", _Api_InsetSysUserAvatar1_HTTP_Handler(srv))
	r.PUT("/api/v1/user/pwd", _Api_SysUserUpdatePwd1_HTTP_Handler(srv))
	r.GET("/api/v1/user/profile", _Api_GetSysUserProfile1_HTTP_Handler(srv))
}

func _Api_SayHelloURL5_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Api/SayHelloURL")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHelloURL(ctx, req.(*HelloReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloResp)
		return ctx.Result(200, reply)
	}
}

func _Api_GenerateCaptchaHandler1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateCaptchaHandlerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Api/GenerateCaptchaHandler")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateCaptchaHandler(ctx, req.(*GenerateCaptchaHandlerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateCaptchaHandlerReply)
		return ctx.Result(200, reply)
	}
}

func _Api_SMSCode0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SMSCodeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Api/SMSCode")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SMSCode(ctx, req.(*SMSCodeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SMSCodeResp)
		return ctx.Result(200, reply)
	}
}

func _Api_Register0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Api/Register")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterResp)
		return ctx.Result(200, reply)
	}
}

func _Api_LoginGoogle0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginGoogleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Api/LoginGoogle")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginGoogle(ctx, req.(*LoginGoogleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginGoogleResp)
		return ctx.Result(200, reply)
	}
}

func _Api_Login1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Api/Login")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Api_RefreshToken1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RefreshTokenRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Api/RefreshToken")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RefreshToken(ctx, req.(*RefreshTokenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RefreshTokenReply)
		return ctx.Result(200, reply)
	}
}

func _Api_Logout1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Api/Logout")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutResp)
		return ctx.Result(200, reply)
	}
}

func _Api_InsetSysUserAvatar1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InsetSysUserAvatarRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Api/InsetSysUserAvatar")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InsetSysUserAvatar(ctx, req.(*InsetSysUserAvatarRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Api_SysUserUpdatePwd1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysUserUpdatePwdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Api/SysUserUpdatePwd")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SysUserUpdatePwd(ctx, req.(*SysUserUpdatePwdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetSysUserProfile1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSysUserProfileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Api/GetSysUserProfile")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysUserProfile(ctx, req.(*GetSysUserProfileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

type ApiHTTPClient interface {
	GenerateCaptchaHandler(ctx context.Context, req *GenerateCaptchaHandlerRequest, opts ...http.CallOption) (rsp *GenerateCaptchaHandlerReply, err error)
	GetSysUserProfile(ctx context.Context, req *GetSysUserProfileRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	InsetSysUserAvatar(ctx context.Context, req *InsetSysUserAvatarRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	LoginGoogle(ctx context.Context, req *LoginGoogleReq, opts ...http.CallOption) (rsp *LoginGoogleResp, err error)
	Logout(ctx context.Context, req *LogoutReq, opts ...http.CallOption) (rsp *LogoutResp, err error)
	RefreshToken(ctx context.Context, req *RefreshTokenRequest, opts ...http.CallOption) (rsp *RefreshTokenReply, err error)
	Register(ctx context.Context, req *RegisterReq, opts ...http.CallOption) (rsp *RegisterResp, err error)
	SMSCode(ctx context.Context, req *SMSCodeReq, opts ...http.CallOption) (rsp *SMSCodeResp, err error)
	SayHelloURL(ctx context.Context, req *HelloReq, opts ...http.CallOption) (rsp *HelloResp, err error)
	SysUserUpdatePwd(ctx context.Context, req *SysUserUpdatePwdRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
}

type ApiHTTPClientImpl struct {
	cc *http.Client
}

func NewApiHTTPClient(client *http.Client) ApiHTTPClient {
	return &ApiHTTPClientImpl{client}
}

func (c *ApiHTTPClientImpl) GenerateCaptchaHandler(ctx context.Context, in *GenerateCaptchaHandlerRequest, opts ...http.CallOption) (*GenerateCaptchaHandlerReply, error) {
	var out GenerateCaptchaHandlerReply
	pattern := "/api/v1/getCaptcha"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Api/GenerateCaptchaHandler"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetSysUserProfile(ctx context.Context, in *GetSysUserProfileRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/api/v1/user/profile"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Api/GetSysUserProfile"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) InsetSysUserAvatar(ctx context.Context, in *InsetSysUserAvatarRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/api/v1/user/avatar"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Api/InsetSysUserAvatar"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/api/v1/login"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Api/Login"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) LoginGoogle(ctx context.Context, in *LoginGoogleReq, opts ...http.CallOption) (*LoginGoogleResp, error) {
	var out LoginGoogleResp
	pattern := "/api/v1/login/google"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Api/LoginGoogle"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) Logout(ctx context.Context, in *LogoutReq, opts ...http.CallOption) (*LogoutResp, error) {
	var out LogoutResp
	pattern := "/api/v1/logout"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Api/Logout"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...http.CallOption) (*RefreshTokenReply, error) {
	var out RefreshTokenReply
	pattern := "/api/v1/refresh_token"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Api/RefreshToken"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) Register(ctx context.Context, in *RegisterReq, opts ...http.CallOption) (*RegisterResp, error) {
	var out RegisterResp
	pattern := "/api/v1/register"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Api/Register"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) SMSCode(ctx context.Context, in *SMSCodeReq, opts ...http.CallOption) (*SMSCodeResp, error) {
	var out SMSCodeResp
	pattern := "/api/v1/sms"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Api/SMSCode"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) SayHelloURL(ctx context.Context, in *HelloReq, opts ...http.CallOption) (*HelloResp, error) {
	var out HelloResp
	pattern := "/api/v1/say_hello"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Api/SayHelloURL"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) SysUserUpdatePwd(ctx context.Context, in *SysUserUpdatePwdRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/api/v1/user/pwd"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Api/SysUserUpdatePwd"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

type AuthHTTPServer interface {
	Authorize(context.Context, *AuthorizeReq) (*AuthorizeResp, error)
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	RefreshToken(context.Context, *RefreshTokenReq) (*RefreshTokenResp, error)
	Token(context.Context, *TokenReq) (*TokenResp, error)
}

func RegisterAuthHTTPServer(s *http.Server, srv AuthHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/authorize", _Auth_Authorize0_HTTP_Handler(srv))
	r.POST("/api/v1/token", _Auth_Token0_HTTP_Handler(srv))
	r.POST("/api/v1/token/refresh", _Auth_RefreshToken2_HTTP_Handler(srv))
	r.POST("/api/v1/user/info", _Auth_GetUserInfo0_HTTP_Handler(srv))
}

func _Auth_Authorize0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AuthorizeReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Auth/Authorize")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Authorize(ctx, req.(*AuthorizeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AuthorizeResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_Token0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TokenReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Auth/Token")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Token(ctx, req.(*TokenReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TokenResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_RefreshToken2_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RefreshTokenReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Auth/RefreshToken")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RefreshToken(ctx, req.(*RefreshTokenReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RefreshTokenResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_GetUserInfo0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserInfoReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sso.Auth/GetUserInfo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserInfo(ctx, req.(*GetUserInfoReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserInfoResp)
		return ctx.Result(200, reply)
	}
}

type AuthHTTPClient interface {
	Authorize(ctx context.Context, req *AuthorizeReq, opts ...http.CallOption) (rsp *AuthorizeResp, err error)
	GetUserInfo(ctx context.Context, req *GetUserInfoReq, opts ...http.CallOption) (rsp *GetUserInfoResp, err error)
	RefreshToken(ctx context.Context, req *RefreshTokenReq, opts ...http.CallOption) (rsp *RefreshTokenResp, err error)
	Token(ctx context.Context, req *TokenReq, opts ...http.CallOption) (rsp *TokenResp, err error)
}

type AuthHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthHTTPClient(client *http.Client) AuthHTTPClient {
	return &AuthHTTPClientImpl{client}
}

func (c *AuthHTTPClientImpl) Authorize(ctx context.Context, in *AuthorizeReq, opts ...http.CallOption) (*AuthorizeResp, error) {
	var out AuthorizeResp
	pattern := "/api/v1/authorize"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Auth/Authorize"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...http.CallOption) (*GetUserInfoResp, error) {
	var out GetUserInfoResp
	pattern := "/api/v1/user/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Auth/GetUserInfo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...http.CallOption) (*RefreshTokenResp, error) {
	var out RefreshTokenResp
	pattern := "/api/v1/token/refresh"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Auth/RefreshToken"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) Token(ctx context.Context, in *TokenReq, opts ...http.CallOption) (*TokenResp, error) {
	var out TokenResp
	pattern := "/api/v1/token"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sso.Auth/Token"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
