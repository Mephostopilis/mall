// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	GenerateCaptchaHandler(ctx context.Context, in *GenerateCaptchaHandlerRequest, opts ...grpc.CallOption) (*ApiReply, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*ApiReply, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*ApiReply, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
	GetSsoAppList(ctx context.Context, in *GetSsoAppListRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetSsoApp(ctx context.Context, in *GetSsoAppRequest, opts ...grpc.CallOption) (*ApiReply, error)
	InsertSsoApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateSsoApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteSsoApp(ctx context.Context, in *DeleteSsoAppRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetSsoTokenList(ctx context.Context, in *GetSsoTokenListRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetSsoToken(ctx context.Context, in *GetSsoTokenRequest, opts ...grpc.CallOption) (*ApiReply, error)
	InsertSsoToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateSsoToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteSsoToken(ctx context.Context, in *DeleteSsoTokenRequest, opts ...grpc.CallOption) (*ApiReply, error)
	CreateLoginLog(ctx context.Context, in *LoginLog, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateLoginLog(ctx context.Context, in *LoginLog, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteLoginLog(ctx context.Context, in *DeleteLoginLogRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetLoginLog(ctx context.Context, in *GetLoginLogRequest, opts ...grpc.CallOption) (*ApiReply, error)
	ListLoginLog(ctx context.Context, in *ListLoginLogRequest, opts ...grpc.CallOption) (*ApiReply, error)
	CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*ApiReply, error)
	ListRole(ctx context.Context, in *ListRoleRequest, opts ...grpc.CallOption) (*ApiReply, error)
	CreateSysUser(ctx context.Context, in *SysUser, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateSysUser(ctx context.Context, in *SysUser, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteSysUser(ctx context.Context, in *DeleteSysUserRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetSysUser(ctx context.Context, in *GetSysUserRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetSysUserInit(ctx context.Context, in *GetSysUserInitRequest, opts ...grpc.CallOption) (*ApiReply, error)
	ListSysUser(ctx context.Context, in *ListSysUserRequest, opts ...grpc.CallOption) (*ApiReply, error)
	InsetSysUserAvatar(ctx context.Context, in *InsetSysUserAvatarRequest, opts ...grpc.CallOption) (*ApiReply, error)
	SysUserUpdatePwd(ctx context.Context, in *SysUserUpdatePwdRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetSysUserProfile(ctx context.Context, in *GetSysUserProfileRequest, opts ...grpc.CallOption) (*ApiReply, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) GenerateCaptchaHandler(ctx context.Context, in *GenerateCaptchaHandlerRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/GenerateCaptchaHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	out := new(LogoutResp)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetSsoAppList(ctx context.Context, in *GetSsoAppListRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/GetSsoAppList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetSsoApp(ctx context.Context, in *GetSsoAppRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/GetSsoApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) InsertSsoApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/InsertSsoApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateSsoApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/UpdateSsoApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteSsoApp(ctx context.Context, in *DeleteSsoAppRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/DeleteSsoApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetSsoTokenList(ctx context.Context, in *GetSsoTokenListRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/GetSsoTokenList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetSsoToken(ctx context.Context, in *GetSsoTokenRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/GetSsoToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) InsertSsoToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/InsertSsoToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateSsoToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/UpdateSsoToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteSsoToken(ctx context.Context, in *DeleteSsoTokenRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/DeleteSsoToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateLoginLog(ctx context.Context, in *LoginLog, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/CreateLoginLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateLoginLog(ctx context.Context, in *LoginLog, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/UpdateLoginLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteLoginLog(ctx context.Context, in *DeleteLoginLogRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/DeleteLoginLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetLoginLog(ctx context.Context, in *GetLoginLogRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/GetLoginLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListLoginLog(ctx context.Context, in *ListLoginLogRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/ListLoginLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateRole(ctx context.Context, in *Role, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListRole(ctx context.Context, in *ListRoleRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/ListRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateSysUser(ctx context.Context, in *SysUser, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/CreateSysUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateSysUser(ctx context.Context, in *SysUser, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/UpdateSysUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteSysUser(ctx context.Context, in *DeleteSysUserRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/DeleteSysUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetSysUser(ctx context.Context, in *GetSysUserRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/GetSysUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetSysUserInit(ctx context.Context, in *GetSysUserInitRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/GetSysUserInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListSysUser(ctx context.Context, in *ListSysUserRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/ListSysUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) InsetSysUserAvatar(ctx context.Context, in *InsetSysUserAvatarRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/InsetSysUserAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SysUserUpdatePwd(ctx context.Context, in *SysUserUpdatePwdRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/SysUserUpdatePwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetSysUserProfile(ctx context.Context, in *GetSysUserProfileRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Admin/GetSysUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	GenerateCaptchaHandler(context.Context, *GenerateCaptchaHandlerRequest) (*ApiReply, error)
	Login(context.Context, *LoginRequest) (*ApiReply, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*ApiReply, error)
	GetInfo(context.Context, *GetInfoRequest) (*ApiReply, error)
	Logout(context.Context, *LogoutReq) (*LogoutResp, error)
	GetSsoAppList(context.Context, *GetSsoAppListRequest) (*ApiReply, error)
	GetSsoApp(context.Context, *GetSsoAppRequest) (*ApiReply, error)
	InsertSsoApp(context.Context, *App) (*ApiReply, error)
	UpdateSsoApp(context.Context, *App) (*ApiReply, error)
	DeleteSsoApp(context.Context, *DeleteSsoAppRequest) (*ApiReply, error)
	GetSsoTokenList(context.Context, *GetSsoTokenListRequest) (*ApiReply, error)
	GetSsoToken(context.Context, *GetSsoTokenRequest) (*ApiReply, error)
	InsertSsoToken(context.Context, *Token) (*ApiReply, error)
	UpdateSsoToken(context.Context, *Token) (*ApiReply, error)
	DeleteSsoToken(context.Context, *DeleteSsoTokenRequest) (*ApiReply, error)
	CreateLoginLog(context.Context, *LoginLog) (*ApiReply, error)
	UpdateLoginLog(context.Context, *LoginLog) (*ApiReply, error)
	DeleteLoginLog(context.Context, *DeleteLoginLogRequest) (*ApiReply, error)
	GetLoginLog(context.Context, *GetLoginLogRequest) (*ApiReply, error)
	ListLoginLog(context.Context, *ListLoginLogRequest) (*ApiReply, error)
	CreateRole(context.Context, *Role) (*ApiReply, error)
	UpdateRole(context.Context, *Role) (*ApiReply, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*ApiReply, error)
	GetRole(context.Context, *GetRoleRequest) (*ApiReply, error)
	ListRole(context.Context, *ListRoleRequest) (*ApiReply, error)
	CreateSysUser(context.Context, *SysUser) (*ApiReply, error)
	UpdateSysUser(context.Context, *SysUser) (*ApiReply, error)
	DeleteSysUser(context.Context, *DeleteSysUserRequest) (*ApiReply, error)
	GetSysUser(context.Context, *GetSysUserRequest) (*ApiReply, error)
	GetSysUserInit(context.Context, *GetSysUserInitRequest) (*ApiReply, error)
	ListSysUser(context.Context, *ListSysUserRequest) (*ApiReply, error)
	InsetSysUserAvatar(context.Context, *InsetSysUserAvatarRequest) (*ApiReply, error)
	SysUserUpdatePwd(context.Context, *SysUserUpdatePwdRequest) (*ApiReply, error)
	GetSysUserProfile(context.Context, *GetSysUserProfileRequest) (*ApiReply, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) GenerateCaptchaHandler(context.Context, *GenerateCaptchaHandlerRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCaptchaHandler not implemented")
}
func (UnimplementedAdminServer) Login(context.Context, *LoginRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAdminServer) RefreshToken(context.Context, *RefreshTokenRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAdminServer) GetInfo(context.Context, *GetInfoRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedAdminServer) Logout(context.Context, *LogoutReq) (*LogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAdminServer) GetSsoAppList(context.Context, *GetSsoAppListRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSsoAppList not implemented")
}
func (UnimplementedAdminServer) GetSsoApp(context.Context, *GetSsoAppRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSsoApp not implemented")
}
func (UnimplementedAdminServer) InsertSsoApp(context.Context, *App) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertSsoApp not implemented")
}
func (UnimplementedAdminServer) UpdateSsoApp(context.Context, *App) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSsoApp not implemented")
}
func (UnimplementedAdminServer) DeleteSsoApp(context.Context, *DeleteSsoAppRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSsoApp not implemented")
}
func (UnimplementedAdminServer) GetSsoTokenList(context.Context, *GetSsoTokenListRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSsoTokenList not implemented")
}
func (UnimplementedAdminServer) GetSsoToken(context.Context, *GetSsoTokenRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSsoToken not implemented")
}
func (UnimplementedAdminServer) InsertSsoToken(context.Context, *Token) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertSsoToken not implemented")
}
func (UnimplementedAdminServer) UpdateSsoToken(context.Context, *Token) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSsoToken not implemented")
}
func (UnimplementedAdminServer) DeleteSsoToken(context.Context, *DeleteSsoTokenRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSsoToken not implemented")
}
func (UnimplementedAdminServer) CreateLoginLog(context.Context, *LoginLog) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoginLog not implemented")
}
func (UnimplementedAdminServer) UpdateLoginLog(context.Context, *LoginLog) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoginLog not implemented")
}
func (UnimplementedAdminServer) DeleteLoginLog(context.Context, *DeleteLoginLogRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoginLog not implemented")
}
func (UnimplementedAdminServer) GetLoginLog(context.Context, *GetLoginLogRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginLog not implemented")
}
func (UnimplementedAdminServer) ListLoginLog(context.Context, *ListLoginLogRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoginLog not implemented")
}
func (UnimplementedAdminServer) CreateRole(context.Context, *Role) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedAdminServer) UpdateRole(context.Context, *Role) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedAdminServer) DeleteRole(context.Context, *DeleteRoleRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAdminServer) GetRole(context.Context, *GetRoleRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedAdminServer) ListRole(context.Context, *ListRoleRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRole not implemented")
}
func (UnimplementedAdminServer) CreateSysUser(context.Context, *SysUser) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSysUser not implemented")
}
func (UnimplementedAdminServer) UpdateSysUser(context.Context, *SysUser) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysUser not implemented")
}
func (UnimplementedAdminServer) DeleteSysUser(context.Context, *DeleteSysUserRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSysUser not implemented")
}
func (UnimplementedAdminServer) GetSysUser(context.Context, *GetSysUserRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysUser not implemented")
}
func (UnimplementedAdminServer) GetSysUserInit(context.Context, *GetSysUserInitRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysUserInit not implemented")
}
func (UnimplementedAdminServer) ListSysUser(context.Context, *ListSysUserRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSysUser not implemented")
}
func (UnimplementedAdminServer) InsetSysUserAvatar(context.Context, *InsetSysUserAvatarRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsetSysUserAvatar not implemented")
}
func (UnimplementedAdminServer) SysUserUpdatePwd(context.Context, *SysUserUpdatePwdRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserUpdatePwd not implemented")
}
func (UnimplementedAdminServer) GetSysUserProfile(context.Context, *GetSysUserProfileRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysUserProfile not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_GenerateCaptchaHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateCaptchaHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GenerateCaptchaHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/GenerateCaptchaHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GenerateCaptchaHandler(ctx, req.(*GenerateCaptchaHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetSsoAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSsoAppListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetSsoAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/GetSsoAppList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetSsoAppList(ctx, req.(*GetSsoAppListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetSsoApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSsoAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetSsoApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/GetSsoApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetSsoApp(ctx, req.(*GetSsoAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_InsertSsoApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).InsertSsoApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/InsertSsoApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).InsertSsoApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateSsoApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateSsoApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/UpdateSsoApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateSsoApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteSsoApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSsoAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteSsoApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/DeleteSsoApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteSsoApp(ctx, req.(*DeleteSsoAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetSsoTokenList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSsoTokenListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetSsoTokenList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/GetSsoTokenList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetSsoTokenList(ctx, req.(*GetSsoTokenListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetSsoToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSsoTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetSsoToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/GetSsoToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetSsoToken(ctx, req.(*GetSsoTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_InsertSsoToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).InsertSsoToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/InsertSsoToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).InsertSsoToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateSsoToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateSsoToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/UpdateSsoToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateSsoToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteSsoToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSsoTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteSsoToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/DeleteSsoToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteSsoToken(ctx, req.(*DeleteSsoTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateLoginLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateLoginLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/CreateLoginLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateLoginLog(ctx, req.(*LoginLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateLoginLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateLoginLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/UpdateLoginLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateLoginLog(ctx, req.(*LoginLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteLoginLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoginLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteLoginLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/DeleteLoginLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteLoginLog(ctx, req.(*DeleteLoginLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetLoginLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetLoginLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/GetLoginLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetLoginLog(ctx, req.(*GetLoginLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListLoginLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoginLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListLoginLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/ListLoginLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListLoginLog(ctx, req.(*ListLoginLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateRole(ctx, req.(*Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/ListRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListRole(ctx, req.(*ListRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/CreateSysUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateSysUser(ctx, req.(*SysUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/UpdateSysUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateSysUser(ctx, req.(*SysUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSysUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/DeleteSysUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteSysUser(ctx, req.(*DeleteSysUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/GetSysUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetSysUser(ctx, req.(*GetSysUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetSysUserInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysUserInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetSysUserInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/GetSysUserInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetSysUserInit(ctx, req.(*GetSysUserInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSysUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/ListSysUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListSysUser(ctx, req.(*ListSysUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_InsetSysUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsetSysUserAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).InsetSysUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/InsetSysUserAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).InsetSysUserAvatar(ctx, req.(*InsetSysUserAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SysUserUpdatePwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserUpdatePwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SysUserUpdatePwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/SysUserUpdatePwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SysUserUpdatePwd(ctx, req.(*SysUserUpdatePwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetSysUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetSysUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Admin/GetSysUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetSysUserProfile(ctx, req.(*GetSysUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.sso.v1.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateCaptchaHandler",
			Handler:    _Admin_GenerateCaptchaHandler_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Admin_Login_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Admin_RefreshToken_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _Admin_GetInfo_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Admin_Logout_Handler,
		},
		{
			MethodName: "GetSsoAppList",
			Handler:    _Admin_GetSsoAppList_Handler,
		},
		{
			MethodName: "GetSsoApp",
			Handler:    _Admin_GetSsoApp_Handler,
		},
		{
			MethodName: "InsertSsoApp",
			Handler:    _Admin_InsertSsoApp_Handler,
		},
		{
			MethodName: "UpdateSsoApp",
			Handler:    _Admin_UpdateSsoApp_Handler,
		},
		{
			MethodName: "DeleteSsoApp",
			Handler:    _Admin_DeleteSsoApp_Handler,
		},
		{
			MethodName: "GetSsoTokenList",
			Handler:    _Admin_GetSsoTokenList_Handler,
		},
		{
			MethodName: "GetSsoToken",
			Handler:    _Admin_GetSsoToken_Handler,
		},
		{
			MethodName: "InsertSsoToken",
			Handler:    _Admin_InsertSsoToken_Handler,
		},
		{
			MethodName: "UpdateSsoToken",
			Handler:    _Admin_UpdateSsoToken_Handler,
		},
		{
			MethodName: "DeleteSsoToken",
			Handler:    _Admin_DeleteSsoToken_Handler,
		},
		{
			MethodName: "CreateLoginLog",
			Handler:    _Admin_CreateLoginLog_Handler,
		},
		{
			MethodName: "UpdateLoginLog",
			Handler:    _Admin_UpdateLoginLog_Handler,
		},
		{
			MethodName: "DeleteLoginLog",
			Handler:    _Admin_DeleteLoginLog_Handler,
		},
		{
			MethodName: "GetLoginLog",
			Handler:    _Admin_GetLoginLog_Handler,
		},
		{
			MethodName: "ListLoginLog",
			Handler:    _Admin_ListLoginLog_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Admin_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Admin_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Admin_DeleteRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _Admin_GetRole_Handler,
		},
		{
			MethodName: "ListRole",
			Handler:    _Admin_ListRole_Handler,
		},
		{
			MethodName: "CreateSysUser",
			Handler:    _Admin_CreateSysUser_Handler,
		},
		{
			MethodName: "UpdateSysUser",
			Handler:    _Admin_UpdateSysUser_Handler,
		},
		{
			MethodName: "DeleteSysUser",
			Handler:    _Admin_DeleteSysUser_Handler,
		},
		{
			MethodName: "GetSysUser",
			Handler:    _Admin_GetSysUser_Handler,
		},
		{
			MethodName: "GetSysUserInit",
			Handler:    _Admin_GetSysUserInit_Handler,
		},
		{
			MethodName: "ListSysUser",
			Handler:    _Admin_ListSysUser_Handler,
		},
		{
			MethodName: "InsetSysUserAvatar",
			Handler:    _Admin_InsetSysUserAvatar_Handler,
		},
		{
			MethodName: "SysUserUpdatePwd",
			Handler:    _Admin_SysUserUpdatePwd_Handler,
		},
		{
			MethodName: "GetSysUserProfile",
			Handler:    _Admin_GetSysUserProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sso/v1/sso.proto",
}

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	// rpc Ping (.google.protobuf.Empty) returns (.google.protobuf.Empty);
	// rpc SayHello (HelloReq) returns (.google.protobuf.Empty);
	SayHelloURL(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error)
	GenerateCaptchaHandler(ctx context.Context, in *GenerateCaptchaHandlerRequest, opts ...grpc.CallOption) (*GenerateCaptchaHandlerReply, error)
	SMSCode(ctx context.Context, in *SMSCodeReq, opts ...grpc.CallOption) (*SMSCodeResp, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	LoginGoogle(ctx context.Context, in *LoginGoogleReq, opts ...grpc.CallOption) (*LoginGoogleResp, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenReply, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error)
	InsetSysUserAvatar(ctx context.Context, in *InsetSysUserAvatarRequest, opts ...grpc.CallOption) (*ApiReply, error)
	SysUserUpdatePwd(ctx context.Context, in *SysUserUpdatePwdRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetSysUserProfile(ctx context.Context, in *GetSysUserProfileRequest, opts ...grpc.CallOption) (*ApiReply, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) SayHelloURL(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error) {
	out := new(HelloResp)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Api/SayHelloURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GenerateCaptchaHandler(ctx context.Context, in *GenerateCaptchaHandlerRequest, opts ...grpc.CallOption) (*GenerateCaptchaHandlerReply, error) {
	out := new(GenerateCaptchaHandlerReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Api/GenerateCaptchaHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) SMSCode(ctx context.Context, in *SMSCodeReq, opts ...grpc.CallOption) (*SMSCodeResp, error) {
	out := new(SMSCodeResp)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Api/SMSCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Api/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) LoginGoogle(ctx context.Context, in *LoginGoogleReq, opts ...grpc.CallOption) (*LoginGoogleResp, error) {
	out := new(LoginGoogleResp)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Api/LoginGoogle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Api/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenReply, error) {
	out := new(RefreshTokenReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Api/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutResp, error) {
	out := new(LogoutResp)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Api/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) InsetSysUserAvatar(ctx context.Context, in *InsetSysUserAvatarRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Api/InsetSysUserAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) SysUserUpdatePwd(ctx context.Context, in *SysUserUpdatePwdRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Api/SysUserUpdatePwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetSysUserProfile(ctx context.Context, in *GetSysUserProfileRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Api/GetSysUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	// rpc Ping (.google.protobuf.Empty) returns (.google.protobuf.Empty);
	// rpc SayHello (HelloReq) returns (.google.protobuf.Empty);
	SayHelloURL(context.Context, *HelloReq) (*HelloResp, error)
	GenerateCaptchaHandler(context.Context, *GenerateCaptchaHandlerRequest) (*GenerateCaptchaHandlerReply, error)
	SMSCode(context.Context, *SMSCodeReq) (*SMSCodeResp, error)
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	LoginGoogle(context.Context, *LoginGoogleReq) (*LoginGoogleResp, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenReply, error)
	Logout(context.Context, *LogoutReq) (*LogoutResp, error)
	InsetSysUserAvatar(context.Context, *InsetSysUserAvatarRequest) (*ApiReply, error)
	SysUserUpdatePwd(context.Context, *SysUserUpdatePwdRequest) (*ApiReply, error)
	GetSysUserProfile(context.Context, *GetSysUserProfileRequest) (*ApiReply, error)
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) SayHelloURL(context.Context, *HelloReq) (*HelloResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloURL not implemented")
}
func (UnimplementedApiServer) GenerateCaptchaHandler(context.Context, *GenerateCaptchaHandlerRequest) (*GenerateCaptchaHandlerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCaptchaHandler not implemented")
}
func (UnimplementedApiServer) SMSCode(context.Context, *SMSCodeReq) (*SMSCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SMSCode not implemented")
}
func (UnimplementedApiServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedApiServer) LoginGoogle(context.Context, *LoginGoogleReq) (*LoginGoogleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginGoogle not implemented")
}
func (UnimplementedApiServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedApiServer) RefreshToken(context.Context, *RefreshTokenRequest) (*RefreshTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedApiServer) Logout(context.Context, *LogoutReq) (*LogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedApiServer) InsetSysUserAvatar(context.Context, *InsetSysUserAvatarRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsetSysUserAvatar not implemented")
}
func (UnimplementedApiServer) SysUserUpdatePwd(context.Context, *SysUserUpdatePwdRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserUpdatePwd not implemented")
}
func (UnimplementedApiServer) GetSysUserProfile(context.Context, *GetSysUserProfileRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysUserProfile not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_SayHelloURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).SayHelloURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Api/SayHelloURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).SayHelloURL(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GenerateCaptchaHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateCaptchaHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GenerateCaptchaHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Api/GenerateCaptchaHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GenerateCaptchaHandler(ctx, req.(*GenerateCaptchaHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_SMSCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMSCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).SMSCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Api/SMSCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).SMSCode(ctx, req.(*SMSCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Api/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_LoginGoogle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginGoogleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).LoginGoogle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Api/LoginGoogle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).LoginGoogle(ctx, req.(*LoginGoogleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Api/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Api/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Api/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_InsetSysUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsetSysUserAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).InsetSysUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Api/InsetSysUserAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).InsetSysUserAvatar(ctx, req.(*InsetSysUserAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_SysUserUpdatePwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserUpdatePwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).SysUserUpdatePwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Api/SysUserUpdatePwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).SysUserUpdatePwd(ctx, req.(*SysUserUpdatePwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetSysUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetSysUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Api/GetSysUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetSysUserProfile(ctx, req.(*GetSysUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.sso.v1.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHelloURL",
			Handler:    _Api_SayHelloURL_Handler,
		},
		{
			MethodName: "GenerateCaptchaHandler",
			Handler:    _Api_GenerateCaptchaHandler_Handler,
		},
		{
			MethodName: "SMSCode",
			Handler:    _Api_SMSCode_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Api_Register_Handler,
		},
		{
			MethodName: "LoginGoogle",
			Handler:    _Api_LoginGoogle_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Api_Login_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Api_RefreshToken_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Api_Logout_Handler,
		},
		{
			MethodName: "InsetSysUserAvatar",
			Handler:    _Api_InsetSysUserAvatar_Handler,
		},
		{
			MethodName: "SysUserUpdatePwd",
			Handler:    _Api_SysUserUpdatePwd_Handler,
		},
		{
			MethodName: "GetSysUserProfile",
			Handler:    _Api_GetSysUserProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sso/v1/sso.proto",
}

// SsoClient is the client API for Sso service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SsoClient interface {
	Introspect(ctx context.Context, in *IntrospectReq, opts ...grpc.CallOption) (*IntrospectResp, error)
}

type ssoClient struct {
	cc grpc.ClientConnInterface
}

func NewSsoClient(cc grpc.ClientConnInterface) SsoClient {
	return &ssoClient{cc}
}

func (c *ssoClient) Introspect(ctx context.Context, in *IntrospectReq, opts ...grpc.CallOption) (*IntrospectResp, error) {
	out := new(IntrospectResp)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Sso/Introspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SsoServer is the server API for Sso service.
// All implementations must embed UnimplementedSsoServer
// for forward compatibility
type SsoServer interface {
	Introspect(context.Context, *IntrospectReq) (*IntrospectResp, error)
	mustEmbedUnimplementedSsoServer()
}

// UnimplementedSsoServer must be embedded to have forward compatible implementations.
type UnimplementedSsoServer struct {
}

func (UnimplementedSsoServer) Introspect(context.Context, *IntrospectReq) (*IntrospectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Introspect not implemented")
}
func (UnimplementedSsoServer) mustEmbedUnimplementedSsoServer() {}

// UnsafeSsoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SsoServer will
// result in compilation errors.
type UnsafeSsoServer interface {
	mustEmbedUnimplementedSsoServer()
}

func RegisterSsoServer(s grpc.ServiceRegistrar, srv SsoServer) {
	s.RegisterService(&Sso_ServiceDesc, srv)
}

func _Sso_Introspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntrospectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SsoServer).Introspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Sso/Introspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SsoServer).Introspect(ctx, req.(*IntrospectReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Sso_ServiceDesc is the grpc.ServiceDesc for Sso service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sso_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.sso.v1.Sso",
	HandlerType: (*SsoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Introspect",
			Handler:    _Sso_Introspect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sso/v1/sso.proto",
}

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	Authorize(ctx context.Context, in *AuthorizeReq, opts ...grpc.CallOption) (*AuthorizeResp, error)
	Token(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*TokenResp, error)
	RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenResp, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Authorize(ctx context.Context, in *AuthorizeReq, opts ...grpc.CallOption) (*AuthorizeResp, error) {
	out := new(AuthorizeResp)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Auth/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Token(ctx context.Context, in *TokenReq, opts ...grpc.CallOption) (*TokenResp, error) {
	out := new(TokenResp)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Auth/Token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*RefreshTokenResp, error) {
	out := new(RefreshTokenResp)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Auth/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	out := new(GetUserInfoResp)
	err := c.cc.Invoke(ctx, "/api.sso.v1.Auth/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	Authorize(context.Context, *AuthorizeReq) (*AuthorizeResp, error)
	Token(context.Context, *TokenReq) (*TokenResp, error)
	RefreshToken(context.Context, *RefreshTokenReq) (*RefreshTokenResp, error)
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) Authorize(context.Context, *AuthorizeReq) (*AuthorizeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedAuthServer) Token(context.Context, *TokenReq) (*TokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}
func (UnimplementedAuthServer) RefreshToken(context.Context, *RefreshTokenReq) (*RefreshTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Auth/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Authorize(ctx, req.(*AuthorizeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Auth/Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Token(ctx, req.(*TokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Auth/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RefreshToken(ctx, req.(*RefreshTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sso.v1.Auth/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.sso.v1.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _Auth_Authorize_Handler,
		},
		{
			MethodName: "Token",
			Handler:    _Auth_Token_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Auth_RefreshToken_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Auth_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sso/v1/sso.proto",
}
