// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogicClient is the client API for Logic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogicClient interface {
	// Ping Service
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingReply, error)
	// Close Service
	Close(ctx context.Context, in *CloseReq, opts ...grpc.CallOption) (*CloseReply, error)
	// Connect
	Connect(ctx context.Context, in *ConnectReq, opts ...grpc.CallOption) (*ConnectReply, error)
	// Disconnect
	Disconnect(ctx context.Context, in *DisconnectReq, opts ...grpc.CallOption) (*DisconnectReply, error)
	// Heartbeat
	Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatReply, error)
	// RenewOnline
	RenewOnline(ctx context.Context, in *OnlineReq, opts ...grpc.CallOption) (*OnlineReply, error)
	// Receive
	Receive(ctx context.Context, in *ReceiveReq, opts ...grpc.CallOption) (*ReceiveReply, error)
	// ServerList
	Nodes(ctx context.Context, in *NodesReq, opts ...grpc.CallOption) (*NodesReply, error)
	PushKeys(ctx context.Context, in *PushKeysReq, opts ...grpc.CallOption) (*PushKeysReply, error)
	PushMids(ctx context.Context, in *PushMidsReq, opts ...grpc.CallOption) (*PushMidsReply, error)
	PushRoom(ctx context.Context, in *PushRoomReq, opts ...grpc.CallOption) (*PushRoomReply, error)
	PushAll(ctx context.Context, in *PushAllReq, opts ...grpc.CallOption) (*PushAllReply, error)
	NodesWeighted(ctx context.Context, in *NodesWeightedReq, opts ...grpc.CallOption) (*NodesWeightedReply, error)
	NodesInstances(ctx context.Context, in *NodesInstancesReq, opts ...grpc.CallOption) (*NodesInstancesReply, error)
	OnlineTop(ctx context.Context, in *OnlineTopReq, opts ...grpc.CallOption) (*OnlineTopReply, error)
	OnlineRoom(ctx context.Context, in *OnlineRoomReq, opts ...grpc.CallOption) (*OnlineRoomReply, error)
	OnlineTotal(ctx context.Context, in *OnlineTotalReq, opts ...grpc.CallOption) (*OnlineTotalReply, error)
}

type logicClient struct {
	cc grpc.ClientConnInterface
}

func NewLogicClient(cc grpc.ClientConnInterface) LogicClient {
	return &logicClient{cc}
}

func (c *logicClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/api.logic.grpc.Logic/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) Close(ctx context.Context, in *CloseReq, opts ...grpc.CallOption) (*CloseReply, error) {
	out := new(CloseReply)
	err := c.cc.Invoke(ctx, "/api.logic.grpc.Logic/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) Connect(ctx context.Context, in *ConnectReq, opts ...grpc.CallOption) (*ConnectReply, error) {
	out := new(ConnectReply)
	err := c.cc.Invoke(ctx, "/api.logic.grpc.Logic/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) Disconnect(ctx context.Context, in *DisconnectReq, opts ...grpc.CallOption) (*DisconnectReply, error) {
	out := new(DisconnectReply)
	err := c.cc.Invoke(ctx, "/api.logic.grpc.Logic/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) Heartbeat(ctx context.Context, in *HeartbeatReq, opts ...grpc.CallOption) (*HeartbeatReply, error) {
	out := new(HeartbeatReply)
	err := c.cc.Invoke(ctx, "/api.logic.grpc.Logic/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) RenewOnline(ctx context.Context, in *OnlineReq, opts ...grpc.CallOption) (*OnlineReply, error) {
	out := new(OnlineReply)
	err := c.cc.Invoke(ctx, "/api.logic.grpc.Logic/RenewOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) Receive(ctx context.Context, in *ReceiveReq, opts ...grpc.CallOption) (*ReceiveReply, error) {
	out := new(ReceiveReply)
	err := c.cc.Invoke(ctx, "/api.logic.grpc.Logic/Receive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) Nodes(ctx context.Context, in *NodesReq, opts ...grpc.CallOption) (*NodesReply, error) {
	out := new(NodesReply)
	err := c.cc.Invoke(ctx, "/api.logic.grpc.Logic/Nodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) PushKeys(ctx context.Context, in *PushKeysReq, opts ...grpc.CallOption) (*PushKeysReply, error) {
	out := new(PushKeysReply)
	err := c.cc.Invoke(ctx, "/api.logic.grpc.Logic/PushKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) PushMids(ctx context.Context, in *PushMidsReq, opts ...grpc.CallOption) (*PushMidsReply, error) {
	out := new(PushMidsReply)
	err := c.cc.Invoke(ctx, "/api.logic.grpc.Logic/PushMids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) PushRoom(ctx context.Context, in *PushRoomReq, opts ...grpc.CallOption) (*PushRoomReply, error) {
	out := new(PushRoomReply)
	err := c.cc.Invoke(ctx, "/api.logic.grpc.Logic/PushRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) PushAll(ctx context.Context, in *PushAllReq, opts ...grpc.CallOption) (*PushAllReply, error) {
	out := new(PushAllReply)
	err := c.cc.Invoke(ctx, "/api.logic.grpc.Logic/PushAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) NodesWeighted(ctx context.Context, in *NodesWeightedReq, opts ...grpc.CallOption) (*NodesWeightedReply, error) {
	out := new(NodesWeightedReply)
	err := c.cc.Invoke(ctx, "/api.logic.grpc.Logic/NodesWeighted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) NodesInstances(ctx context.Context, in *NodesInstancesReq, opts ...grpc.CallOption) (*NodesInstancesReply, error) {
	out := new(NodesInstancesReply)
	err := c.cc.Invoke(ctx, "/api.logic.grpc.Logic/NodesInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) OnlineTop(ctx context.Context, in *OnlineTopReq, opts ...grpc.CallOption) (*OnlineTopReply, error) {
	out := new(OnlineTopReply)
	err := c.cc.Invoke(ctx, "/api.logic.grpc.Logic/OnlineTop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) OnlineRoom(ctx context.Context, in *OnlineRoomReq, opts ...grpc.CallOption) (*OnlineRoomReply, error) {
	out := new(OnlineRoomReply)
	err := c.cc.Invoke(ctx, "/api.logic.grpc.Logic/OnlineRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) OnlineTotal(ctx context.Context, in *OnlineTotalReq, opts ...grpc.CallOption) (*OnlineTotalReply, error) {
	out := new(OnlineTotalReply)
	err := c.cc.Invoke(ctx, "/api.logic.grpc.Logic/OnlineTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogicServer is the server API for Logic service.
// All implementations must embed UnimplementedLogicServer
// for forward compatibility
type LogicServer interface {
	// Ping Service
	Ping(context.Context, *PingReq) (*PingReply, error)
	// Close Service
	Close(context.Context, *CloseReq) (*CloseReply, error)
	// Connect
	Connect(context.Context, *ConnectReq) (*ConnectReply, error)
	// Disconnect
	Disconnect(context.Context, *DisconnectReq) (*DisconnectReply, error)
	// Heartbeat
	Heartbeat(context.Context, *HeartbeatReq) (*HeartbeatReply, error)
	// RenewOnline
	RenewOnline(context.Context, *OnlineReq) (*OnlineReply, error)
	// Receive
	Receive(context.Context, *ReceiveReq) (*ReceiveReply, error)
	// ServerList
	Nodes(context.Context, *NodesReq) (*NodesReply, error)
	PushKeys(context.Context, *PushKeysReq) (*PushKeysReply, error)
	PushMids(context.Context, *PushMidsReq) (*PushMidsReply, error)
	PushRoom(context.Context, *PushRoomReq) (*PushRoomReply, error)
	PushAll(context.Context, *PushAllReq) (*PushAllReply, error)
	NodesWeighted(context.Context, *NodesWeightedReq) (*NodesWeightedReply, error)
	NodesInstances(context.Context, *NodesInstancesReq) (*NodesInstancesReply, error)
	OnlineTop(context.Context, *OnlineTopReq) (*OnlineTopReply, error)
	OnlineRoom(context.Context, *OnlineRoomReq) (*OnlineRoomReply, error)
	OnlineTotal(context.Context, *OnlineTotalReq) (*OnlineTotalReply, error)
	mustEmbedUnimplementedLogicServer()
}

// UnimplementedLogicServer must be embedded to have forward compatible implementations.
type UnimplementedLogicServer struct {
}

func (UnimplementedLogicServer) Ping(context.Context, *PingReq) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedLogicServer) Close(context.Context, *CloseReq) (*CloseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedLogicServer) Connect(context.Context, *ConnectReq) (*ConnectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedLogicServer) Disconnect(context.Context, *DisconnectReq) (*DisconnectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedLogicServer) Heartbeat(context.Context, *HeartbeatReq) (*HeartbeatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedLogicServer) RenewOnline(context.Context, *OnlineReq) (*OnlineReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewOnline not implemented")
}
func (UnimplementedLogicServer) Receive(context.Context, *ReceiveReq) (*ReceiveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedLogicServer) Nodes(context.Context, *NodesReq) (*NodesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nodes not implemented")
}
func (UnimplementedLogicServer) PushKeys(context.Context, *PushKeysReq) (*PushKeysReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushKeys not implemented")
}
func (UnimplementedLogicServer) PushMids(context.Context, *PushMidsReq) (*PushMidsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMids not implemented")
}
func (UnimplementedLogicServer) PushRoom(context.Context, *PushRoomReq) (*PushRoomReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushRoom not implemented")
}
func (UnimplementedLogicServer) PushAll(context.Context, *PushAllReq) (*PushAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushAll not implemented")
}
func (UnimplementedLogicServer) NodesWeighted(context.Context, *NodesWeightedReq) (*NodesWeightedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodesWeighted not implemented")
}
func (UnimplementedLogicServer) NodesInstances(context.Context, *NodesInstancesReq) (*NodesInstancesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodesInstances not implemented")
}
func (UnimplementedLogicServer) OnlineTop(context.Context, *OnlineTopReq) (*OnlineTopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineTop not implemented")
}
func (UnimplementedLogicServer) OnlineRoom(context.Context, *OnlineRoomReq) (*OnlineRoomReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineRoom not implemented")
}
func (UnimplementedLogicServer) OnlineTotal(context.Context, *OnlineTotalReq) (*OnlineTotalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineTotal not implemented")
}
func (UnimplementedLogicServer) mustEmbedUnimplementedLogicServer() {}

// UnsafeLogicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogicServer will
// result in compilation errors.
type UnsafeLogicServer interface {
	mustEmbedUnimplementedLogicServer()
}

func RegisterLogicServer(s grpc.ServiceRegistrar, srv LogicServer) {
	s.RegisterService(&Logic_ServiceDesc, srv)
}

func _Logic_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.grpc.Logic/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.grpc.Logic/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Close(ctx, req.(*CloseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.grpc.Logic/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Connect(ctx, req.(*ConnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.grpc.Logic/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Disconnect(ctx, req.(*DisconnectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.grpc.Logic/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Heartbeat(ctx, req.(*HeartbeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_RenewOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).RenewOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.grpc.Logic/RenewOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).RenewOnline(ctx, req.(*OnlineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.grpc.Logic/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Receive(ctx, req.(*ReceiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_Nodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Nodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.grpc.Logic/Nodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Nodes(ctx, req.(*NodesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_PushKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).PushKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.grpc.Logic/PushKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).PushKeys(ctx, req.(*PushKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_PushMids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushMidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).PushMids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.grpc.Logic/PushMids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).PushMids(ctx, req.(*PushMidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_PushRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).PushRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.grpc.Logic/PushRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).PushRoom(ctx, req.(*PushRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_PushAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).PushAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.grpc.Logic/PushAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).PushAll(ctx, req.(*PushAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_NodesWeighted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodesWeightedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).NodesWeighted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.grpc.Logic/NodesWeighted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).NodesWeighted(ctx, req.(*NodesWeightedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_NodesInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodesInstancesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).NodesInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.grpc.Logic/NodesInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).NodesInstances(ctx, req.(*NodesInstancesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_OnlineTop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineTopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).OnlineTop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.grpc.Logic/OnlineTop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).OnlineTop(ctx, req.(*OnlineTopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_OnlineRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).OnlineRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.grpc.Logic/OnlineRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).OnlineRoom(ctx, req.(*OnlineRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_OnlineTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineTotalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).OnlineTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.logic.grpc.Logic/OnlineTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).OnlineTotal(ctx, req.(*OnlineTotalReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Logic_ServiceDesc is the grpc.ServiceDesc for Logic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.logic.grpc.Logic",
	HandlerType: (*LogicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Logic_Ping_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Logic_Close_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _Logic_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Logic_Disconnect_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _Logic_Heartbeat_Handler,
		},
		{
			MethodName: "RenewOnline",
			Handler:    _Logic_RenewOnline_Handler,
		},
		{
			MethodName: "Receive",
			Handler:    _Logic_Receive_Handler,
		},
		{
			MethodName: "Nodes",
			Handler:    _Logic_Nodes_Handler,
		},
		{
			MethodName: "PushKeys",
			Handler:    _Logic_PushKeys_Handler,
		},
		{
			MethodName: "PushMids",
			Handler:    _Logic_PushMids_Handler,
		},
		{
			MethodName: "PushRoom",
			Handler:    _Logic_PushRoom_Handler,
		},
		{
			MethodName: "PushAll",
			Handler:    _Logic_PushAll_Handler,
		},
		{
			MethodName: "NodesWeighted",
			Handler:    _Logic_NodesWeighted_Handler,
		},
		{
			MethodName: "NodesInstances",
			Handler:    _Logic_NodesInstances_Handler,
		},
		{
			MethodName: "OnlineTop",
			Handler:    _Logic_OnlineTop_Handler,
		},
		{
			MethodName: "OnlineRoom",
			Handler:    _Logic_OnlineRoom_Handler,
		},
		{
			MethodName: "OnlineTotal",
			Handler:    _Logic_OnlineTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/logic/grpc/api.proto",
}
