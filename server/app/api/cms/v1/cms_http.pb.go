// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.0

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AdminHTTPServer interface {
	BatchGetHelp(context.Context, *BatchGetHelpRequest) (*ApiReply, error)
	CreateHelp(context.Context, *Help) (*ApiReply, error)
	CreateHelpCategory(context.Context, *HelpCategory) (*ApiReply, error)
	CreateSubject(context.Context, *Subject) (*ApiReply, error)
	CreateSubjectCategory(context.Context, *SubjectCategory) (*ApiReply, error)
	DeleteHelp(context.Context, *DeleteHelpRequest) (*ApiReply, error)
	DeleteHelpCategory(context.Context, *DeleteHelpCategoryRequest) (*ApiReply, error)
	DeleteSubject(context.Context, *DeleteSubjectRequest) (*ApiReply, error)
	DeleteSubjectCategory(context.Context, *DeleteSubjectCategoryRequest) (*ApiReply, error)
	GetHelp(context.Context, *GetHelpRequest) (*ApiReply, error)
	GetHelpCategory(context.Context, *GetHelpCategoryRequest) (*ApiReply, error)
	GetSubject(context.Context, *GetSubjectRequest) (*ApiReply, error)
	GetSubjectCategory(context.Context, *GetSubjectCategoryRequest) (*ApiReply, error)
	ListHelp(context.Context, *ListHelpRequest) (*ApiReply, error)
	ListHelpCategory(context.Context, *ListHelpCategoryRequest) (*ApiReply, error)
	ListSubject(context.Context, *ListSubjectRequest) (*ApiReply, error)
	ListSubjectCategory(context.Context, *ListSubjectCategoryRequest) (*ApiReply, error)
	UpdateHelp(context.Context, *Help) (*ApiReply, error)
	UpdateHelpCategory(context.Context, *HelpCategory) (*ApiReply, error)
	UpdateSubject(context.Context, *Subject) (*ApiReply, error)
	UpdateSubjectCategory(context.Context, *SubjectCategory) (*ApiReply, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/cmshelpList", _Admin_ListHelp0_HTTP_Handler(srv))
	r.GET("/admin/v1/cmshelp/batch", _Admin_BatchGetHelp0_HTTP_Handler(srv))
	r.GET("/admin/v1/cmshelp/{helpId}", _Admin_GetHelp0_HTTP_Handler(srv))
	r.POST("/admin/v1/cmshelp", _Admin_CreateHelp0_HTTP_Handler(srv))
	r.PUT("/admin/v1/cmshelp", _Admin_UpdateHelp0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/cmshelp/{ids}", _Admin_DeleteHelp0_HTTP_Handler(srv))
	r.GET("/admin/v1/cmshelpcategoryList", _Admin_ListHelpCategory0_HTTP_Handler(srv))
	r.GET("/admin/v1/cmshelpcategory/{id}", _Admin_GetHelpCategory0_HTTP_Handler(srv))
	r.POST("/admin/v1/cmshelpcategory", _Admin_CreateHelpCategory0_HTTP_Handler(srv))
	r.PUT("/admin/v1/cmshelpcategory", _Admin_UpdateHelpCategory0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/cmshelpcategory/{ids}", _Admin_DeleteHelpCategory0_HTTP_Handler(srv))
	r.GET("/admin/v1/cmssubjectList", _Admin_ListSubject0_HTTP_Handler(srv))
	r.GET("/admin/v1/cmssubject/{id}", _Admin_GetSubject0_HTTP_Handler(srv))
	r.POST("/admin/v1/cmssubject", _Admin_CreateSubject0_HTTP_Handler(srv))
	r.PUT("/admin/v1/cmssubject", _Admin_UpdateSubject0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/cmssubject/{ids}", _Admin_DeleteSubject0_HTTP_Handler(srv))
	r.GET("/admin/v1/cmssubjectList", _Admin_ListSubjectCategory0_HTTP_Handler(srv))
	r.GET("/admin/v1/cmssubject/{id}", _Admin_GetSubjectCategory0_HTTP_Handler(srv))
	r.POST("/admin/v1/cmssubject", _Admin_CreateSubjectCategory0_HTTP_Handler(srv))
	r.PUT("/admin/v1/cmssubject", _Admin_UpdateSubjectCategory0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/cmssubject/{ids}", _Admin_DeleteSubjectCategory0_HTTP_Handler(srv))
}

func _Admin_ListHelp0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListHelpRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/ListHelp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListHelp(ctx, req.(*ListHelpRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_BatchGetHelp0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchGetHelpRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/BatchGetHelp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchGetHelp(ctx, req.(*BatchGetHelpRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetHelp0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetHelpRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/GetHelp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHelp(ctx, req.(*GetHelpRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateHelp0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Help
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/CreateHelp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateHelp(ctx, req.(*Help))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateHelp0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Help
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/UpdateHelp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateHelp(ctx, req.(*Help))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteHelp0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteHelpRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/DeleteHelp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteHelp(ctx, req.(*DeleteHelpRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListHelpCategory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListHelpCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/ListHelpCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListHelpCategory(ctx, req.(*ListHelpCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetHelpCategory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetHelpCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/GetHelpCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHelpCategory(ctx, req.(*GetHelpCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateHelpCategory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelpCategory
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/CreateHelpCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateHelpCategory(ctx, req.(*HelpCategory))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateHelpCategory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelpCategory
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/UpdateHelpCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateHelpCategory(ctx, req.(*HelpCategory))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteHelpCategory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteHelpCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/DeleteHelpCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteHelpCategory(ctx, req.(*DeleteHelpCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListSubject0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSubjectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/ListSubject")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSubject(ctx, req.(*ListSubjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetSubject0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSubjectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/GetSubject")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSubject(ctx, req.(*GetSubjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateSubject0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Subject
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/CreateSubject")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSubject(ctx, req.(*Subject))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateSubject0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Subject
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/UpdateSubject")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSubject(ctx, req.(*Subject))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteSubject0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSubjectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/DeleteSubject")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSubject(ctx, req.(*DeleteSubjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListSubjectCategory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSubjectCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/ListSubjectCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSubjectCategory(ctx, req.(*ListSubjectCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetSubjectCategory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSubjectCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/GetSubjectCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSubjectCategory(ctx, req.(*GetSubjectCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateSubjectCategory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubjectCategory
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/CreateSubjectCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSubjectCategory(ctx, req.(*SubjectCategory))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateSubjectCategory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubjectCategory
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/UpdateSubjectCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSubjectCategory(ctx, req.(*SubjectCategory))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteSubjectCategory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSubjectCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Admin/DeleteSubjectCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSubjectCategory(ctx, req.(*DeleteSubjectCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	BatchGetHelp(ctx context.Context, req *BatchGetHelpRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	CreateHelp(ctx context.Context, req *Help, opts ...http.CallOption) (rsp *ApiReply, err error)
	CreateHelpCategory(ctx context.Context, req *HelpCategory, opts ...http.CallOption) (rsp *ApiReply, err error)
	CreateSubject(ctx context.Context, req *Subject, opts ...http.CallOption) (rsp *ApiReply, err error)
	CreateSubjectCategory(ctx context.Context, req *SubjectCategory, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteHelp(ctx context.Context, req *DeleteHelpRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteHelpCategory(ctx context.Context, req *DeleteHelpCategoryRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteSubject(ctx context.Context, req *DeleteSubjectRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteSubjectCategory(ctx context.Context, req *DeleteSubjectCategoryRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetHelp(ctx context.Context, req *GetHelpRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetHelpCategory(ctx context.Context, req *GetHelpCategoryRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetSubject(ctx context.Context, req *GetSubjectRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetSubjectCategory(ctx context.Context, req *GetSubjectCategoryRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListHelp(ctx context.Context, req *ListHelpRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListHelpCategory(ctx context.Context, req *ListHelpCategoryRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListSubject(ctx context.Context, req *ListSubjectRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListSubjectCategory(ctx context.Context, req *ListSubjectCategoryRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateHelp(ctx context.Context, req *Help, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateHelpCategory(ctx context.Context, req *HelpCategory, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateSubject(ctx context.Context, req *Subject, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateSubjectCategory(ctx context.Context, req *SubjectCategory, opts ...http.CallOption) (rsp *ApiReply, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) BatchGetHelp(ctx context.Context, in *BatchGetHelpRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmshelp/batch"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/BatchGetHelp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateHelp(ctx context.Context, in *Help, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmshelp"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/CreateHelp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateHelpCategory(ctx context.Context, in *HelpCategory, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmshelpcategory"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/CreateHelpCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateSubject(ctx context.Context, in *Subject, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmssubject"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/CreateSubject"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateSubjectCategory(ctx context.Context, in *SubjectCategory, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmssubject"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/CreateSubjectCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteHelp(ctx context.Context, in *DeleteHelpRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmshelp/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/DeleteHelp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteHelpCategory(ctx context.Context, in *DeleteHelpCategoryRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmshelpcategory/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/DeleteHelpCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteSubject(ctx context.Context, in *DeleteSubjectRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmssubject/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/DeleteSubject"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteSubjectCategory(ctx context.Context, in *DeleteSubjectCategoryRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmssubject/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/DeleteSubjectCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetHelp(ctx context.Context, in *GetHelpRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmshelp/{helpId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/GetHelp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetHelpCategory(ctx context.Context, in *GetHelpCategoryRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmshelpcategory/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/GetHelpCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetSubject(ctx context.Context, in *GetSubjectRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmssubject/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/GetSubject"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetSubjectCategory(ctx context.Context, in *GetSubjectCategoryRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmssubject/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/GetSubjectCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListHelp(ctx context.Context, in *ListHelpRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmshelpList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/ListHelp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListHelpCategory(ctx context.Context, in *ListHelpCategoryRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmshelpcategoryList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/ListHelpCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListSubject(ctx context.Context, in *ListSubjectRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmssubjectList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/ListSubject"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListSubjectCategory(ctx context.Context, in *ListSubjectCategoryRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmssubjectList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/ListSubjectCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateHelp(ctx context.Context, in *Help, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmshelp"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/UpdateHelp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateHelpCategory(ctx context.Context, in *HelpCategory, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmshelpcategory"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/UpdateHelpCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateSubject(ctx context.Context, in *Subject, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmssubject"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/UpdateSubject"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateSubjectCategory(ctx context.Context, in *SubjectCategory, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/cmssubject"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.cms.v1.Admin/UpdateSubjectCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

type ApiHTTPServer interface {
	GetHelp(context.Context, *GetHelpRequest) (*GetHelpReply, error)
	ListHelp(context.Context, *ListHelpRequest) (*ListHelpReply, error)
}

func RegisterApiHTTPServer(s *http.Server, srv ApiHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/cms/helpList", _Api_ListHelp1_HTTP_Handler(srv))
	r.GET("/api/v1/cms/help/{helpId}", _Api_GetHelp1_HTTP_Handler(srv))
}

func _Api_ListHelp1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListHelpRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Api/ListHelp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListHelp(ctx, req.(*ListHelpRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListHelpReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetHelp1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetHelpRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.cms.v1.Api/GetHelp")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHelp(ctx, req.(*GetHelpRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetHelpReply)
		return ctx.Result(200, reply)
	}
}

type ApiHTTPClient interface {
	GetHelp(ctx context.Context, req *GetHelpRequest, opts ...http.CallOption) (rsp *GetHelpReply, err error)
	ListHelp(ctx context.Context, req *ListHelpRequest, opts ...http.CallOption) (rsp *ListHelpReply, err error)
}

type ApiHTTPClientImpl struct {
	cc *http.Client
}

func NewApiHTTPClient(client *http.Client) ApiHTTPClient {
	return &ApiHTTPClientImpl{client}
}

func (c *ApiHTTPClientImpl) GetHelp(ctx context.Context, in *GetHelpRequest, opts ...http.CallOption) (*GetHelpReply, error) {
	var out GetHelpReply
	pattern := "/api/v1/cms/help/{helpId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.cms.v1.Api/GetHelp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListHelp(ctx context.Context, in *ListHelpRequest, opts ...http.CallOption) (*ListHelpReply, error) {
	var out ListHelpReply
	pattern := "/api/v1/cms/helpList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.cms.v1.Api/ListHelp"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
