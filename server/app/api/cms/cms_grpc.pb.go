// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	ListHelp(ctx context.Context, in *ListHelpRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetHelp(ctx context.Context, in *GetHelpRequest, opts ...grpc.CallOption) (*ApiReply, error)
	CreateHelp(ctx context.Context, in *Help, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateHelp(ctx context.Context, in *Help, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteHelp(ctx context.Context, in *DeleteHelpRequest, opts ...grpc.CallOption) (*ApiReply, error)
	ListHelpCategory(ctx context.Context, in *ListHelpCategoryRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetHelpCategory(ctx context.Context, in *GetHelpCategoryRequest, opts ...grpc.CallOption) (*ApiReply, error)
	CreateHelpCategory(ctx context.Context, in *HelpCategory, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateHelpCategory(ctx context.Context, in *HelpCategory, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteHelpCategory(ctx context.Context, in *DeleteHelpCategoryRequest, opts ...grpc.CallOption) (*ApiReply, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) ListHelp(ctx context.Context, in *ListHelpRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.cms.Admin/ListHelp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetHelp(ctx context.Context, in *GetHelpRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.cms.Admin/GetHelp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateHelp(ctx context.Context, in *Help, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.cms.Admin/CreateHelp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateHelp(ctx context.Context, in *Help, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.cms.Admin/UpdateHelp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteHelp(ctx context.Context, in *DeleteHelpRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.cms.Admin/DeleteHelp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListHelpCategory(ctx context.Context, in *ListHelpCategoryRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.cms.Admin/ListHelpCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetHelpCategory(ctx context.Context, in *GetHelpCategoryRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.cms.Admin/GetHelpCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateHelpCategory(ctx context.Context, in *HelpCategory, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.cms.Admin/CreateHelpCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateHelpCategory(ctx context.Context, in *HelpCategory, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.cms.Admin/UpdateHelpCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteHelpCategory(ctx context.Context, in *DeleteHelpCategoryRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.cms.Admin/DeleteHelpCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	ListHelp(context.Context, *ListHelpRequest) (*ApiReply, error)
	GetHelp(context.Context, *GetHelpRequest) (*ApiReply, error)
	CreateHelp(context.Context, *Help) (*ApiReply, error)
	UpdateHelp(context.Context, *Help) (*ApiReply, error)
	DeleteHelp(context.Context, *DeleteHelpRequest) (*ApiReply, error)
	ListHelpCategory(context.Context, *ListHelpCategoryRequest) (*ApiReply, error)
	GetHelpCategory(context.Context, *GetHelpCategoryRequest) (*ApiReply, error)
	CreateHelpCategory(context.Context, *HelpCategory) (*ApiReply, error)
	UpdateHelpCategory(context.Context, *HelpCategory) (*ApiReply, error)
	DeleteHelpCategory(context.Context, *DeleteHelpCategoryRequest) (*ApiReply, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) ListHelp(context.Context, *ListHelpRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHelp not implemented")
}
func (UnimplementedAdminServer) GetHelp(context.Context, *GetHelpRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHelp not implemented")
}
func (UnimplementedAdminServer) CreateHelp(context.Context, *Help) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHelp not implemented")
}
func (UnimplementedAdminServer) UpdateHelp(context.Context, *Help) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHelp not implemented")
}
func (UnimplementedAdminServer) DeleteHelp(context.Context, *DeleteHelpRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHelp not implemented")
}
func (UnimplementedAdminServer) ListHelpCategory(context.Context, *ListHelpCategoryRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHelpCategory not implemented")
}
func (UnimplementedAdminServer) GetHelpCategory(context.Context, *GetHelpCategoryRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHelpCategory not implemented")
}
func (UnimplementedAdminServer) CreateHelpCategory(context.Context, *HelpCategory) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHelpCategory not implemented")
}
func (UnimplementedAdminServer) UpdateHelpCategory(context.Context, *HelpCategory) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHelpCategory not implemented")
}
func (UnimplementedAdminServer) DeleteHelpCategory(context.Context, *DeleteHelpCategoryRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHelpCategory not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_ListHelp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHelpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListHelp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cms.Admin/ListHelp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListHelp(ctx, req.(*ListHelpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetHelp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHelpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetHelp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cms.Admin/GetHelp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetHelp(ctx, req.(*GetHelpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateHelp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Help)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateHelp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cms.Admin/CreateHelp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateHelp(ctx, req.(*Help))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateHelp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Help)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateHelp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cms.Admin/UpdateHelp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateHelp(ctx, req.(*Help))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteHelp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHelpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteHelp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cms.Admin/DeleteHelp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteHelp(ctx, req.(*DeleteHelpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListHelpCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHelpCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListHelpCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cms.Admin/ListHelpCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListHelpCategory(ctx, req.(*ListHelpCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetHelpCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHelpCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetHelpCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cms.Admin/GetHelpCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetHelpCategory(ctx, req.(*GetHelpCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateHelpCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelpCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateHelpCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cms.Admin/CreateHelpCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateHelpCategory(ctx, req.(*HelpCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateHelpCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelpCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateHelpCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cms.Admin/UpdateHelpCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateHelpCategory(ctx, req.(*HelpCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteHelpCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHelpCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteHelpCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cms.Admin/DeleteHelpCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteHelpCategory(ctx, req.(*DeleteHelpCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.cms.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHelp",
			Handler:    _Admin_ListHelp_Handler,
		},
		{
			MethodName: "GetHelp",
			Handler:    _Admin_GetHelp_Handler,
		},
		{
			MethodName: "CreateHelp",
			Handler:    _Admin_CreateHelp_Handler,
		},
		{
			MethodName: "UpdateHelp",
			Handler:    _Admin_UpdateHelp_Handler,
		},
		{
			MethodName: "DeleteHelp",
			Handler:    _Admin_DeleteHelp_Handler,
		},
		{
			MethodName: "ListHelpCategory",
			Handler:    _Admin_ListHelpCategory_Handler,
		},
		{
			MethodName: "GetHelpCategory",
			Handler:    _Admin_GetHelpCategory_Handler,
		},
		{
			MethodName: "CreateHelpCategory",
			Handler:    _Admin_CreateHelpCategory_Handler,
		},
		{
			MethodName: "UpdateHelpCategory",
			Handler:    _Admin_UpdateHelpCategory_Handler,
		},
		{
			MethodName: "DeleteHelpCategory",
			Handler:    _Admin_DeleteHelpCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/cms/cms.proto",
}

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	// rpc Ping (.google.protobuf.Empty) returns (.google.protobuf.Empty);
	// rpc SayHello (HelloReq) returns (.google.protobuf.Empty);
	SayHelloURL(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error)
	ListHelp(ctx context.Context, in *ListHelpRequest, opts ...grpc.CallOption) (*ListHelpReply, error)
	GetHelp(ctx context.Context, in *GetHelpRequest, opts ...grpc.CallOption) (*GetHelpReply, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) SayHelloURL(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error) {
	out := new(HelloResp)
	err := c.cc.Invoke(ctx, "/api.cms.Api/SayHelloURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ListHelp(ctx context.Context, in *ListHelpRequest, opts ...grpc.CallOption) (*ListHelpReply, error) {
	out := new(ListHelpReply)
	err := c.cc.Invoke(ctx, "/api.cms.Api/ListHelp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetHelp(ctx context.Context, in *GetHelpRequest, opts ...grpc.CallOption) (*GetHelpReply, error) {
	out := new(GetHelpReply)
	err := c.cc.Invoke(ctx, "/api.cms.Api/GetHelp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	// rpc Ping (.google.protobuf.Empty) returns (.google.protobuf.Empty);
	// rpc SayHello (HelloReq) returns (.google.protobuf.Empty);
	SayHelloURL(context.Context, *HelloReq) (*HelloResp, error)
	ListHelp(context.Context, *ListHelpRequest) (*ListHelpReply, error)
	GetHelp(context.Context, *GetHelpRequest) (*GetHelpReply, error)
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) SayHelloURL(context.Context, *HelloReq) (*HelloResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloURL not implemented")
}
func (UnimplementedApiServer) ListHelp(context.Context, *ListHelpRequest) (*ListHelpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHelp not implemented")
}
func (UnimplementedApiServer) GetHelp(context.Context, *GetHelpRequest) (*GetHelpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHelp not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_SayHelloURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).SayHelloURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cms.Api/SayHelloURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).SayHelloURL(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ListHelp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHelpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ListHelp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cms.Api/ListHelp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ListHelp(ctx, req.(*ListHelpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetHelp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHelpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetHelp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cms.Api/GetHelp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetHelp(ctx, req.(*GetHelpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.cms.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHelloURL",
			Handler:    _Api_SayHelloURL_Handler,
		},
		{
			MethodName: "ListHelp",
			Handler:    _Api_ListHelp_Handler,
		},
		{
			MethodName: "GetHelp",
			Handler:    _Api_GetHelp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/cms/cms.proto",
}
