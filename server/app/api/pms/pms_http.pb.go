// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.0

package pms

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AdminHTTPServer interface {
	CreateAlbum(context.Context, *Album) (*ApiReply, error)
	CreateBrand(context.Context, *Brand) (*ApiReply, error)
	CreateProduct(context.Context, *Product) (*ApiReply, error)
	CreateProductAttribute(context.Context, *ProductAttribute) (*ApiReply, error)
	CreateProductAttributeCategory(context.Context, *ProductAttributeCategory) (*ApiReply, error)
	CreateProductCategory(context.Context, *ProductCategory) (*ApiReply, error)
	DeleteAlbum(context.Context, *DeleteAlbumRequest) (*ApiReply, error)
	DeleteBrand(context.Context, *DeleteBrandRequest) (*ApiReply, error)
	DeleteProduct(context.Context, *DeleteProductRequest) (*ApiReply, error)
	DeleteProductAttribute(context.Context, *DeleteProductAttributeRequest) (*ApiReply, error)
	DeleteProductAttributeCategory(context.Context, *DeleteProductAttributeCategoryRequest) (*ApiReply, error)
	DeleteProductCategory(context.Context, *DeleteProductCategoryRequest) (*ApiReply, error)
	GetAlbum(context.Context, *GetAlbumRequest) (*ApiReply, error)
	GetBrand(context.Context, *GetBrandRequest) (*ApiReply, error)
	GetProduct(context.Context, *GetProductRequest) (*ApiReply, error)
	GetProductAttribute(context.Context, *GetProductAttributeRequest) (*ApiReply, error)
	GetProductAttributeCategory(context.Context, *GetProductAttributeCategoryRequest) (*ApiReply, error)
	GetProductCategory(context.Context, *GetProductCategoryRequest) (*ApiReply, error)
	ListAlbum(context.Context, *ListAlbumRequest) (*ApiReply, error)
	ListBrand(context.Context, *ListBrandRequest) (*ApiReply, error)
	ListProduct(context.Context, *ListProductRequest) (*ApiReply, error)
	ListProductAttribute(context.Context, *ListProductAttributeRequest) (*ApiReply, error)
	ListProductAttributeCategory(context.Context, *ListProductAttributeCategoryRequest) (*ApiReply, error)
	ListProductCategory(context.Context, *ListProductCategoryRequest) (*ApiReply, error)
	ListProductCategoryTree(context.Context, *ListProductCategoryTreeRequest) (*ApiReply, error)
	UpdateAlbum(context.Context, *Album) (*ApiReply, error)
	UpdateBrand(context.Context, *Brand) (*ApiReply, error)
	UpdateProduct(context.Context, *Product) (*ApiReply, error)
	UpdateProductAttribute(context.Context, *ProductAttribute) (*ApiReply, error)
	UpdateProductAttributeCategory(context.Context, *ProductAttributeCategory) (*ApiReply, error)
	UpdateProductCategory(context.Context, *ProductCategory) (*ApiReply, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/pmsalbumList", _Admin_ListAlbum0_HTTP_Handler(srv))
	r.GET("/admin/v1/pmsalbum/{id}", _Admin_GetAlbum0_HTTP_Handler(srv))
	r.POST("/admin/v1/pmsalbum", _Admin_CreateAlbum0_HTTP_Handler(srv))
	r.PUT("/admin/v1/pmsalbum", _Admin_UpdateAlbum0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/pmsalbum/{ids}", _Admin_DeleteAlbum0_HTTP_Handler(srv))
	r.GET("/admin/v1/pmsbrandList", _Admin_ListBrand0_HTTP_Handler(srv))
	r.GET("/admin/v1/pmsbrand/{id}", _Admin_GetBrand0_HTTP_Handler(srv))
	r.POST("/admin/v1/pmsbrand", _Admin_CreateBrand0_HTTP_Handler(srv))
	r.PUT("/admin/v1/pmsbrand", _Admin_UpdateBrand0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/pmsbrand/{ids}", _Admin_DeleteBrand0_HTTP_Handler(srv))
	r.GET("/admin/v1/pmsproductcategoryList", _Admin_ListProductCategory0_HTTP_Handler(srv))
	r.GET("/admin/v1/pmsproductcategorytreeList", _Admin_ListProductCategoryTree0_HTTP_Handler(srv))
	r.GET("/admin/v1/pmsproductcategory/{id}", _Admin_GetProductCategory0_HTTP_Handler(srv))
	r.POST("/admin/v1/pmsproductcategory", _Admin_CreateProductCategory0_HTTP_Handler(srv))
	r.PUT("/admin/v1/pmsproductcategory", _Admin_UpdateProductCategory0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/pmsproductcategory/{ids}", _Admin_DeleteProductCategory0_HTTP_Handler(srv))
	r.GET("/admin/v1/pmsproductList", _Admin_ListProduct0_HTTP_Handler(srv))
	r.GET("/admin/v1/pmsproduct/{id}", _Admin_GetProduct0_HTTP_Handler(srv))
	r.POST("/admin/v1/pmsproduct", _Admin_CreateProduct0_HTTP_Handler(srv))
	r.PUT("/admin/v1/pmsproduct", _Admin_UpdateProduct0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/pmsproduct/{ids}", _Admin_DeleteProduct0_HTTP_Handler(srv))
	r.GET("/admin/v1/pmsproductattributeList", _Admin_ListProductAttribute0_HTTP_Handler(srv))
	r.GET("/admin/v1/pmsproductattribute/{id}", _Admin_GetProductAttribute0_HTTP_Handler(srv))
	r.POST("/admin/v1/pmsproductattribute", _Admin_CreateProductAttribute0_HTTP_Handler(srv))
	r.PUT("/admin/v1/pmsproductattribute", _Admin_UpdateProductAttribute0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/pmsproductattribute/{ids}", _Admin_DeleteProductAttribute0_HTTP_Handler(srv))
	r.GET("/admin/v1/pmsproductattributecategoryList", _Admin_ListProductAttributeCategory0_HTTP_Handler(srv))
	r.GET("/admin/v1/pmsproductattributecategory/{id}", _Admin_GetProductAttributeCategory0_HTTP_Handler(srv))
	r.POST("/admin/v1/pmsproductattributecategory", _Admin_CreateProductAttributeCategory0_HTTP_Handler(srv))
	r.PUT("/admin/v1/pmsproductattributecategory", _Admin_UpdateProductAttributeCategory0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/pmsproductattributecategory/{ids}", _Admin_DeleteProductAttributeCategory0_HTTP_Handler(srv))
}

func _Admin_ListAlbum0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAlbumRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/ListAlbum")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAlbum(ctx, req.(*ListAlbumRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetAlbum0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAlbumRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/GetAlbum")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAlbum(ctx, req.(*GetAlbumRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateAlbum0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Album
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/CreateAlbum")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAlbum(ctx, req.(*Album))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateAlbum0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Album
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/UpdateAlbum")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAlbum(ctx, req.(*Album))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteAlbum0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAlbumRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/DeleteAlbum")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAlbum(ctx, req.(*DeleteAlbumRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListBrand0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBrandRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/ListBrand")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBrand(ctx, req.(*ListBrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetBrand0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBrandRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/GetBrand")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBrand(ctx, req.(*GetBrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateBrand0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Brand
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/CreateBrand")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBrand(ctx, req.(*Brand))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateBrand0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Brand
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/UpdateBrand")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBrand(ctx, req.(*Brand))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteBrand0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBrandRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/DeleteBrand")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBrand(ctx, req.(*DeleteBrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListProductCategory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProductCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/ListProductCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProductCategory(ctx, req.(*ListProductCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListProductCategoryTree0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProductCategoryTreeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/ListProductCategoryTree")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProductCategoryTree(ctx, req.(*ListProductCategoryTreeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetProductCategory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProductCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/GetProductCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProductCategory(ctx, req.(*GetProductCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateProductCategory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProductCategory
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/CreateProductCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateProductCategory(ctx, req.(*ProductCategory))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateProductCategory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProductCategory
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/UpdateProductCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateProductCategory(ctx, req.(*ProductCategory))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteProductCategory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteProductCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/DeleteProductCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteProductCategory(ctx, req.(*DeleteProductCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListProduct0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProductRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/ListProduct")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProduct(ctx, req.(*ListProductRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetProduct0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProductRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/GetProduct")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProduct(ctx, req.(*GetProductRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateProduct0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Product
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/CreateProduct")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateProduct(ctx, req.(*Product))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateProduct0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Product
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/UpdateProduct")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateProduct(ctx, req.(*Product))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteProduct0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteProductRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/DeleteProduct")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteProduct(ctx, req.(*DeleteProductRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListProductAttribute0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProductAttributeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/ListProductAttribute")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProductAttribute(ctx, req.(*ListProductAttributeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetProductAttribute0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProductAttributeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/GetProductAttribute")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProductAttribute(ctx, req.(*GetProductAttributeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateProductAttribute0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProductAttribute
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/CreateProductAttribute")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateProductAttribute(ctx, req.(*ProductAttribute))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateProductAttribute0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProductAttribute
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/UpdateProductAttribute")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateProductAttribute(ctx, req.(*ProductAttribute))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteProductAttribute0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteProductAttributeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/DeleteProductAttribute")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteProductAttribute(ctx, req.(*DeleteProductAttributeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListProductAttributeCategory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProductAttributeCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/ListProductAttributeCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProductAttributeCategory(ctx, req.(*ListProductAttributeCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetProductAttributeCategory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProductAttributeCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/GetProductAttributeCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProductAttributeCategory(ctx, req.(*GetProductAttributeCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateProductAttributeCategory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProductAttributeCategory
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/CreateProductAttributeCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateProductAttributeCategory(ctx, req.(*ProductAttributeCategory))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateProductAttributeCategory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ProductAttributeCategory
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/UpdateProductAttributeCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateProductAttributeCategory(ctx, req.(*ProductAttributeCategory))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteProductAttributeCategory0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteProductAttributeCategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Admin/DeleteProductAttributeCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteProductAttributeCategory(ctx, req.(*DeleteProductAttributeCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	CreateAlbum(ctx context.Context, req *Album, opts ...http.CallOption) (rsp *ApiReply, err error)
	CreateBrand(ctx context.Context, req *Brand, opts ...http.CallOption) (rsp *ApiReply, err error)
	CreateProduct(ctx context.Context, req *Product, opts ...http.CallOption) (rsp *ApiReply, err error)
	CreateProductAttribute(ctx context.Context, req *ProductAttribute, opts ...http.CallOption) (rsp *ApiReply, err error)
	CreateProductAttributeCategory(ctx context.Context, req *ProductAttributeCategory, opts ...http.CallOption) (rsp *ApiReply, err error)
	CreateProductCategory(ctx context.Context, req *ProductCategory, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteAlbum(ctx context.Context, req *DeleteAlbumRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteBrand(ctx context.Context, req *DeleteBrandRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteProduct(ctx context.Context, req *DeleteProductRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteProductAttribute(ctx context.Context, req *DeleteProductAttributeRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteProductAttributeCategory(ctx context.Context, req *DeleteProductAttributeCategoryRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteProductCategory(ctx context.Context, req *DeleteProductCategoryRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetAlbum(ctx context.Context, req *GetAlbumRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetBrand(ctx context.Context, req *GetBrandRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetProduct(ctx context.Context, req *GetProductRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetProductAttribute(ctx context.Context, req *GetProductAttributeRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetProductAttributeCategory(ctx context.Context, req *GetProductAttributeCategoryRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetProductCategory(ctx context.Context, req *GetProductCategoryRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListAlbum(ctx context.Context, req *ListAlbumRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListBrand(ctx context.Context, req *ListBrandRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListProduct(ctx context.Context, req *ListProductRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListProductAttribute(ctx context.Context, req *ListProductAttributeRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListProductAttributeCategory(ctx context.Context, req *ListProductAttributeCategoryRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListProductCategory(ctx context.Context, req *ListProductCategoryRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListProductCategoryTree(ctx context.Context, req *ListProductCategoryTreeRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateAlbum(ctx context.Context, req *Album, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateBrand(ctx context.Context, req *Brand, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateProduct(ctx context.Context, req *Product, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateProductAttribute(ctx context.Context, req *ProductAttribute, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateProductAttributeCategory(ctx context.Context, req *ProductAttributeCategory, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateProductCategory(ctx context.Context, req *ProductCategory, opts ...http.CallOption) (rsp *ApiReply, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) CreateAlbum(ctx context.Context, in *Album, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsalbum"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/CreateAlbum"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateBrand(ctx context.Context, in *Brand, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsbrand"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/CreateBrand"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateProduct(ctx context.Context, in *Product, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproduct"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/CreateProduct"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateProductAttribute(ctx context.Context, in *ProductAttribute, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproductattribute"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/CreateProductAttribute"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateProductAttributeCategory(ctx context.Context, in *ProductAttributeCategory, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproductattributecategory"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/CreateProductAttributeCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateProductCategory(ctx context.Context, in *ProductCategory, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproductcategory"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/CreateProductCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteAlbum(ctx context.Context, in *DeleteAlbumRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsalbum/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/DeleteAlbum"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteBrand(ctx context.Context, in *DeleteBrandRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsbrand/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/DeleteBrand"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteProduct(ctx context.Context, in *DeleteProductRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproduct/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/DeleteProduct"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteProductAttribute(ctx context.Context, in *DeleteProductAttributeRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproductattribute/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/DeleteProductAttribute"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteProductAttributeCategory(ctx context.Context, in *DeleteProductAttributeCategoryRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproductattributecategory/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/DeleteProductAttributeCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteProductCategory(ctx context.Context, in *DeleteProductCategoryRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproductcategory/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/DeleteProductCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetAlbum(ctx context.Context, in *GetAlbumRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsalbum/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/GetAlbum"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetBrand(ctx context.Context, in *GetBrandRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsbrand/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/GetBrand"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetProduct(ctx context.Context, in *GetProductRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproduct/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/GetProduct"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetProductAttribute(ctx context.Context, in *GetProductAttributeRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproductattribute/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/GetProductAttribute"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetProductAttributeCategory(ctx context.Context, in *GetProductAttributeCategoryRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproductattributecategory/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/GetProductAttributeCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetProductCategory(ctx context.Context, in *GetProductCategoryRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproductcategory/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/GetProductCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListAlbum(ctx context.Context, in *ListAlbumRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsalbumList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/ListAlbum"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListBrand(ctx context.Context, in *ListBrandRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsbrandList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/ListBrand"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListProduct(ctx context.Context, in *ListProductRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproductList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/ListProduct"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListProductAttribute(ctx context.Context, in *ListProductAttributeRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproductattributeList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/ListProductAttribute"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListProductAttributeCategory(ctx context.Context, in *ListProductAttributeCategoryRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproductattributecategoryList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/ListProductAttributeCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListProductCategory(ctx context.Context, in *ListProductCategoryRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproductcategoryList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/ListProductCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListProductCategoryTree(ctx context.Context, in *ListProductCategoryTreeRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproductcategorytreeList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/ListProductCategoryTree"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateAlbum(ctx context.Context, in *Album, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsalbum"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/UpdateAlbum"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateBrand(ctx context.Context, in *Brand, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsbrand"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/UpdateBrand"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateProduct(ctx context.Context, in *Product, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproduct"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/UpdateProduct"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateProductAttribute(ctx context.Context, in *ProductAttribute, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproductattribute"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/UpdateProductAttribute"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateProductAttributeCategory(ctx context.Context, in *ProductAttributeCategory, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproductattributecategory"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/UpdateProductAttributeCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateProductCategory(ctx context.Context, in *ProductCategory, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/pmsproductcategory"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Admin/UpdateProductCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

type ApiHTTPServer interface {
	GetAlbum(context.Context, *GetAlbumRequest) (*GetAlbumReply, error)
	ListAlbum(context.Context, *ListAlbumRequest) (*ListAlbumReply, error)
	SayHelloURL(context.Context, *HelloReq) (*HelloResp, error)
}

func RegisterApiHTTPServer(s *http.Server, srv ApiHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/cms/say_hello", _Api_SayHelloURL4_HTTP_Handler(srv))
	r.GET("/api/v1/cms/albumList", _Api_ListAlbum1_HTTP_Handler(srv))
	r.GET("/api/v1/cms/album/{id}", _Api_GetAlbum1_HTTP_Handler(srv))
}

func _Api_SayHelloURL4_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Api/SayHelloURL")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHelloURL(ctx, req.(*HelloReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloResp)
		return ctx.Result(200, reply)
	}
}

func _Api_ListAlbum1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAlbumRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Api/ListAlbum")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAlbum(ctx, req.(*ListAlbumRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAlbumReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetAlbum1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAlbumRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.pms.Api/GetAlbum")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAlbum(ctx, req.(*GetAlbumRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAlbumReply)
		return ctx.Result(200, reply)
	}
}

type ApiHTTPClient interface {
	GetAlbum(ctx context.Context, req *GetAlbumRequest, opts ...http.CallOption) (rsp *GetAlbumReply, err error)
	ListAlbum(ctx context.Context, req *ListAlbumRequest, opts ...http.CallOption) (rsp *ListAlbumReply, err error)
	SayHelloURL(ctx context.Context, req *HelloReq, opts ...http.CallOption) (rsp *HelloResp, err error)
}

type ApiHTTPClientImpl struct {
	cc *http.Client
}

func NewApiHTTPClient(client *http.Client) ApiHTTPClient {
	return &ApiHTTPClientImpl{client}
}

func (c *ApiHTTPClientImpl) GetAlbum(ctx context.Context, in *GetAlbumRequest, opts ...http.CallOption) (*GetAlbumReply, error) {
	var out GetAlbumReply
	pattern := "/api/v1/cms/album/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Api/GetAlbum"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) ListAlbum(ctx context.Context, in *ListAlbumRequest, opts ...http.CallOption) (*ListAlbumReply, error) {
	var out ListAlbumReply
	pattern := "/api/v1/cms/albumList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Api/ListAlbum"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) SayHelloURL(ctx context.Context, in *HelloReq, opts ...http.CallOption) (*HelloResp, error) {
	var out HelloResp
	pattern := "/api/v1/cms/say_hello"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.pms.Api/SayHelloURL"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
