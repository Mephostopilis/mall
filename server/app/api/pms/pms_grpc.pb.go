// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	ListAlbum(ctx context.Context, in *ListAlbumRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetAlbum(ctx context.Context, in *GetAlbumRequest, opts ...grpc.CallOption) (*ApiReply, error)
	CreateAlbum(ctx context.Context, in *Album, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateAlbum(ctx context.Context, in *Album, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteAlbum(ctx context.Context, in *DeleteAlbumRequest, opts ...grpc.CallOption) (*ApiReply, error)
	ListAlbumPic(ctx context.Context, in *ListAlbumPicRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetAlbumPic(ctx context.Context, in *GetAlbumPicRequest, opts ...grpc.CallOption) (*ApiReply, error)
	CreateAlbumPic(ctx context.Context, in *AlbumPic, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateAlbumPic(ctx context.Context, in *AlbumPic, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteAlbumPic(ctx context.Context, in *DeleteAlbumPicRequest, opts ...grpc.CallOption) (*ApiReply, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) ListAlbum(ctx context.Context, in *ListAlbumRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.pms.Admin/ListAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetAlbum(ctx context.Context, in *GetAlbumRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.pms.Admin/GetAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateAlbum(ctx context.Context, in *Album, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.pms.Admin/CreateAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateAlbum(ctx context.Context, in *Album, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.pms.Admin/UpdateAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteAlbum(ctx context.Context, in *DeleteAlbumRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.pms.Admin/DeleteAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListAlbumPic(ctx context.Context, in *ListAlbumPicRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.pms.Admin/ListAlbumPic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetAlbumPic(ctx context.Context, in *GetAlbumPicRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.pms.Admin/GetAlbumPic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateAlbumPic(ctx context.Context, in *AlbumPic, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.pms.Admin/CreateAlbumPic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateAlbumPic(ctx context.Context, in *AlbumPic, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.pms.Admin/UpdateAlbumPic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteAlbumPic(ctx context.Context, in *DeleteAlbumPicRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.pms.Admin/DeleteAlbumPic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	ListAlbum(context.Context, *ListAlbumRequest) (*ApiReply, error)
	GetAlbum(context.Context, *GetAlbumRequest) (*ApiReply, error)
	CreateAlbum(context.Context, *Album) (*ApiReply, error)
	UpdateAlbum(context.Context, *Album) (*ApiReply, error)
	DeleteAlbum(context.Context, *DeleteAlbumRequest) (*ApiReply, error)
	ListAlbumPic(context.Context, *ListAlbumPicRequest) (*ApiReply, error)
	GetAlbumPic(context.Context, *GetAlbumPicRequest) (*ApiReply, error)
	CreateAlbumPic(context.Context, *AlbumPic) (*ApiReply, error)
	UpdateAlbumPic(context.Context, *AlbumPic) (*ApiReply, error)
	DeleteAlbumPic(context.Context, *DeleteAlbumPicRequest) (*ApiReply, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) ListAlbum(context.Context, *ListAlbumRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlbum not implemented")
}
func (UnimplementedAdminServer) GetAlbum(context.Context, *GetAlbumRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbum not implemented")
}
func (UnimplementedAdminServer) CreateAlbum(context.Context, *Album) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlbum not implemented")
}
func (UnimplementedAdminServer) UpdateAlbum(context.Context, *Album) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlbum not implemented")
}
func (UnimplementedAdminServer) DeleteAlbum(context.Context, *DeleteAlbumRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlbum not implemented")
}
func (UnimplementedAdminServer) ListAlbumPic(context.Context, *ListAlbumPicRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlbumPic not implemented")
}
func (UnimplementedAdminServer) GetAlbumPic(context.Context, *GetAlbumPicRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumPic not implemented")
}
func (UnimplementedAdminServer) CreateAlbumPic(context.Context, *AlbumPic) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlbumPic not implemented")
}
func (UnimplementedAdminServer) UpdateAlbumPic(context.Context, *AlbumPic) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlbumPic not implemented")
}
func (UnimplementedAdminServer) DeleteAlbumPic(context.Context, *DeleteAlbumPicRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlbumPic not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_ListAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pms.Admin/ListAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListAlbum(ctx, req.(*ListAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pms.Admin/GetAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAlbum(ctx, req.(*GetAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Album)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pms.Admin/CreateAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateAlbum(ctx, req.(*Album))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Album)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pms.Admin/UpdateAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateAlbum(ctx, req.(*Album))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pms.Admin/DeleteAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteAlbum(ctx, req.(*DeleteAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListAlbumPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlbumPicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListAlbumPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pms.Admin/ListAlbumPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListAlbumPic(ctx, req.(*ListAlbumPicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetAlbumPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumPicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAlbumPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pms.Admin/GetAlbumPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAlbumPic(ctx, req.(*GetAlbumPicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateAlbumPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumPic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateAlbumPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pms.Admin/CreateAlbumPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateAlbumPic(ctx, req.(*AlbumPic))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateAlbumPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlbumPic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateAlbumPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pms.Admin/UpdateAlbumPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateAlbumPic(ctx, req.(*AlbumPic))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteAlbumPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlbumPicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteAlbumPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pms.Admin/DeleteAlbumPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteAlbumPic(ctx, req.(*DeleteAlbumPicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.pms.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAlbum",
			Handler:    _Admin_ListAlbum_Handler,
		},
		{
			MethodName: "GetAlbum",
			Handler:    _Admin_GetAlbum_Handler,
		},
		{
			MethodName: "CreateAlbum",
			Handler:    _Admin_CreateAlbum_Handler,
		},
		{
			MethodName: "UpdateAlbum",
			Handler:    _Admin_UpdateAlbum_Handler,
		},
		{
			MethodName: "DeleteAlbum",
			Handler:    _Admin_DeleteAlbum_Handler,
		},
		{
			MethodName: "ListAlbumPic",
			Handler:    _Admin_ListAlbumPic_Handler,
		},
		{
			MethodName: "GetAlbumPic",
			Handler:    _Admin_GetAlbumPic_Handler,
		},
		{
			MethodName: "CreateAlbumPic",
			Handler:    _Admin_CreateAlbumPic_Handler,
		},
		{
			MethodName: "UpdateAlbumPic",
			Handler:    _Admin_UpdateAlbumPic_Handler,
		},
		{
			MethodName: "DeleteAlbumPic",
			Handler:    _Admin_DeleteAlbumPic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pms/pms.proto",
}

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	// rpc Ping (.google.protobuf.Empty) returns (.google.protobuf.Empty);
	// rpc SayHello (HelloReq) returns (.google.protobuf.Empty);
	SayHelloURL(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error)
	ListAlbum(ctx context.Context, in *ListAlbumRequest, opts ...grpc.CallOption) (*ListAlbumReply, error)
	GetAlbum(ctx context.Context, in *GetAlbumRequest, opts ...grpc.CallOption) (*GetAlbumReply, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) SayHelloURL(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error) {
	out := new(HelloResp)
	err := c.cc.Invoke(ctx, "/api.pms.Api/SayHelloURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ListAlbum(ctx context.Context, in *ListAlbumRequest, opts ...grpc.CallOption) (*ListAlbumReply, error) {
	out := new(ListAlbumReply)
	err := c.cc.Invoke(ctx, "/api.pms.Api/ListAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetAlbum(ctx context.Context, in *GetAlbumRequest, opts ...grpc.CallOption) (*GetAlbumReply, error) {
	out := new(GetAlbumReply)
	err := c.cc.Invoke(ctx, "/api.pms.Api/GetAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	// rpc Ping (.google.protobuf.Empty) returns (.google.protobuf.Empty);
	// rpc SayHello (HelloReq) returns (.google.protobuf.Empty);
	SayHelloURL(context.Context, *HelloReq) (*HelloResp, error)
	ListAlbum(context.Context, *ListAlbumRequest) (*ListAlbumReply, error)
	GetAlbum(context.Context, *GetAlbumRequest) (*GetAlbumReply, error)
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) SayHelloURL(context.Context, *HelloReq) (*HelloResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloURL not implemented")
}
func (UnimplementedApiServer) ListAlbum(context.Context, *ListAlbumRequest) (*ListAlbumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlbum not implemented")
}
func (UnimplementedApiServer) GetAlbum(context.Context, *GetAlbumRequest) (*GetAlbumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbum not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_SayHelloURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).SayHelloURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pms.Api/SayHelloURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).SayHelloURL(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ListAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ListAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pms.Api/ListAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ListAlbum(ctx, req.(*ListAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.pms.Api/GetAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetAlbum(ctx, req.(*GetAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.pms.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHelloURL",
			Handler:    _Api_SayHelloURL_Handler,
		},
		{
			MethodName: "ListAlbum",
			Handler:    _Api_ListAlbum_Handler,
		},
		{
			MethodName: "GetAlbum",
			Handler:    _Api_GetAlbum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pms/pms.proto",
}
