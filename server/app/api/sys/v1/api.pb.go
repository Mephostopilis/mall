// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: api/sys/v1/api.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApiReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Reason    string       `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message   string       `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Ttl       int32        `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
	PageIndex int32        `protobuf:"varint,5,opt,name=pageIndex,proto3" json:"pageIndex,omitempty"`
	PageSize  int32        `protobuf:"varint,6,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	Count     int32        `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"` // total
	Data      []*anypb.Any `protobuf:"bytes,8,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ApiReply) Reset() {
	*x = ApiReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_sys_v1_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiReply) ProtoMessage() {}

func (x *ApiReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_sys_v1_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiReply.ProtoReflect.Descriptor instead.
func (*ApiReply) Descriptor() ([]byte, []int) {
	return file_api_sys_v1_api_proto_rawDescGZIP(), []int{0}
}

func (x *ApiReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ApiReply) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ApiReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApiReply) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *ApiReply) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *ApiReply) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ApiReply) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ApiReply) GetData() []*anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type SysColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnId     int32  `protobuf:"varint,1,opt,name=columnId,proto3" json:"columnId,omitempty"`
	TableId      int32  `protobuf:"varint,2,opt,name=tableId,proto3" json:"tableId,omitempty"`
	ColumnName   string `protobuf:"bytes,3,opt,name=columnName,proto3" json:"columnName,omitempty"`
	ColumnType   string `protobuf:"bytes,4,opt,name=columnType,proto3" json:"columnType,omitempty"`
	GoType       string `protobuf:"bytes,5,opt,name=goType,proto3" json:"goType,omitempty"`
	GoField      string `protobuf:"bytes,6,opt,name=goField,proto3" json:"goField,omitempty"`
	JsonField    string `protobuf:"bytes,7,opt,name=jsonField,proto3" json:"jsonField,omitempty"`
	IsPk         string `protobuf:"bytes,8,opt,name=isPk,proto3" json:"isPk,omitempty"`
	IsIncrement  string `protobuf:"bytes,9,opt,name=isIncrement,proto3" json:"isIncrement,omitempty"`
	IsRequired   string `protobuf:"bytes,10,opt,name=isRequired,proto3" json:"isRequired,omitempty"`
	IsInsert     string `protobuf:"bytes,11,opt,name=isInsert,proto3" json:"isInsert,omitempty"`
	IsEdit       string `protobuf:"bytes,12,opt,name=isEdit,proto3" json:"isEdit,omitempty"`
	IsList       string `protobuf:"bytes,13,opt,name=isList,proto3" json:"isList,omitempty"`
	IsQuery      string `protobuf:"bytes,14,opt,name=isQuery,proto3" json:"isQuery,omitempty"`
	QueryType    string `protobuf:"bytes,15,opt,name=queryType,proto3" json:"queryType,omitempty"`
	HtmlType     string `protobuf:"bytes,16,opt,name=htmlType,proto3" json:"htmlType,omitempty"`
	DictType     string `protobuf:"bytes,17,opt,name=dictType,proto3" json:"dictType,omitempty"`
	Sort         int32  `protobuf:"varint,18,opt,name=sort,proto3" json:"sort,omitempty"`
	List         string `protobuf:"bytes,19,opt,name=list,proto3" json:"list,omitempty"`
	Pk           bool   `protobuf:"varint,20,opt,name=pk,proto3" json:"pk,omitempty"`
	Required     bool   `protobuf:"varint,21,opt,name=required,proto3" json:"required,omitempty"`
	SuperColumn  bool   `protobuf:"varint,22,opt,name=superColumn,proto3" json:"superColumn,omitempty"`
	UsableColumn bool   `protobuf:"varint,23,opt,name=usableColumn,proto3" json:"usableColumn,omitempty"`
	Increment    bool   `protobuf:"varint,24,opt,name=increment,proto3" json:"increment,omitempty"`
	Insert       bool   `protobuf:"varint,25,opt,name=insert,proto3" json:"insert,omitempty"`
	Edit         bool   `protobuf:"varint,26,opt,name=edit,proto3" json:"edit,omitempty"`
	Query        bool   `protobuf:"varint,27,opt,name=query,proto3" json:"query,omitempty"`
	Remark       string `protobuf:"bytes,28,opt,name=remark,proto3" json:"remark,omitempty"`
	CreatedAt    string `protobuf:"bytes,29,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *SysColumn) Reset() {
	*x = SysColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_sys_v1_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysColumn) ProtoMessage() {}

func (x *SysColumn) ProtoReflect() protoreflect.Message {
	mi := &file_api_sys_v1_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysColumn.ProtoReflect.Descriptor instead.
func (*SysColumn) Descriptor() ([]byte, []int) {
	return file_api_sys_v1_api_proto_rawDescGZIP(), []int{1}
}

func (x *SysColumn) GetColumnId() int32 {
	if x != nil {
		return x.ColumnId
	}
	return 0
}

func (x *SysColumn) GetTableId() int32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *SysColumn) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *SysColumn) GetColumnType() string {
	if x != nil {
		return x.ColumnType
	}
	return ""
}

func (x *SysColumn) GetGoType() string {
	if x != nil {
		return x.GoType
	}
	return ""
}

func (x *SysColumn) GetGoField() string {
	if x != nil {
		return x.GoField
	}
	return ""
}

func (x *SysColumn) GetJsonField() string {
	if x != nil {
		return x.JsonField
	}
	return ""
}

func (x *SysColumn) GetIsPk() string {
	if x != nil {
		return x.IsPk
	}
	return ""
}

func (x *SysColumn) GetIsIncrement() string {
	if x != nil {
		return x.IsIncrement
	}
	return ""
}

func (x *SysColumn) GetIsRequired() string {
	if x != nil {
		return x.IsRequired
	}
	return ""
}

func (x *SysColumn) GetIsInsert() string {
	if x != nil {
		return x.IsInsert
	}
	return ""
}

func (x *SysColumn) GetIsEdit() string {
	if x != nil {
		return x.IsEdit
	}
	return ""
}

func (x *SysColumn) GetIsList() string {
	if x != nil {
		return x.IsList
	}
	return ""
}

func (x *SysColumn) GetIsQuery() string {
	if x != nil {
		return x.IsQuery
	}
	return ""
}

func (x *SysColumn) GetQueryType() string {
	if x != nil {
		return x.QueryType
	}
	return ""
}

func (x *SysColumn) GetHtmlType() string {
	if x != nil {
		return x.HtmlType
	}
	return ""
}

func (x *SysColumn) GetDictType() string {
	if x != nil {
		return x.DictType
	}
	return ""
}

func (x *SysColumn) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *SysColumn) GetList() string {
	if x != nil {
		return x.List
	}
	return ""
}

func (x *SysColumn) GetPk() bool {
	if x != nil {
		return x.Pk
	}
	return false
}

func (x *SysColumn) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *SysColumn) GetSuperColumn() bool {
	if x != nil {
		return x.SuperColumn
	}
	return false
}

func (x *SysColumn) GetUsableColumn() bool {
	if x != nil {
		return x.UsableColumn
	}
	return false
}

func (x *SysColumn) GetIncrement() bool {
	if x != nil {
		return x.Increment
	}
	return false
}

func (x *SysColumn) GetInsert() bool {
	if x != nil {
		return x.Insert
	}
	return false
}

func (x *SysColumn) GetEdit() bool {
	if x != nil {
		return x.Edit
	}
	return false
}

func (x *SysColumn) GetQuery() bool {
	if x != nil {
		return x.Query
	}
	return false
}

func (x *SysColumn) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SysColumn) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type SysTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId             int32        `protobuf:"varint,1,opt,name=tableId,proto3" json:"tableId,omitempty"`
	TableName           string       `protobuf:"bytes,2,opt,name=tableName,proto3" json:"tableName,omitempty"`
	TableComment        string       `protobuf:"bytes,3,opt,name=tableComment,proto3" json:"tableComment,omitempty"`
	ClassName           string       `protobuf:"bytes,4,opt,name=className,proto3" json:"className,omitempty"`
	TplCategory         string       `protobuf:"bytes,5,opt,name=tplCategory,proto3" json:"tplCategory,omitempty"`
	PackageName         string       `protobuf:"bytes,6,opt,name=packageName,proto3" json:"packageName,omitempty"`
	ModuleName          string       `protobuf:"bytes,7,opt,name=moduleName,proto3" json:"moduleName,omitempty"`
	BusinessName        string       `protobuf:"bytes,8,opt,name=businessName,proto3" json:"businessName,omitempty"`
	FunctionName        string       `protobuf:"bytes,9,opt,name=functionName,proto3" json:"functionName,omitempty"`
	FunctionAuthor      string       `protobuf:"bytes,10,opt,name=functionAuthor,proto3" json:"functionAuthor,omitempty"`
	PkColumn            string       `protobuf:"bytes,11,opt,name=pkColumn,proto3" json:"pkColumn,omitempty"`
	PkGoField           string       `protobuf:"bytes,12,opt,name=pkGoField,proto3" json:"pkGoField,omitempty"`
	PkJsonField         string       `protobuf:"bytes,13,opt,name=pkJsonField,proto3" json:"pkJsonField,omitempty"`
	Options             string       `protobuf:"bytes,14,opt,name=options,proto3" json:"options,omitempty"`
	TreeCode            string       `protobuf:"bytes,15,opt,name=treeCode,proto3" json:"treeCode,omitempty"`
	TreeParentCode      string       `protobuf:"bytes,16,opt,name=treeParentCode,proto3" json:"treeParentCode,omitempty"`
	TreeName            string       `protobuf:"bytes,17,opt,name=treeName,proto3" json:"treeName,omitempty"`
	Tree                bool         `protobuf:"varint,18,opt,name=tree,proto3" json:"tree,omitempty"`
	Crud                bool         `protobuf:"varint,19,opt,name=crud,proto3" json:"crud,omitempty"`
	Remark              string       `protobuf:"bytes,20,opt,name=remark,proto3" json:"remark,omitempty"`
	IsLogicalDelete     string       `protobuf:"bytes,21,opt,name=isLogicalDelete,proto3" json:"isLogicalDelete,omitempty"`
	LogicalDelete       bool         `protobuf:"varint,22,opt,name=logicalDelete,proto3" json:"logicalDelete,omitempty"`
	LogicalDeleteColumn string       `protobuf:"bytes,23,opt,name=logicalDeleteColumn,proto3" json:"logicalDeleteColumn,omitempty"`
	Columns             []*SysColumn `protobuf:"bytes,24,rep,name=columns,proto3" json:"columns,omitempty"`
	CreatedAt           string       `protobuf:"bytes,25,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *SysTable) Reset() {
	*x = SysTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_sys_v1_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTable) ProtoMessage() {}

func (x *SysTable) ProtoReflect() protoreflect.Message {
	mi := &file_api_sys_v1_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTable.ProtoReflect.Descriptor instead.
func (*SysTable) Descriptor() ([]byte, []int) {
	return file_api_sys_v1_api_proto_rawDescGZIP(), []int{2}
}

func (x *SysTable) GetTableId() int32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *SysTable) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *SysTable) GetTableComment() string {
	if x != nil {
		return x.TableComment
	}
	return ""
}

func (x *SysTable) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

func (x *SysTable) GetTplCategory() string {
	if x != nil {
		return x.TplCategory
	}
	return ""
}

func (x *SysTable) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *SysTable) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *SysTable) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *SysTable) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *SysTable) GetFunctionAuthor() string {
	if x != nil {
		return x.FunctionAuthor
	}
	return ""
}

func (x *SysTable) GetPkColumn() string {
	if x != nil {
		return x.PkColumn
	}
	return ""
}

func (x *SysTable) GetPkGoField() string {
	if x != nil {
		return x.PkGoField
	}
	return ""
}

func (x *SysTable) GetPkJsonField() string {
	if x != nil {
		return x.PkJsonField
	}
	return ""
}

func (x *SysTable) GetOptions() string {
	if x != nil {
		return x.Options
	}
	return ""
}

func (x *SysTable) GetTreeCode() string {
	if x != nil {
		return x.TreeCode
	}
	return ""
}

func (x *SysTable) GetTreeParentCode() string {
	if x != nil {
		return x.TreeParentCode
	}
	return ""
}

func (x *SysTable) GetTreeName() string {
	if x != nil {
		return x.TreeName
	}
	return ""
}

func (x *SysTable) GetTree() bool {
	if x != nil {
		return x.Tree
	}
	return false
}

func (x *SysTable) GetCrud() bool {
	if x != nil {
		return x.Crud
	}
	return false
}

func (x *SysTable) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *SysTable) GetIsLogicalDelete() string {
	if x != nil {
		return x.IsLogicalDelete
	}
	return ""
}

func (x *SysTable) GetLogicalDelete() bool {
	if x != nil {
		return x.LogicalDelete
	}
	return false
}

func (x *SysTable) GetLogicalDeleteColumn() string {
	if x != nil {
		return x.LogicalDeleteColumn
	}
	return ""
}

func (x *SysTable) GetColumns() []*SysColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *SysTable) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

var File_api_sys_v1_api_proto protoreflect.FileDescriptor

var file_api_sys_v1_api_proto_rawDesc = []byte{
	0x0a, 0x14, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x79, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x01,
	0x0a, 0x08, 0x41, 0x70, 0x69, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74,
	0x74, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x93, 0x06, 0x0a,
	0x09, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x6f, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x6f, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x50, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x73, 0x50, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x63,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x74,
	0x6d, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x74,
	0x6d, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x6b,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x70, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x65, 0x72, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x65, 0x64, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xbf, 0x06, 0x0a, 0x08, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x70, 0x6c,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x70, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6b, 0x47,
	0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6b,
	0x47, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6b, 0x4a, 0x73, 0x6f,
	0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6b,
	0x4a, 0x73, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x75, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x63, 0x72, 0x75, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x73,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x79, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x42, 0x23, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x11, 0x65, 0x64, 0x75, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x79, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_sys_v1_api_proto_rawDescOnce sync.Once
	file_api_sys_v1_api_proto_rawDescData = file_api_sys_v1_api_proto_rawDesc
)

func file_api_sys_v1_api_proto_rawDescGZIP() []byte {
	file_api_sys_v1_api_proto_rawDescOnce.Do(func() {
		file_api_sys_v1_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_sys_v1_api_proto_rawDescData)
	})
	return file_api_sys_v1_api_proto_rawDescData
}

var file_api_sys_v1_api_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_api_sys_v1_api_proto_goTypes = []interface{}{
	(*ApiReply)(nil),  // 0: api.sys.v1.ApiReply
	(*SysColumn)(nil), // 1: api.sys.v1.SysColumn
	(*SysTable)(nil),  // 2: api.sys.v1.SysTable
	(*anypb.Any)(nil), // 3: google.protobuf.Any
}
var file_api_sys_v1_api_proto_depIdxs = []int32{
	3, // 0: api.sys.v1.ApiReply.data:type_name -> google.protobuf.Any
	1, // 1: api.sys.v1.SysTable.columns:type_name -> api.sys.v1.SysColumn
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_api_sys_v1_api_proto_init() }
func file_api_sys_v1_api_proto_init() {
	if File_api_sys_v1_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_sys_v1_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_sys_v1_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_sys_v1_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_sys_v1_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_sys_v1_api_proto_goTypes,
		DependencyIndexes: file_api_sys_v1_api_proto_depIdxs,
		MessageInfos:      file_api_sys_v1_api_proto_msgTypes,
	}.Build()
	File_api_sys_v1_api_proto = out.File
	file_api_sys_v1_api_proto_rawDesc = nil
	file_api_sys_v1_api_proto_goTypes = nil
	file_api_sys_v1_api_proto_depIdxs = nil
}
