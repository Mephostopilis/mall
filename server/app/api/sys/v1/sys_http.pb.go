// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.0

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AdminHTTPServer interface {
	CreateConfig(context.Context, *SysConfig) (*ApiReply, error)
	CreateMenu(context.Context, *Menu) (*ApiReply, error)
	CreateOperLog(context.Context, *OperLog) (*ApiReply, error)
	CreateResource(context.Context, *SysConfig) (*ApiReply, error)
	CreateRoleMenu(context.Context, *Menu) (*ApiReply, error)
	CreateSetting(context.Context, *SysSetting) (*ApiReply, error)
	DeleteConfig(context.Context, *DeleteConfigRequest) (*ApiReply, error)
	DeleteDictData(context.Context, *DeleteDictDataRequest) (*ApiReply, error)
	DeleteDictType(context.Context, *DeleteDictTypeRequest) (*ApiReply, error)
	DeleteMenu(context.Context, *DeleteMenuRequest) (*ApiReply, error)
	DeleteOperLog(context.Context, *DeleteOperLogRequest) (*ApiReply, error)
	DeleteResource(context.Context, *DeleteConfigRequest) (*ApiReply, error)
	DeleteRoleMenu(context.Context, *DeleteRoleMenuRequest) (*ApiReply, error)
	DeleteSysTables(context.Context, *DeleteSysTablesRequest) (*ApiReply, error)
	GenCode(context.Context, *GenCodeRequest) (*ApiReply, error)
	GenMenuAndApi(context.Context, *GenMenuAndApiRequest) (*ApiReply, error)
	GetConfig(context.Context, *GetConfigRequest) (*ApiReply, error)
	GetConfigByConfigKey(context.Context, *GetConfigByConfigKeyRequest) (*ApiReply, error)
	GetDBColumnList(context.Context, *GetDBColumnListRequest) (*ApiReply, error)
	GetDBTableList(context.Context, *GetDBTableListRequest) (*ApiReply, error)
	GetDictData(context.Context, *GetDictDataRequest) (*ApiReply, error)
	GetDictDataList(context.Context, *GetDictDataListRequest) (*ApiReply, error)
	GetDictDataListByDictType(context.Context, *GetDictDataListByDictTypeRequest) (*ApiReply, error)
	GetDictType(context.Context, *GetDictTypeRequest) (*ApiReply, error)
	GetDictTypeList(context.Context, *GetDictTypeListRequest) (*ApiReply, error)
	GetDictTypeOptionSelect(context.Context, *GetDictTypeOptionSelectRequest) (*ApiReply, error)
	GetMenu(context.Context, *GetMenuRequest) (*ApiReply, error)
	GetMenuIDS(context.Context, *GetMenuIDSRequest) (*ApiReply, error)
	GetMenuRole(context.Context, *GetMenuRoleRequest) (*ApiReply, error)
	GetMenuTreeRoleselect(context.Context, *GetMenuTreeRoleselectRequest) (*ApiReply, error)
	GetMenuTreeelect(context.Context, *GetMenuTreeelectRequest) (*ApiReply, error)
	GetOperLog(context.Context, *GetOperLogRequest) (*ApiReply, error)
	GetResource(context.Context, *GetConfigRequest) (*ApiReply, error)
	GetRoleMenu(context.Context, *GetRoleMenuRequest) (*ApiReply, error)
	GetServerInfo(context.Context, *GetServerInfoRequest) (*ApiReply, error)
	GetSetting(context.Context, *GetSettingRequest) (*ApiReply, error)
	GetSysColumn(context.Context, *GetSysColumnRequest) (*ApiReply, error)
	GetSysTableList(context.Context, *GetSysTableListRequest) (*ApiReply, error)
	GetSysTables(context.Context, *GetSysTablesRequest) (*ApiReply, error)
	InsertDictData(context.Context, *DictData) (*ApiReply, error)
	InsertDictType(context.Context, *DictType) (*ApiReply, error)
	InsertSysTable(context.Context, *InsertSysTableRequest) (*ApiReply, error)
	ListConfig(context.Context, *ListConfigRequest) (*ApiReply, error)
	ListMenu(context.Context, *ListMenuRequest) (*ApiReply, error)
	ListOperLog(context.Context, *ListOperLogRequest) (*ApiReply, error)
	ListResource(context.Context, *ListResourceRequest) (*ApiReply, error)
	ListRoleMenu(context.Context, *ListRoleMenuRequest) (*ApiReply, error)
	Preview(context.Context, *PreviewRequest) (*ApiReply, error)
	UpdateConfig(context.Context, *SysConfig) (*ApiReply, error)
	UpdateDictData(context.Context, *DictData) (*ApiReply, error)
	UpdateDictType(context.Context, *DictType) (*ApiReply, error)
	UpdateMenu(context.Context, *Menu) (*ApiReply, error)
	UpdateOperLog(context.Context, *OperLog) (*ApiReply, error)
	UpdateResource(context.Context, *SysConfig) (*ApiReply, error)
	UpdateRoleMenu(context.Context, *Menu) (*ApiReply, error)
	UpdateSysColumn(context.Context, *SysColumn) (*ApiReply, error)
	UpdateSysTable(context.Context, *SysTable) (*ApiReply, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.POST("/admin/v1/resource", _Admin_CreateResource0_HTTP_Handler(srv))
	r.PUT("/admin/v1/resource/{configId}", _Admin_UpdateResource0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/resource/{ids}", _Admin_DeleteResource0_HTTP_Handler(srv))
	r.GET("/admin/v1/resource/{configId}", _Admin_GetResource0_HTTP_Handler(srv))
	r.GET("/admin/v1/resourceList", _Admin_ListResource0_HTTP_Handler(srv))
	r.POST("/admin/v1/config", _Admin_CreateConfig0_HTTP_Handler(srv))
	r.PUT("/admin/v1/config/{configId}", _Admin_UpdateConfig0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/config/{ids}", _Admin_DeleteConfig0_HTTP_Handler(srv))
	r.GET("/admin/v1/config/{configId}", _Admin_GetConfig0_HTTP_Handler(srv))
	r.GET("/admin/v1/configKey/{configKey}", _Admin_GetConfigByConfigKey0_HTTP_Handler(srv))
	r.GET("/admin/v1/configList", _Admin_ListConfig0_HTTP_Handler(srv))
	r.POST("/admin/v1/menu", _Admin_CreateMenu0_HTTP_Handler(srv))
	r.PUT("/admin/v1/menu", _Admin_UpdateMenu0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/menu/{id}", _Admin_DeleteMenu0_HTTP_Handler(srv))
	r.GET("/admin/v1/menu/{id}", _Admin_GetMenu0_HTTP_Handler(srv))
	r.GET("/admin/v1/roleMenuTreeselect/{roleId}", _Admin_GetMenuTreeRoleselect0_HTTP_Handler(srv))
	r.GET("/admin/v1/menuTreeselect", _Admin_GetMenuTreeelect0_HTTP_Handler(srv))
	r.GET("/admin/v1/menulist", _Admin_ListMenu0_HTTP_Handler(srv))
	r.GET("/admin/v1/menurole", _Admin_GetMenuRole0_HTTP_Handler(srv))
	r.GET("/admin/v1/menuids", _Admin_GetMenuIDS0_HTTP_Handler(srv))
	r.POST("/admin/v1/operlog", _Admin_CreateOperLog0_HTTP_Handler(srv))
	r.PUT("/admin/v1/operlog", _Admin_UpdateOperLog0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/operlog", _Admin_DeleteOperLog0_HTTP_Handler(srv))
	r.GET("/admin/v1/operlog/{operId}", _Admin_GetOperLog0_HTTP_Handler(srv))
	r.GET("/admin/v1/operloglist", _Admin_ListOperLog0_HTTP_Handler(srv))
	r.POST("/admin/v1/rolemenu", _Admin_CreateRoleMenu0_HTTP_Handler(srv))
	r.PUT("/admin/v1/rolemenu", _Admin_UpdateRoleMenu0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/rolemenu", _Admin_DeleteRoleMenu0_HTTP_Handler(srv))
	r.GET("/admin/v1/rolemenu", _Admin_GetRoleMenu0_HTTP_Handler(srv))
	r.GET("/admin/v1/rolemenulist", _Admin_ListRoleMenu0_HTTP_Handler(srv))
	r.GET("/admin/v1/public/setting", _Admin_GetSetting0_HTTP_Handler(srv))
	r.POST("/admin/v1/setting", _Admin_CreateSetting0_HTTP_Handler(srv))
	r.GET("/admin/v1/dict/datalist", _Admin_GetDictDataList0_HTTP_Handler(srv))
	r.GET("/admin/v1/dict/databytype/{dictType}", _Admin_GetDictDataListByDictType0_HTTP_Handler(srv))
	r.GET("/admin/v1/dict/data/{dictCode}", _Admin_GetDictData0_HTTP_Handler(srv))
	r.POST("/admin/v1/dict/data", _Admin_InsertDictData0_HTTP_Handler(srv))
	r.PUT("/admin/v1/dict/data", _Admin_UpdateDictData0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/dict/data/{ids}", _Admin_DeleteDictData0_HTTP_Handler(srv))
	r.GET("/admin/v1/dict/typelist", _Admin_GetDictTypeList0_HTTP_Handler(srv))
	r.GET("/admin/v1/dict/type/{dictId}", _Admin_GetDictType0_HTTP_Handler(srv))
	r.GET("/admin/v1/dict/typeoptionselect", _Admin_GetDictTypeOptionSelect0_HTTP_Handler(srv))
	r.POST("/admin/v1/dict/type", _Admin_InsertDictType0_HTTP_Handler(srv))
	r.PUT("/admin/v1/dict/type", _Admin_UpdateDictType0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/dict/type/{ids}", _Admin_DeleteDictType0_HTTP_Handler(srv))
	r.GET("/admin/v1/tools/serverInfo", _Admin_GetServerInfo0_HTTP_Handler(srv))
	r.GET("/admin/v1/tools/sys/tables/page", _Admin_GetSysTableList0_HTTP_Handler(srv))
	r.GET("/admin/v1/tools/sys/tables/info/{tableId}", _Admin_GetSysTables0_HTTP_Handler(srv))
	r.POST("/admin/v1/tools/sys/tables/info", _Admin_InsertSysTable0_HTTP_Handler(srv))
	r.PUT("/admin/v1/tools/sys/tables/info", _Admin_UpdateSysTable0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/tools/sys/tables/info/{ids}", _Admin_DeleteSysTables0_HTTP_Handler(srv))
	r.GET("/admin/v1/tools/sys/column/info/{tableId}", _Admin_GetSysColumn0_HTTP_Handler(srv))
	r.PUT("/admin/v1/tools/sys/column/info", _Admin_UpdateSysColumn0_HTTP_Handler(srv))
	r.GET("/admin/v1/tools/db/tables/page", _Admin_GetDBTableList0_HTTP_Handler(srv))
	r.GET("/admin/v1/tools/db/columns/page", _Admin_GetDBColumnList0_HTTP_Handler(srv))
	r.GET("/admin/v1/tools/gen/preview/{tableId}", _Admin_Preview0_HTTP_Handler(srv))
	r.GET("/admin/v1/tools/gen/toproject/{tableId}", _Admin_GenCode0_HTTP_Handler(srv))
	r.GET("/admin/v1/tools/gen/todb/{tableId}", _Admin_GenMenuAndApi0_HTTP_Handler(srv))
}

func _Admin_CreateResource0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysConfig
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/CreateResource")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateResource(ctx, req.(*SysConfig))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateResource0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysConfig
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/UpdateResource")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateResource(ctx, req.(*SysConfig))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteResource0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteConfigRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/DeleteResource")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteResource(ctx, req.(*DeleteConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetResource0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetConfigRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetResource")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetResource(ctx, req.(*GetConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListResource0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/ListResource")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListResource(ctx, req.(*ListResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateConfig0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysConfig
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/CreateConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateConfig(ctx, req.(*SysConfig))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateConfig0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysConfig
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/UpdateConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateConfig(ctx, req.(*SysConfig))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteConfig0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteConfigRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/DeleteConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteConfig(ctx, req.(*DeleteConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetConfig0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetConfigRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConfig(ctx, req.(*GetConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetConfigByConfigKey0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetConfigByConfigKeyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetConfigByConfigKey")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConfigByConfigKey(ctx, req.(*GetConfigByConfigKeyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListConfig0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListConfigRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/ListConfig")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListConfig(ctx, req.(*ListConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateMenu0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Menu
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/CreateMenu")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMenu(ctx, req.(*Menu))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateMenu0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Menu
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/UpdateMenu")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMenu(ctx, req.(*Menu))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteMenu0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteMenuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/DeleteMenu")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMenu(ctx, req.(*DeleteMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetMenu0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMenuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetMenu")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMenu(ctx, req.(*GetMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetMenuTreeRoleselect0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMenuTreeRoleselectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetMenuTreeRoleselect")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMenuTreeRoleselect(ctx, req.(*GetMenuTreeRoleselectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetMenuTreeelect0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMenuTreeelectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetMenuTreeelect")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMenuTreeelect(ctx, req.(*GetMenuTreeelectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListMenu0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMenuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/ListMenu")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMenu(ctx, req.(*ListMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetMenuRole0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMenuRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetMenuRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMenuRole(ctx, req.(*GetMenuRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetMenuIDS0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMenuIDSRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetMenuIDS")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMenuIDS(ctx, req.(*GetMenuIDSRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateOperLog0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OperLog
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/CreateOperLog")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOperLog(ctx, req.(*OperLog))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateOperLog0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OperLog
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/UpdateOperLog")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOperLog(ctx, req.(*OperLog))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteOperLog0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOperLogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/DeleteOperLog")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOperLog(ctx, req.(*DeleteOperLogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetOperLog0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOperLogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetOperLog")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOperLog(ctx, req.(*GetOperLogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListOperLog0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOperLogRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/ListOperLog")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOperLog(ctx, req.(*ListOperLogRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateRoleMenu0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Menu
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/CreateRoleMenu")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRoleMenu(ctx, req.(*Menu))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateRoleMenu0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Menu
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/UpdateRoleMenu")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRoleMenu(ctx, req.(*Menu))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteRoleMenu0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleMenuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/DeleteRoleMenu")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRoleMenu(ctx, req.(*DeleteRoleMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetRoleMenu0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleMenuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetRoleMenu")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoleMenu(ctx, req.(*GetRoleMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListRoleMenu0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoleMenuRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/ListRoleMenu")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRoleMenu(ctx, req.(*ListRoleMenuRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetSetting0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSettingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetSetting")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSetting(ctx, req.(*GetSettingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateSetting0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysSetting
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/CreateSetting")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSetting(ctx, req.(*SysSetting))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetDictDataList0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDictDataListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetDictDataList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDictDataList(ctx, req.(*GetDictDataListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetDictDataListByDictType0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDictDataListByDictTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetDictDataListByDictType")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDictDataListByDictType(ctx, req.(*GetDictDataListByDictTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetDictData0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDictDataRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetDictData")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDictData(ctx, req.(*GetDictDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_InsertDictData0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DictData
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/InsertDictData")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InsertDictData(ctx, req.(*DictData))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateDictData0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DictData
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/UpdateDictData")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDictData(ctx, req.(*DictData))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteDictData0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDictDataRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/DeleteDictData")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDictData(ctx, req.(*DeleteDictDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetDictTypeList0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDictTypeListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetDictTypeList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDictTypeList(ctx, req.(*GetDictTypeListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetDictType0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDictTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetDictType")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDictType(ctx, req.(*GetDictTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetDictTypeOptionSelect0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDictTypeOptionSelectRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetDictTypeOptionSelect")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDictTypeOptionSelect(ctx, req.(*GetDictTypeOptionSelectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_InsertDictType0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DictType
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/InsertDictType")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InsertDictType(ctx, req.(*DictType))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateDictType0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DictType
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/UpdateDictType")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDictType(ctx, req.(*DictType))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteDictType0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDictTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/DeleteDictType")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDictType(ctx, req.(*DeleteDictTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetServerInfo0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetServerInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetServerInfo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetServerInfo(ctx, req.(*GetServerInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetSysTableList0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSysTableListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetSysTableList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysTableList(ctx, req.(*GetSysTableListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetSysTables0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSysTablesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetSysTables")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysTables(ctx, req.(*GetSysTablesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_InsertSysTable0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InsertSysTableRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/InsertSysTable")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InsertSysTable(ctx, req.(*InsertSysTableRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateSysTable0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysTable
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/UpdateSysTable")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSysTable(ctx, req.(*SysTable))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteSysTables0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSysTablesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/DeleteSysTables")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSysTables(ctx, req.(*DeleteSysTablesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetSysColumn0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSysColumnRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetSysColumn")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSysColumn(ctx, req.(*GetSysColumnRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateSysColumn0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SysColumn
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/UpdateSysColumn")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSysColumn(ctx, req.(*SysColumn))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetDBTableList0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDBTableListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetDBTableList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDBTableList(ctx, req.(*GetDBTableListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetDBColumnList0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDBColumnListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GetDBColumnList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDBColumnList(ctx, req.(*GetDBColumnListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_Preview0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PreviewRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/Preview")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Preview(ctx, req.(*PreviewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GenCode0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenCodeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GenCode")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenCode(ctx, req.(*GenCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GenMenuAndApi0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenMenuAndApiRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Admin/GenMenuAndApi")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenMenuAndApi(ctx, req.(*GenMenuAndApiRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	CreateConfig(ctx context.Context, req *SysConfig, opts ...http.CallOption) (rsp *ApiReply, err error)
	CreateMenu(ctx context.Context, req *Menu, opts ...http.CallOption) (rsp *ApiReply, err error)
	CreateOperLog(ctx context.Context, req *OperLog, opts ...http.CallOption) (rsp *ApiReply, err error)
	CreateResource(ctx context.Context, req *SysConfig, opts ...http.CallOption) (rsp *ApiReply, err error)
	CreateRoleMenu(ctx context.Context, req *Menu, opts ...http.CallOption) (rsp *ApiReply, err error)
	CreateSetting(ctx context.Context, req *SysSetting, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteConfig(ctx context.Context, req *DeleteConfigRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteDictData(ctx context.Context, req *DeleteDictDataRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteDictType(ctx context.Context, req *DeleteDictTypeRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteMenu(ctx context.Context, req *DeleteMenuRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteOperLog(ctx context.Context, req *DeleteOperLogRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteResource(ctx context.Context, req *DeleteConfigRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteRoleMenu(ctx context.Context, req *DeleteRoleMenuRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteSysTables(ctx context.Context, req *DeleteSysTablesRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GenCode(ctx context.Context, req *GenCodeRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GenMenuAndApi(ctx context.Context, req *GenMenuAndApiRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetConfig(ctx context.Context, req *GetConfigRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetConfigByConfigKey(ctx context.Context, req *GetConfigByConfigKeyRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetDBColumnList(ctx context.Context, req *GetDBColumnListRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetDBTableList(ctx context.Context, req *GetDBTableListRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetDictData(ctx context.Context, req *GetDictDataRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetDictDataList(ctx context.Context, req *GetDictDataListRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetDictDataListByDictType(ctx context.Context, req *GetDictDataListByDictTypeRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetDictType(ctx context.Context, req *GetDictTypeRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetDictTypeList(ctx context.Context, req *GetDictTypeListRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetDictTypeOptionSelect(ctx context.Context, req *GetDictTypeOptionSelectRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetMenu(ctx context.Context, req *GetMenuRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetMenuIDS(ctx context.Context, req *GetMenuIDSRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetMenuRole(ctx context.Context, req *GetMenuRoleRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetMenuTreeRoleselect(ctx context.Context, req *GetMenuTreeRoleselectRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetMenuTreeelect(ctx context.Context, req *GetMenuTreeelectRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetOperLog(ctx context.Context, req *GetOperLogRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetResource(ctx context.Context, req *GetConfigRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetRoleMenu(ctx context.Context, req *GetRoleMenuRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetServerInfo(ctx context.Context, req *GetServerInfoRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetSetting(ctx context.Context, req *GetSettingRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetSysColumn(ctx context.Context, req *GetSysColumnRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetSysTableList(ctx context.Context, req *GetSysTableListRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetSysTables(ctx context.Context, req *GetSysTablesRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	InsertDictData(ctx context.Context, req *DictData, opts ...http.CallOption) (rsp *ApiReply, err error)
	InsertDictType(ctx context.Context, req *DictType, opts ...http.CallOption) (rsp *ApiReply, err error)
	InsertSysTable(ctx context.Context, req *InsertSysTableRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListConfig(ctx context.Context, req *ListConfigRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListMenu(ctx context.Context, req *ListMenuRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListOperLog(ctx context.Context, req *ListOperLogRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListResource(ctx context.Context, req *ListResourceRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	ListRoleMenu(ctx context.Context, req *ListRoleMenuRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	Preview(ctx context.Context, req *PreviewRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateConfig(ctx context.Context, req *SysConfig, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateDictData(ctx context.Context, req *DictData, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateDictType(ctx context.Context, req *DictType, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateMenu(ctx context.Context, req *Menu, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateOperLog(ctx context.Context, req *OperLog, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateResource(ctx context.Context, req *SysConfig, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateRoleMenu(ctx context.Context, req *Menu, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateSysColumn(ctx context.Context, req *SysColumn, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateSysTable(ctx context.Context, req *SysTable, opts ...http.CallOption) (rsp *ApiReply, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) CreateConfig(ctx context.Context, in *SysConfig, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/CreateConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateMenu(ctx context.Context, in *Menu, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/menu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/CreateMenu"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateOperLog(ctx context.Context, in *OperLog, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/operlog"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/CreateOperLog"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateResource(ctx context.Context, in *SysConfig, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/resource"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/CreateResource"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateRoleMenu(ctx context.Context, in *Menu, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/rolemenu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/CreateRoleMenu"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateSetting(ctx context.Context, in *SysSetting, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/setting"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/CreateSetting"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/config/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/DeleteConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteDictData(ctx context.Context, in *DeleteDictDataRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/dict/data/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/DeleteDictData"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteDictType(ctx context.Context, in *DeleteDictTypeRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/dict/type/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/DeleteDictType"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteMenu(ctx context.Context, in *DeleteMenuRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/menu/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/DeleteMenu"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteOperLog(ctx context.Context, in *DeleteOperLogRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/operlog"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/DeleteOperLog"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteResource(ctx context.Context, in *DeleteConfigRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/resource/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/DeleteResource"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteRoleMenu(ctx context.Context, in *DeleteRoleMenuRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/rolemenu"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/DeleteRoleMenu"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteSysTables(ctx context.Context, in *DeleteSysTablesRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tools/sys/tables/info/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/DeleteSysTables"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GenCode(ctx context.Context, in *GenCodeRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tools/gen/toproject/{tableId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GenCode"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GenMenuAndApi(ctx context.Context, in *GenMenuAndApiRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tools/gen/todb/{tableId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GenMenuAndApi"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/config/{configId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetConfigByConfigKey(ctx context.Context, in *GetConfigByConfigKeyRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/configKey/{configKey}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetConfigByConfigKey"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetDBColumnList(ctx context.Context, in *GetDBColumnListRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tools/db/columns/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetDBColumnList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetDBTableList(ctx context.Context, in *GetDBTableListRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tools/db/tables/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetDBTableList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetDictData(ctx context.Context, in *GetDictDataRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/dict/data/{dictCode}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetDictData"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetDictDataList(ctx context.Context, in *GetDictDataListRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/dict/datalist"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetDictDataList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetDictDataListByDictType(ctx context.Context, in *GetDictDataListByDictTypeRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/dict/databytype/{dictType}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetDictDataListByDictType"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetDictType(ctx context.Context, in *GetDictTypeRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/dict/type/{dictId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetDictType"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetDictTypeList(ctx context.Context, in *GetDictTypeListRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/dict/typelist"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetDictTypeList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetDictTypeOptionSelect(ctx context.Context, in *GetDictTypeOptionSelectRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/dict/typeoptionselect"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetDictTypeOptionSelect"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetMenu(ctx context.Context, in *GetMenuRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/menu/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetMenu"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetMenuIDS(ctx context.Context, in *GetMenuIDSRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/menuids"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetMenuIDS"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetMenuRole(ctx context.Context, in *GetMenuRoleRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/menurole"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetMenuRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetMenuTreeRoleselect(ctx context.Context, in *GetMenuTreeRoleselectRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/roleMenuTreeselect/{roleId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetMenuTreeRoleselect"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetMenuTreeelect(ctx context.Context, in *GetMenuTreeelectRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/menuTreeselect"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetMenuTreeelect"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetOperLog(ctx context.Context, in *GetOperLogRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/operlog/{operId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetOperLog"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetResource(ctx context.Context, in *GetConfigRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/resource/{configId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetResource"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetRoleMenu(ctx context.Context, in *GetRoleMenuRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/rolemenu"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetRoleMenu"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetServerInfo(ctx context.Context, in *GetServerInfoRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tools/serverInfo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetServerInfo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetSetting(ctx context.Context, in *GetSettingRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/public/setting"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetSetting"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetSysColumn(ctx context.Context, in *GetSysColumnRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tools/sys/column/info/{tableId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetSysColumn"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetSysTableList(ctx context.Context, in *GetSysTableListRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tools/sys/tables/page"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetSysTableList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetSysTables(ctx context.Context, in *GetSysTablesRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tools/sys/tables/info/{tableId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/GetSysTables"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) InsertDictData(ctx context.Context, in *DictData, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/dict/data"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/InsertDictData"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) InsertDictType(ctx context.Context, in *DictType, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/dict/type"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/InsertDictType"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) InsertSysTable(ctx context.Context, in *InsertSysTableRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tools/sys/tables/info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/InsertSysTable"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListConfig(ctx context.Context, in *ListConfigRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/configList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/ListConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListMenu(ctx context.Context, in *ListMenuRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/menulist"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/ListMenu"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListOperLog(ctx context.Context, in *ListOperLogRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/operloglist"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/ListOperLog"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListResource(ctx context.Context, in *ListResourceRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/resourceList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/ListResource"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListRoleMenu(ctx context.Context, in *ListRoleMenuRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/rolemenulist"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/ListRoleMenu"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) Preview(ctx context.Context, in *PreviewRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tools/gen/preview/{tableId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/Preview"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateConfig(ctx context.Context, in *SysConfig, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/config/{configId}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/UpdateConfig"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateDictData(ctx context.Context, in *DictData, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/dict/data"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/UpdateDictData"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateDictType(ctx context.Context, in *DictType, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/dict/type"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/UpdateDictType"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateMenu(ctx context.Context, in *Menu, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/menu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/UpdateMenu"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateOperLog(ctx context.Context, in *OperLog, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/operlog"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/UpdateOperLog"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateResource(ctx context.Context, in *SysConfig, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/resource/{configId}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/UpdateResource"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateRoleMenu(ctx context.Context, in *Menu, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/rolemenu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/UpdateRoleMenu"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateSysColumn(ctx context.Context, in *SysColumn, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tools/sys/column/info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/UpdateSysColumn"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateSysTable(ctx context.Context, in *SysTable, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tools/sys/tables/info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.sys.v1.Admin/UpdateSysTable"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

type ApiHTTPServer interface {
	GetDictData(context.Context, *GetDictDataRequest) (*ApiReply, error)
	GetDictDataListByDictType(context.Context, *GetDictDataListByDictTypeRequest) (*ApiReply, error)
	GetDictType(context.Context, *GetDictTypeRequest) (*ApiReply, error)
	GetDictTypeList(context.Context, *GetDictTypeListRequest) (*ApiReply, error)
}

func RegisterApiHTTPServer(s *http.Server, srv ApiHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/dict/databytype/{dictType}", _Api_GetDictDataListByDictType1_HTTP_Handler(srv))
	r.GET("/api/v1/dict/data/{dictCode}", _Api_GetDictData1_HTTP_Handler(srv))
	r.GET("/api/v1/dict/typelist", _Api_GetDictTypeList1_HTTP_Handler(srv))
	r.GET("/api/v1/dict/type/{dictId}", _Api_GetDictType1_HTTP_Handler(srv))
}

func _Api_GetDictDataListByDictType1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDictDataListByDictTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Api/GetDictDataListByDictType")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDictDataListByDictType(ctx, req.(*GetDictDataListByDictTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetDictData1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDictDataRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Api/GetDictData")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDictData(ctx, req.(*GetDictDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetDictTypeList1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDictTypeListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Api/GetDictTypeList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDictTypeList(ctx, req.(*GetDictTypeListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetDictType1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDictTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.sys.v1.Api/GetDictType")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDictType(ctx, req.(*GetDictTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

type ApiHTTPClient interface {
	GetDictData(ctx context.Context, req *GetDictDataRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetDictDataListByDictType(ctx context.Context, req *GetDictDataListByDictTypeRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetDictType(ctx context.Context, req *GetDictTypeRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetDictTypeList(ctx context.Context, req *GetDictTypeListRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
}

type ApiHTTPClientImpl struct {
	cc *http.Client
}

func NewApiHTTPClient(client *http.Client) ApiHTTPClient {
	return &ApiHTTPClientImpl{client}
}

func (c *ApiHTTPClientImpl) GetDictData(ctx context.Context, in *GetDictDataRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/api/v1/dict/data/{dictCode}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Api/GetDictData"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetDictDataListByDictType(ctx context.Context, in *GetDictDataListByDictTypeRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/dict/databytype/{dictType}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Api/GetDictDataListByDictType"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetDictType(ctx context.Context, in *GetDictTypeRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/api/v1/dict/type/{dictId}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Api/GetDictType"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetDictTypeList(ctx context.Context, in *GetDictTypeListRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/api/v1/dict/typelist"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.sys.v1.Api/GetDictTypeList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
