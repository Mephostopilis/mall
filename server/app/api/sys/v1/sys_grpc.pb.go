// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	CreateResource(ctx context.Context, in *SysConfig, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateResource(ctx context.Context, in *SysConfig, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteResource(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetResource(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*ApiReply, error)
	ListResource(ctx context.Context, in *ListResourceRequest, opts ...grpc.CallOption) (*ApiReply, error)
	CreateConfig(ctx context.Context, in *SysConfig, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateConfig(ctx context.Context, in *SysConfig, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetConfigByConfigKey(ctx context.Context, in *GetConfigByConfigKeyRequest, opts ...grpc.CallOption) (*ApiReply, error)
	ListConfig(ctx context.Context, in *ListConfigRequest, opts ...grpc.CallOption) (*ApiReply, error)
	CreateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteMenu(ctx context.Context, in *DeleteMenuRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetMenu(ctx context.Context, in *GetMenuRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetMenuTreeRoleselect(ctx context.Context, in *GetMenuTreeRoleselectRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetMenuTreeelect(ctx context.Context, in *GetMenuTreeelectRequest, opts ...grpc.CallOption) (*ApiReply, error)
	ListMenu(ctx context.Context, in *ListMenuRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetMenuRole(ctx context.Context, in *GetMenuRoleRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetMenuIDS(ctx context.Context, in *GetMenuIDSRequest, opts ...grpc.CallOption) (*ApiReply, error)
	CreateOperLog(ctx context.Context, in *OperLog, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateOperLog(ctx context.Context, in *OperLog, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteOperLog(ctx context.Context, in *DeleteOperLogRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetOperLog(ctx context.Context, in *GetOperLogRequest, opts ...grpc.CallOption) (*ApiReply, error)
	ListOperLog(ctx context.Context, in *ListOperLogRequest, opts ...grpc.CallOption) (*ApiReply, error)
	CreateRoleMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateRoleMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteRoleMenu(ctx context.Context, in *DeleteRoleMenuRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetRoleMenu(ctx context.Context, in *GetRoleMenuRequest, opts ...grpc.CallOption) (*ApiReply, error)
	ListRoleMenu(ctx context.Context, in *ListRoleMenuRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetSetting(ctx context.Context, in *GetSettingRequest, opts ...grpc.CallOption) (*ApiReply, error)
	CreateSetting(ctx context.Context, in *SysSetting, opts ...grpc.CallOption) (*ApiReply, error)
	GetDictDataList(ctx context.Context, in *GetDictDataListRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetDictDataListByDictType(ctx context.Context, in *GetDictDataListByDictTypeRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetDictData(ctx context.Context, in *GetDictDataRequest, opts ...grpc.CallOption) (*ApiReply, error)
	InsertDictData(ctx context.Context, in *DictData, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateDictData(ctx context.Context, in *DictData, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteDictData(ctx context.Context, in *DeleteDictDataRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetDictTypeList(ctx context.Context, in *GetDictTypeListRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetDictType(ctx context.Context, in *GetDictTypeRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetDictTypeOptionSelect(ctx context.Context, in *GetDictTypeOptionSelectRequest, opts ...grpc.CallOption) (*ApiReply, error)
	InsertDictType(ctx context.Context, in *DictType, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateDictType(ctx context.Context, in *DictType, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteDictType(ctx context.Context, in *DeleteDictTypeRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetServerInfo(ctx context.Context, in *GetServerInfoRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetSysTableList(ctx context.Context, in *GetSysTableListRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetSysTables(ctx context.Context, in *GetSysTablesRequest, opts ...grpc.CallOption) (*ApiReply, error)
	InsertSysTable(ctx context.Context, in *InsertSysTableRequest, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateSysTable(ctx context.Context, in *SysTable, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteSysTables(ctx context.Context, in *DeleteSysTablesRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetSysColumn(ctx context.Context, in *GetSysColumnRequest, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateSysColumn(ctx context.Context, in *SysColumn, opts ...grpc.CallOption) (*ApiReply, error)
	GetDBTableList(ctx context.Context, in *GetDBTableListRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetDBColumnList(ctx context.Context, in *GetDBColumnListRequest, opts ...grpc.CallOption) (*ApiReply, error)
	Preview(ctx context.Context, in *PreviewRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GenCode(ctx context.Context, in *GenCodeRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GenMenuAndApi(ctx context.Context, in *GenMenuAndApiRequest, opts ...grpc.CallOption) (*ApiReply, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) CreateResource(ctx context.Context, in *SysConfig, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/CreateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateResource(ctx context.Context, in *SysConfig, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/UpdateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteResource(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/DeleteResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetResource(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListResource(ctx context.Context, in *ListResourceRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/ListResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateConfig(ctx context.Context, in *SysConfig, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/CreateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateConfig(ctx context.Context, in *SysConfig, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteConfig(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/DeleteConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetConfigByConfigKey(ctx context.Context, in *GetConfigByConfigKeyRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetConfigByConfigKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListConfig(ctx context.Context, in *ListConfigRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/ListConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/CreateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/UpdateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteMenu(ctx context.Context, in *DeleteMenuRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/DeleteMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetMenu(ctx context.Context, in *GetMenuRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetMenuTreeRoleselect(ctx context.Context, in *GetMenuTreeRoleselectRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetMenuTreeRoleselect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetMenuTreeelect(ctx context.Context, in *GetMenuTreeelectRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetMenuTreeelect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListMenu(ctx context.Context, in *ListMenuRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/ListMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetMenuRole(ctx context.Context, in *GetMenuRoleRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetMenuRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetMenuIDS(ctx context.Context, in *GetMenuIDSRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetMenuIDS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateOperLog(ctx context.Context, in *OperLog, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/CreateOperLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateOperLog(ctx context.Context, in *OperLog, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/UpdateOperLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteOperLog(ctx context.Context, in *DeleteOperLogRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/DeleteOperLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetOperLog(ctx context.Context, in *GetOperLogRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetOperLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListOperLog(ctx context.Context, in *ListOperLogRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/ListOperLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateRoleMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/CreateRoleMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateRoleMenu(ctx context.Context, in *Menu, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/UpdateRoleMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteRoleMenu(ctx context.Context, in *DeleteRoleMenuRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/DeleteRoleMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetRoleMenu(ctx context.Context, in *GetRoleMenuRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetRoleMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListRoleMenu(ctx context.Context, in *ListRoleMenuRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/ListRoleMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetSetting(ctx context.Context, in *GetSettingRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateSetting(ctx context.Context, in *SysSetting, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/CreateSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetDictDataList(ctx context.Context, in *GetDictDataListRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetDictDataList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetDictDataListByDictType(ctx context.Context, in *GetDictDataListByDictTypeRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetDictDataListByDictType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetDictData(ctx context.Context, in *GetDictDataRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetDictData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) InsertDictData(ctx context.Context, in *DictData, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/InsertDictData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateDictData(ctx context.Context, in *DictData, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/UpdateDictData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteDictData(ctx context.Context, in *DeleteDictDataRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/DeleteDictData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetDictTypeList(ctx context.Context, in *GetDictTypeListRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetDictTypeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetDictType(ctx context.Context, in *GetDictTypeRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetDictType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetDictTypeOptionSelect(ctx context.Context, in *GetDictTypeOptionSelectRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetDictTypeOptionSelect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) InsertDictType(ctx context.Context, in *DictType, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/InsertDictType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateDictType(ctx context.Context, in *DictType, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/UpdateDictType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteDictType(ctx context.Context, in *DeleteDictTypeRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/DeleteDictType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetServerInfo(ctx context.Context, in *GetServerInfoRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetServerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetSysTableList(ctx context.Context, in *GetSysTableListRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetSysTableList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetSysTables(ctx context.Context, in *GetSysTablesRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetSysTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) InsertSysTable(ctx context.Context, in *InsertSysTableRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/InsertSysTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateSysTable(ctx context.Context, in *SysTable, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/UpdateSysTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteSysTables(ctx context.Context, in *DeleteSysTablesRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/DeleteSysTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetSysColumn(ctx context.Context, in *GetSysColumnRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetSysColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateSysColumn(ctx context.Context, in *SysColumn, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/UpdateSysColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetDBTableList(ctx context.Context, in *GetDBTableListRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetDBTableList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetDBColumnList(ctx context.Context, in *GetDBColumnListRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GetDBColumnList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Preview(ctx context.Context, in *PreviewRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/Preview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GenCode(ctx context.Context, in *GenCodeRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GenCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GenMenuAndApi(ctx context.Context, in *GenMenuAndApiRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Admin/GenMenuAndApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	CreateResource(context.Context, *SysConfig) (*ApiReply, error)
	UpdateResource(context.Context, *SysConfig) (*ApiReply, error)
	DeleteResource(context.Context, *DeleteConfigRequest) (*ApiReply, error)
	GetResource(context.Context, *GetConfigRequest) (*ApiReply, error)
	ListResource(context.Context, *ListResourceRequest) (*ApiReply, error)
	CreateConfig(context.Context, *SysConfig) (*ApiReply, error)
	UpdateConfig(context.Context, *SysConfig) (*ApiReply, error)
	DeleteConfig(context.Context, *DeleteConfigRequest) (*ApiReply, error)
	GetConfig(context.Context, *GetConfigRequest) (*ApiReply, error)
	GetConfigByConfigKey(context.Context, *GetConfigByConfigKeyRequest) (*ApiReply, error)
	ListConfig(context.Context, *ListConfigRequest) (*ApiReply, error)
	CreateMenu(context.Context, *Menu) (*ApiReply, error)
	UpdateMenu(context.Context, *Menu) (*ApiReply, error)
	DeleteMenu(context.Context, *DeleteMenuRequest) (*ApiReply, error)
	GetMenu(context.Context, *GetMenuRequest) (*ApiReply, error)
	GetMenuTreeRoleselect(context.Context, *GetMenuTreeRoleselectRequest) (*ApiReply, error)
	GetMenuTreeelect(context.Context, *GetMenuTreeelectRequest) (*ApiReply, error)
	ListMenu(context.Context, *ListMenuRequest) (*ApiReply, error)
	GetMenuRole(context.Context, *GetMenuRoleRequest) (*ApiReply, error)
	GetMenuIDS(context.Context, *GetMenuIDSRequest) (*ApiReply, error)
	CreateOperLog(context.Context, *OperLog) (*ApiReply, error)
	UpdateOperLog(context.Context, *OperLog) (*ApiReply, error)
	DeleteOperLog(context.Context, *DeleteOperLogRequest) (*ApiReply, error)
	GetOperLog(context.Context, *GetOperLogRequest) (*ApiReply, error)
	ListOperLog(context.Context, *ListOperLogRequest) (*ApiReply, error)
	CreateRoleMenu(context.Context, *Menu) (*ApiReply, error)
	UpdateRoleMenu(context.Context, *Menu) (*ApiReply, error)
	DeleteRoleMenu(context.Context, *DeleteRoleMenuRequest) (*ApiReply, error)
	GetRoleMenu(context.Context, *GetRoleMenuRequest) (*ApiReply, error)
	ListRoleMenu(context.Context, *ListRoleMenuRequest) (*ApiReply, error)
	GetSetting(context.Context, *GetSettingRequest) (*ApiReply, error)
	CreateSetting(context.Context, *SysSetting) (*ApiReply, error)
	GetDictDataList(context.Context, *GetDictDataListRequest) (*ApiReply, error)
	GetDictDataListByDictType(context.Context, *GetDictDataListByDictTypeRequest) (*ApiReply, error)
	GetDictData(context.Context, *GetDictDataRequest) (*ApiReply, error)
	InsertDictData(context.Context, *DictData) (*ApiReply, error)
	UpdateDictData(context.Context, *DictData) (*ApiReply, error)
	DeleteDictData(context.Context, *DeleteDictDataRequest) (*ApiReply, error)
	GetDictTypeList(context.Context, *GetDictTypeListRequest) (*ApiReply, error)
	GetDictType(context.Context, *GetDictTypeRequest) (*ApiReply, error)
	GetDictTypeOptionSelect(context.Context, *GetDictTypeOptionSelectRequest) (*ApiReply, error)
	InsertDictType(context.Context, *DictType) (*ApiReply, error)
	UpdateDictType(context.Context, *DictType) (*ApiReply, error)
	DeleteDictType(context.Context, *DeleteDictTypeRequest) (*ApiReply, error)
	GetServerInfo(context.Context, *GetServerInfoRequest) (*ApiReply, error)
	GetSysTableList(context.Context, *GetSysTableListRequest) (*ApiReply, error)
	GetSysTables(context.Context, *GetSysTablesRequest) (*ApiReply, error)
	InsertSysTable(context.Context, *InsertSysTableRequest) (*ApiReply, error)
	UpdateSysTable(context.Context, *SysTable) (*ApiReply, error)
	DeleteSysTables(context.Context, *DeleteSysTablesRequest) (*ApiReply, error)
	GetSysColumn(context.Context, *GetSysColumnRequest) (*ApiReply, error)
	UpdateSysColumn(context.Context, *SysColumn) (*ApiReply, error)
	GetDBTableList(context.Context, *GetDBTableListRequest) (*ApiReply, error)
	GetDBColumnList(context.Context, *GetDBColumnListRequest) (*ApiReply, error)
	Preview(context.Context, *PreviewRequest) (*ApiReply, error)
	GenCode(context.Context, *GenCodeRequest) (*ApiReply, error)
	GenMenuAndApi(context.Context, *GenMenuAndApiRequest) (*ApiReply, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) CreateResource(context.Context, *SysConfig) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedAdminServer) UpdateResource(context.Context, *SysConfig) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedAdminServer) DeleteResource(context.Context, *DeleteConfigRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedAdminServer) GetResource(context.Context, *GetConfigRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedAdminServer) ListResource(context.Context, *ListResourceRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResource not implemented")
}
func (UnimplementedAdminServer) CreateConfig(context.Context, *SysConfig) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfig not implemented")
}
func (UnimplementedAdminServer) UpdateConfig(context.Context, *SysConfig) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedAdminServer) DeleteConfig(context.Context, *DeleteConfigRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (UnimplementedAdminServer) GetConfig(context.Context, *GetConfigRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedAdminServer) GetConfigByConfigKey(context.Context, *GetConfigByConfigKeyRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigByConfigKey not implemented")
}
func (UnimplementedAdminServer) ListConfig(context.Context, *ListConfigRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfig not implemented")
}
func (UnimplementedAdminServer) CreateMenu(context.Context, *Menu) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedAdminServer) UpdateMenu(context.Context, *Menu) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedAdminServer) DeleteMenu(context.Context, *DeleteMenuRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedAdminServer) GetMenu(context.Context, *GetMenuRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenu not implemented")
}
func (UnimplementedAdminServer) GetMenuTreeRoleselect(context.Context, *GetMenuTreeRoleselectRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuTreeRoleselect not implemented")
}
func (UnimplementedAdminServer) GetMenuTreeelect(context.Context, *GetMenuTreeelectRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuTreeelect not implemented")
}
func (UnimplementedAdminServer) ListMenu(context.Context, *ListMenuRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMenu not implemented")
}
func (UnimplementedAdminServer) GetMenuRole(context.Context, *GetMenuRoleRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuRole not implemented")
}
func (UnimplementedAdminServer) GetMenuIDS(context.Context, *GetMenuIDSRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenuIDS not implemented")
}
func (UnimplementedAdminServer) CreateOperLog(context.Context, *OperLog) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOperLog not implemented")
}
func (UnimplementedAdminServer) UpdateOperLog(context.Context, *OperLog) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOperLog not implemented")
}
func (UnimplementedAdminServer) DeleteOperLog(context.Context, *DeleteOperLogRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOperLog not implemented")
}
func (UnimplementedAdminServer) GetOperLog(context.Context, *GetOperLogRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperLog not implemented")
}
func (UnimplementedAdminServer) ListOperLog(context.Context, *ListOperLogRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperLog not implemented")
}
func (UnimplementedAdminServer) CreateRoleMenu(context.Context, *Menu) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoleMenu not implemented")
}
func (UnimplementedAdminServer) UpdateRoleMenu(context.Context, *Menu) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoleMenu not implemented")
}
func (UnimplementedAdminServer) DeleteRoleMenu(context.Context, *DeleteRoleMenuRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleMenu not implemented")
}
func (UnimplementedAdminServer) GetRoleMenu(context.Context, *GetRoleMenuRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleMenu not implemented")
}
func (UnimplementedAdminServer) ListRoleMenu(context.Context, *ListRoleMenuRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoleMenu not implemented")
}
func (UnimplementedAdminServer) GetSetting(context.Context, *GetSettingRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetting not implemented")
}
func (UnimplementedAdminServer) CreateSetting(context.Context, *SysSetting) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSetting not implemented")
}
func (UnimplementedAdminServer) GetDictDataList(context.Context, *GetDictDataListRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictDataList not implemented")
}
func (UnimplementedAdminServer) GetDictDataListByDictType(context.Context, *GetDictDataListByDictTypeRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictDataListByDictType not implemented")
}
func (UnimplementedAdminServer) GetDictData(context.Context, *GetDictDataRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictData not implemented")
}
func (UnimplementedAdminServer) InsertDictData(context.Context, *DictData) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertDictData not implemented")
}
func (UnimplementedAdminServer) UpdateDictData(context.Context, *DictData) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictData not implemented")
}
func (UnimplementedAdminServer) DeleteDictData(context.Context, *DeleteDictDataRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictData not implemented")
}
func (UnimplementedAdminServer) GetDictTypeList(context.Context, *GetDictTypeListRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictTypeList not implemented")
}
func (UnimplementedAdminServer) GetDictType(context.Context, *GetDictTypeRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictType not implemented")
}
func (UnimplementedAdminServer) GetDictTypeOptionSelect(context.Context, *GetDictTypeOptionSelectRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictTypeOptionSelect not implemented")
}
func (UnimplementedAdminServer) InsertDictType(context.Context, *DictType) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertDictType not implemented")
}
func (UnimplementedAdminServer) UpdateDictType(context.Context, *DictType) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictType not implemented")
}
func (UnimplementedAdminServer) DeleteDictType(context.Context, *DeleteDictTypeRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictType not implemented")
}
func (UnimplementedAdminServer) GetServerInfo(context.Context, *GetServerInfoRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInfo not implemented")
}
func (UnimplementedAdminServer) GetSysTableList(context.Context, *GetSysTableListRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysTableList not implemented")
}
func (UnimplementedAdminServer) GetSysTables(context.Context, *GetSysTablesRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysTables not implemented")
}
func (UnimplementedAdminServer) InsertSysTable(context.Context, *InsertSysTableRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertSysTable not implemented")
}
func (UnimplementedAdminServer) UpdateSysTable(context.Context, *SysTable) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysTable not implemented")
}
func (UnimplementedAdminServer) DeleteSysTables(context.Context, *DeleteSysTablesRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSysTables not implemented")
}
func (UnimplementedAdminServer) GetSysColumn(context.Context, *GetSysColumnRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysColumn not implemented")
}
func (UnimplementedAdminServer) UpdateSysColumn(context.Context, *SysColumn) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysColumn not implemented")
}
func (UnimplementedAdminServer) GetDBTableList(context.Context, *GetDBTableListRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDBTableList not implemented")
}
func (UnimplementedAdminServer) GetDBColumnList(context.Context, *GetDBColumnListRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDBColumnList not implemented")
}
func (UnimplementedAdminServer) Preview(context.Context, *PreviewRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Preview not implemented")
}
func (UnimplementedAdminServer) GenCode(context.Context, *GenCodeRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenCode not implemented")
}
func (UnimplementedAdminServer) GenMenuAndApi(context.Context, *GenMenuAndApiRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenMenuAndApi not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/CreateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateResource(ctx, req.(*SysConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/UpdateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateResource(ctx, req.(*SysConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/DeleteResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteResource(ctx, req.(*DeleteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetResource(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/ListResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListResource(ctx, req.(*ListResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/CreateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateConfig(ctx, req.(*SysConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateConfig(ctx, req.(*SysConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/DeleteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteConfig(ctx, req.(*DeleteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetConfigByConfigKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigByConfigKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetConfigByConfigKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetConfigByConfigKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetConfigByConfigKey(ctx, req.(*GetConfigByConfigKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/ListConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListConfig(ctx, req.(*ListConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Menu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/CreateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateMenu(ctx, req.(*Menu))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Menu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/UpdateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateMenu(ctx, req.(*Menu))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/DeleteMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteMenu(ctx, req.(*DeleteMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetMenu(ctx, req.(*GetMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetMenuTreeRoleselect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuTreeRoleselectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetMenuTreeRoleselect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetMenuTreeRoleselect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetMenuTreeRoleselect(ctx, req.(*GetMenuTreeRoleselectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetMenuTreeelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuTreeelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetMenuTreeelect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetMenuTreeelect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetMenuTreeelect(ctx, req.(*GetMenuTreeelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/ListMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListMenu(ctx, req.(*ListMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetMenuRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetMenuRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetMenuRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetMenuRole(ctx, req.(*GetMenuRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetMenuIDS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuIDSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetMenuIDS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetMenuIDS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetMenuIDS(ctx, req.(*GetMenuIDSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateOperLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateOperLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/CreateOperLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateOperLog(ctx, req.(*OperLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateOperLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateOperLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/UpdateOperLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateOperLog(ctx, req.(*OperLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteOperLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOperLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteOperLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/DeleteOperLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteOperLog(ctx, req.(*DeleteOperLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetOperLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetOperLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetOperLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetOperLog(ctx, req.(*GetOperLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListOperLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListOperLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/ListOperLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListOperLog(ctx, req.(*ListOperLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Menu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/CreateRoleMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateRoleMenu(ctx, req.(*Menu))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Menu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/UpdateRoleMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateRoleMenu(ctx, req.(*Menu))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/DeleteRoleMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteRoleMenu(ctx, req.(*DeleteRoleMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetRoleMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetRoleMenu(ctx, req.(*GetRoleMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListRoleMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListRoleMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/ListRoleMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListRoleMenu(ctx, req.(*ListRoleMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetSetting(ctx, req.(*GetSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/CreateSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateSetting(ctx, req.(*SysSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetDictDataList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictDataListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetDictDataList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetDictDataList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetDictDataList(ctx, req.(*GetDictDataListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetDictDataListByDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictDataListByDictTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetDictDataListByDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetDictDataListByDictType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetDictDataListByDictType(ctx, req.(*GetDictDataListByDictTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetDictData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetDictData(ctx, req.(*GetDictDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_InsertDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).InsertDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/InsertDictData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).InsertDictData(ctx, req.(*DictData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/UpdateDictData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateDictData(ctx, req.(*DictData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDictDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/DeleteDictData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteDictData(ctx, req.(*DeleteDictDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetDictTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictTypeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetDictTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetDictTypeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetDictTypeList(ctx, req.(*GetDictTypeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetDictType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetDictType(ctx, req.(*GetDictTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetDictTypeOptionSelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictTypeOptionSelectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetDictTypeOptionSelect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetDictTypeOptionSelect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetDictTypeOptionSelect(ctx, req.(*GetDictTypeOptionSelectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_InsertDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).InsertDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/InsertDictType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).InsertDictType(ctx, req.(*DictType))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/UpdateDictType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateDictType(ctx, req.(*DictType))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDictTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/DeleteDictType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteDictType(ctx, req.(*DeleteDictTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetServerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetServerInfo(ctx, req.(*GetServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetSysTableList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysTableListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetSysTableList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetSysTableList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetSysTableList(ctx, req.(*GetSysTableListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetSysTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetSysTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetSysTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetSysTables(ctx, req.(*GetSysTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_InsertSysTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertSysTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).InsertSysTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/InsertSysTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).InsertSysTable(ctx, req.(*InsertSysTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateSysTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysTable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateSysTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/UpdateSysTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateSysTable(ctx, req.(*SysTable))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteSysTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSysTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteSysTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/DeleteSysTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteSysTables(ctx, req.(*DeleteSysTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetSysColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetSysColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetSysColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetSysColumn(ctx, req.(*GetSysColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateSysColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysColumn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateSysColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/UpdateSysColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateSysColumn(ctx, req.(*SysColumn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetDBTableList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDBTableListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetDBTableList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetDBTableList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetDBTableList(ctx, req.(*GetDBTableListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetDBColumnList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDBColumnListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetDBColumnList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GetDBColumnList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetDBColumnList(ctx, req.(*GetDBColumnListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Preview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Preview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/Preview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Preview(ctx, req.(*PreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GenCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GenCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GenCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GenCode(ctx, req.(*GenCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GenMenuAndApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenMenuAndApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GenMenuAndApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Admin/GenMenuAndApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GenMenuAndApi(ctx, req.(*GenMenuAndApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.sys.v1.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResource",
			Handler:    _Admin_CreateResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _Admin_UpdateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _Admin_DeleteResource_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _Admin_GetResource_Handler,
		},
		{
			MethodName: "ListResource",
			Handler:    _Admin_ListResource_Handler,
		},
		{
			MethodName: "CreateConfig",
			Handler:    _Admin_CreateConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _Admin_UpdateConfig_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _Admin_DeleteConfig_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Admin_GetConfig_Handler,
		},
		{
			MethodName: "GetConfigByConfigKey",
			Handler:    _Admin_GetConfigByConfigKey_Handler,
		},
		{
			MethodName: "ListConfig",
			Handler:    _Admin_ListConfig_Handler,
		},
		{
			MethodName: "CreateMenu",
			Handler:    _Admin_CreateMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _Admin_UpdateMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _Admin_DeleteMenu_Handler,
		},
		{
			MethodName: "GetMenu",
			Handler:    _Admin_GetMenu_Handler,
		},
		{
			MethodName: "GetMenuTreeRoleselect",
			Handler:    _Admin_GetMenuTreeRoleselect_Handler,
		},
		{
			MethodName: "GetMenuTreeelect",
			Handler:    _Admin_GetMenuTreeelect_Handler,
		},
		{
			MethodName: "ListMenu",
			Handler:    _Admin_ListMenu_Handler,
		},
		{
			MethodName: "GetMenuRole",
			Handler:    _Admin_GetMenuRole_Handler,
		},
		{
			MethodName: "GetMenuIDS",
			Handler:    _Admin_GetMenuIDS_Handler,
		},
		{
			MethodName: "CreateOperLog",
			Handler:    _Admin_CreateOperLog_Handler,
		},
		{
			MethodName: "UpdateOperLog",
			Handler:    _Admin_UpdateOperLog_Handler,
		},
		{
			MethodName: "DeleteOperLog",
			Handler:    _Admin_DeleteOperLog_Handler,
		},
		{
			MethodName: "GetOperLog",
			Handler:    _Admin_GetOperLog_Handler,
		},
		{
			MethodName: "ListOperLog",
			Handler:    _Admin_ListOperLog_Handler,
		},
		{
			MethodName: "CreateRoleMenu",
			Handler:    _Admin_CreateRoleMenu_Handler,
		},
		{
			MethodName: "UpdateRoleMenu",
			Handler:    _Admin_UpdateRoleMenu_Handler,
		},
		{
			MethodName: "DeleteRoleMenu",
			Handler:    _Admin_DeleteRoleMenu_Handler,
		},
		{
			MethodName: "GetRoleMenu",
			Handler:    _Admin_GetRoleMenu_Handler,
		},
		{
			MethodName: "ListRoleMenu",
			Handler:    _Admin_ListRoleMenu_Handler,
		},
		{
			MethodName: "GetSetting",
			Handler:    _Admin_GetSetting_Handler,
		},
		{
			MethodName: "CreateSetting",
			Handler:    _Admin_CreateSetting_Handler,
		},
		{
			MethodName: "GetDictDataList",
			Handler:    _Admin_GetDictDataList_Handler,
		},
		{
			MethodName: "GetDictDataListByDictType",
			Handler:    _Admin_GetDictDataListByDictType_Handler,
		},
		{
			MethodName: "GetDictData",
			Handler:    _Admin_GetDictData_Handler,
		},
		{
			MethodName: "InsertDictData",
			Handler:    _Admin_InsertDictData_Handler,
		},
		{
			MethodName: "UpdateDictData",
			Handler:    _Admin_UpdateDictData_Handler,
		},
		{
			MethodName: "DeleteDictData",
			Handler:    _Admin_DeleteDictData_Handler,
		},
		{
			MethodName: "GetDictTypeList",
			Handler:    _Admin_GetDictTypeList_Handler,
		},
		{
			MethodName: "GetDictType",
			Handler:    _Admin_GetDictType_Handler,
		},
		{
			MethodName: "GetDictTypeOptionSelect",
			Handler:    _Admin_GetDictTypeOptionSelect_Handler,
		},
		{
			MethodName: "InsertDictType",
			Handler:    _Admin_InsertDictType_Handler,
		},
		{
			MethodName: "UpdateDictType",
			Handler:    _Admin_UpdateDictType_Handler,
		},
		{
			MethodName: "DeleteDictType",
			Handler:    _Admin_DeleteDictType_Handler,
		},
		{
			MethodName: "GetServerInfo",
			Handler:    _Admin_GetServerInfo_Handler,
		},
		{
			MethodName: "GetSysTableList",
			Handler:    _Admin_GetSysTableList_Handler,
		},
		{
			MethodName: "GetSysTables",
			Handler:    _Admin_GetSysTables_Handler,
		},
		{
			MethodName: "InsertSysTable",
			Handler:    _Admin_InsertSysTable_Handler,
		},
		{
			MethodName: "UpdateSysTable",
			Handler:    _Admin_UpdateSysTable_Handler,
		},
		{
			MethodName: "DeleteSysTables",
			Handler:    _Admin_DeleteSysTables_Handler,
		},
		{
			MethodName: "GetSysColumn",
			Handler:    _Admin_GetSysColumn_Handler,
		},
		{
			MethodName: "UpdateSysColumn",
			Handler:    _Admin_UpdateSysColumn_Handler,
		},
		{
			MethodName: "GetDBTableList",
			Handler:    _Admin_GetDBTableList_Handler,
		},
		{
			MethodName: "GetDBColumnList",
			Handler:    _Admin_GetDBColumnList_Handler,
		},
		{
			MethodName: "Preview",
			Handler:    _Admin_Preview_Handler,
		},
		{
			MethodName: "GenCode",
			Handler:    _Admin_GenCode_Handler,
		},
		{
			MethodName: "GenMenuAndApi",
			Handler:    _Admin_GenMenuAndApi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sys/v1/sys.proto",
}

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	GetDictDataListByDictType(ctx context.Context, in *GetDictDataListByDictTypeRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetDictData(ctx context.Context, in *GetDictDataRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetDictTypeList(ctx context.Context, in *GetDictTypeListRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetDictType(ctx context.Context, in *GetDictTypeRequest, opts ...grpc.CallOption) (*ApiReply, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) GetDictDataListByDictType(ctx context.Context, in *GetDictDataListByDictTypeRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Api/GetDictDataListByDictType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetDictData(ctx context.Context, in *GetDictDataRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Api/GetDictData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetDictTypeList(ctx context.Context, in *GetDictTypeListRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Api/GetDictTypeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetDictType(ctx context.Context, in *GetDictTypeRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.sys.v1.Api/GetDictType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	GetDictDataListByDictType(context.Context, *GetDictDataListByDictTypeRequest) (*ApiReply, error)
	GetDictData(context.Context, *GetDictDataRequest) (*ApiReply, error)
	GetDictTypeList(context.Context, *GetDictTypeListRequest) (*ApiReply, error)
	GetDictType(context.Context, *GetDictTypeRequest) (*ApiReply, error)
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) GetDictDataListByDictType(context.Context, *GetDictDataListByDictTypeRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictDataListByDictType not implemented")
}
func (UnimplementedApiServer) GetDictData(context.Context, *GetDictDataRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictData not implemented")
}
func (UnimplementedApiServer) GetDictTypeList(context.Context, *GetDictTypeListRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictTypeList not implemented")
}
func (UnimplementedApiServer) GetDictType(context.Context, *GetDictTypeRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictType not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_GetDictDataListByDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictDataListByDictTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetDictDataListByDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Api/GetDictDataListByDictType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetDictDataListByDictType(ctx, req.(*GetDictDataListByDictTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Api/GetDictData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetDictData(ctx, req.(*GetDictDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetDictTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictTypeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetDictTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Api/GetDictTypeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetDictTypeList(ctx, req.(*GetDictTypeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetDictType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetDictType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.sys.v1.Api/GetDictType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetDictType(ctx, req.(*GetDictTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.sys.v1.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDictDataListByDictType",
			Handler:    _Api_GetDictDataListByDictType_Handler,
		},
		{
			MethodName: "GetDictData",
			Handler:    _Api_GetDictData_Handler,
		},
		{
			MethodName: "GetDictTypeList",
			Handler:    _Api_GetDictTypeList_Handler,
		},
		{
			MethodName: "GetDictType",
			Handler:    _Api_GetDictType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/sys/v1/sys.proto",
}
