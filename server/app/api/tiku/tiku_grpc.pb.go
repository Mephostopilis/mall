// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tiku

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	GetChoiceList(ctx context.Context, in *GetChoiceListRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetChoice(ctx context.Context, in *GetChoiceRequest, opts ...grpc.CallOption) (*ApiReply, error)
	InsertChoice(ctx context.Context, in *Choice, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateChoice(ctx context.Context, in *Choice, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteChoice(ctx context.Context, in *DeleteChoiceRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetExerciseList(ctx context.Context, in *GetExerciseListRequest, opts ...grpc.CallOption) (*ApiReply, error)
	GetExercise(ctx context.Context, in *GetExerciseRequest, opts ...grpc.CallOption) (*ApiReply, error)
	InsertExercise(ctx context.Context, in *Exercise, opts ...grpc.CallOption) (*ApiReply, error)
	UpdateExercise(ctx context.Context, in *Exercise, opts ...grpc.CallOption) (*ApiReply, error)
	DeleteExercise(ctx context.Context, in *DeleteExerciseRequest, opts ...grpc.CallOption) (*ApiReply, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) GetChoiceList(ctx context.Context, in *GetChoiceListRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.tiku.Admin/GetChoiceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetChoice(ctx context.Context, in *GetChoiceRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.tiku.Admin/GetChoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) InsertChoice(ctx context.Context, in *Choice, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.tiku.Admin/InsertChoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateChoice(ctx context.Context, in *Choice, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.tiku.Admin/UpdateChoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteChoice(ctx context.Context, in *DeleteChoiceRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.tiku.Admin/DeleteChoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetExerciseList(ctx context.Context, in *GetExerciseListRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.tiku.Admin/GetExerciseList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetExercise(ctx context.Context, in *GetExerciseRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.tiku.Admin/GetExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) InsertExercise(ctx context.Context, in *Exercise, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.tiku.Admin/InsertExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateExercise(ctx context.Context, in *Exercise, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.tiku.Admin/UpdateExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteExercise(ctx context.Context, in *DeleteExerciseRequest, opts ...grpc.CallOption) (*ApiReply, error) {
	out := new(ApiReply)
	err := c.cc.Invoke(ctx, "/api.tiku.Admin/DeleteExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility
type AdminServer interface {
	GetChoiceList(context.Context, *GetChoiceListRequest) (*ApiReply, error)
	GetChoice(context.Context, *GetChoiceRequest) (*ApiReply, error)
	InsertChoice(context.Context, *Choice) (*ApiReply, error)
	UpdateChoice(context.Context, *Choice) (*ApiReply, error)
	DeleteChoice(context.Context, *DeleteChoiceRequest) (*ApiReply, error)
	GetExerciseList(context.Context, *GetExerciseListRequest) (*ApiReply, error)
	GetExercise(context.Context, *GetExerciseRequest) (*ApiReply, error)
	InsertExercise(context.Context, *Exercise) (*ApiReply, error)
	UpdateExercise(context.Context, *Exercise) (*ApiReply, error)
	DeleteExercise(context.Context, *DeleteExerciseRequest) (*ApiReply, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (UnimplementedAdminServer) GetChoiceList(context.Context, *GetChoiceListRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChoiceList not implemented")
}
func (UnimplementedAdminServer) GetChoice(context.Context, *GetChoiceRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChoice not implemented")
}
func (UnimplementedAdminServer) InsertChoice(context.Context, *Choice) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertChoice not implemented")
}
func (UnimplementedAdminServer) UpdateChoice(context.Context, *Choice) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChoice not implemented")
}
func (UnimplementedAdminServer) DeleteChoice(context.Context, *DeleteChoiceRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChoice not implemented")
}
func (UnimplementedAdminServer) GetExerciseList(context.Context, *GetExerciseListRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExerciseList not implemented")
}
func (UnimplementedAdminServer) GetExercise(context.Context, *GetExerciseRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExercise not implemented")
}
func (UnimplementedAdminServer) InsertExercise(context.Context, *Exercise) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertExercise not implemented")
}
func (UnimplementedAdminServer) UpdateExercise(context.Context, *Exercise) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExercise not implemented")
}
func (UnimplementedAdminServer) DeleteExercise(context.Context, *DeleteExerciseRequest) (*ApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExercise not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_GetChoiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChoiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetChoiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tiku.Admin/GetChoiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetChoiceList(ctx, req.(*GetChoiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tiku.Admin/GetChoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetChoice(ctx, req.(*GetChoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_InsertChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Choice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).InsertChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tiku.Admin/InsertChoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).InsertChoice(ctx, req.(*Choice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Choice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tiku.Admin/UpdateChoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateChoice(ctx, req.(*Choice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tiku.Admin/DeleteChoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteChoice(ctx, req.(*DeleteChoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetExerciseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExerciseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetExerciseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tiku.Admin/GetExerciseList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetExerciseList(ctx, req.(*GetExerciseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tiku.Admin/GetExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetExercise(ctx, req.(*GetExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_InsertExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Exercise)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).InsertExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tiku.Admin/InsertExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).InsertExercise(ctx, req.(*Exercise))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Exercise)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tiku.Admin/UpdateExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateExercise(ctx, req.(*Exercise))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tiku.Admin/DeleteExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteExercise(ctx, req.(*DeleteExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.tiku.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChoiceList",
			Handler:    _Admin_GetChoiceList_Handler,
		},
		{
			MethodName: "GetChoice",
			Handler:    _Admin_GetChoice_Handler,
		},
		{
			MethodName: "InsertChoice",
			Handler:    _Admin_InsertChoice_Handler,
		},
		{
			MethodName: "UpdateChoice",
			Handler:    _Admin_UpdateChoice_Handler,
		},
		{
			MethodName: "DeleteChoice",
			Handler:    _Admin_DeleteChoice_Handler,
		},
		{
			MethodName: "GetExerciseList",
			Handler:    _Admin_GetExerciseList_Handler,
		},
		{
			MethodName: "GetExercise",
			Handler:    _Admin_GetExercise_Handler,
		},
		{
			MethodName: "InsertExercise",
			Handler:    _Admin_InsertExercise_Handler,
		},
		{
			MethodName: "UpdateExercise",
			Handler:    _Admin_UpdateExercise_Handler,
		},
		{
			MethodName: "DeleteExercise",
			Handler:    _Admin_DeleteExercise_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/tiku/tiku.proto",
}

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
	GetChoiceList(ctx context.Context, in *GetChoiceListRequest, opts ...grpc.CallOption) (*GetChoiceListReply, error)
	GetChoice(ctx context.Context, in *GetChoiceRequest, opts ...grpc.CallOption) (*Choice, error)
	AnswerChoice(ctx context.Context, in *AnswerChoiceRequest, opts ...grpc.CallOption) (*AnswerChoiceReply, error)
	GetExerciseList(ctx context.Context, in *GetExerciseListRequest, opts ...grpc.CallOption) (*GetExerciseListReply, error)
	GetExercise(ctx context.Context, in *GetExerciseRequest, opts ...grpc.CallOption) (*Exercise, error)
	AnswerExercise(ctx context.Context, in *AnswerExerciseRequest, opts ...grpc.CallOption) (*AnswerExerciseReply, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/api.tiku.Api/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetChoiceList(ctx context.Context, in *GetChoiceListRequest, opts ...grpc.CallOption) (*GetChoiceListReply, error) {
	out := new(GetChoiceListReply)
	err := c.cc.Invoke(ctx, "/api.tiku.Api/GetChoiceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetChoice(ctx context.Context, in *GetChoiceRequest, opts ...grpc.CallOption) (*Choice, error) {
	out := new(Choice)
	err := c.cc.Invoke(ctx, "/api.tiku.Api/GetChoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) AnswerChoice(ctx context.Context, in *AnswerChoiceRequest, opts ...grpc.CallOption) (*AnswerChoiceReply, error) {
	out := new(AnswerChoiceReply)
	err := c.cc.Invoke(ctx, "/api.tiku.Api/AnswerChoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetExerciseList(ctx context.Context, in *GetExerciseListRequest, opts ...grpc.CallOption) (*GetExerciseListReply, error) {
	out := new(GetExerciseListReply)
	err := c.cc.Invoke(ctx, "/api.tiku.Api/GetExerciseList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetExercise(ctx context.Context, in *GetExerciseRequest, opts ...grpc.CallOption) (*Exercise, error) {
	out := new(Exercise)
	err := c.cc.Invoke(ctx, "/api.tiku.Api/GetExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) AnswerExercise(ctx context.Context, in *AnswerExerciseRequest, opts ...grpc.CallOption) (*AnswerExerciseReply, error) {
	out := new(AnswerExerciseReply)
	err := c.cc.Invoke(ctx, "/api.tiku.Api/AnswerExercise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	Ping(context.Context, *PingReq) (*PingResp, error)
	GetChoiceList(context.Context, *GetChoiceListRequest) (*GetChoiceListReply, error)
	GetChoice(context.Context, *GetChoiceRequest) (*Choice, error)
	AnswerChoice(context.Context, *AnswerChoiceRequest) (*AnswerChoiceReply, error)
	GetExerciseList(context.Context, *GetExerciseListRequest) (*GetExerciseListReply, error)
	GetExercise(context.Context, *GetExerciseRequest) (*Exercise, error)
	AnswerExercise(context.Context, *AnswerExerciseRequest) (*AnswerExerciseReply, error)
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) Ping(context.Context, *PingReq) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedApiServer) GetChoiceList(context.Context, *GetChoiceListRequest) (*GetChoiceListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChoiceList not implemented")
}
func (UnimplementedApiServer) GetChoice(context.Context, *GetChoiceRequest) (*Choice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChoice not implemented")
}
func (UnimplementedApiServer) AnswerChoice(context.Context, *AnswerChoiceRequest) (*AnswerChoiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerChoice not implemented")
}
func (UnimplementedApiServer) GetExerciseList(context.Context, *GetExerciseListRequest) (*GetExerciseListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExerciseList not implemented")
}
func (UnimplementedApiServer) GetExercise(context.Context, *GetExerciseRequest) (*Exercise, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExercise not implemented")
}
func (UnimplementedApiServer) AnswerExercise(context.Context, *AnswerExerciseRequest) (*AnswerExerciseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerExercise not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tiku.Api/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetChoiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChoiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetChoiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tiku.Api/GetChoiceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetChoiceList(ctx, req.(*GetChoiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tiku.Api/GetChoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetChoice(ctx, req.(*GetChoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_AnswerChoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerChoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).AnswerChoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tiku.Api/AnswerChoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).AnswerChoice(ctx, req.(*AnswerChoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetExerciseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExerciseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetExerciseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tiku.Api/GetExerciseList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetExerciseList(ctx, req.(*GetExerciseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tiku.Api/GetExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetExercise(ctx, req.(*GetExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_AnswerExercise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerExerciseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).AnswerExercise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tiku.Api/AnswerExercise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).AnswerExercise(ctx, req.(*AnswerExerciseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.tiku.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Api_Ping_Handler,
		},
		{
			MethodName: "GetChoiceList",
			Handler:    _Api_GetChoiceList_Handler,
		},
		{
			MethodName: "GetChoice",
			Handler:    _Api_GetChoice_Handler,
		},
		{
			MethodName: "AnswerChoice",
			Handler:    _Api_AnswerChoice_Handler,
		},
		{
			MethodName: "GetExerciseList",
			Handler:    _Api_GetExerciseList_Handler,
		},
		{
			MethodName: "GetExercise",
			Handler:    _Api_GetExercise_Handler,
		},
		{
			MethodName: "AnswerExercise",
			Handler:    _Api_AnswerExercise_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/tiku/tiku.proto",
}
