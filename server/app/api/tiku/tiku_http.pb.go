// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.0

package tiku

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AdminHTTPServer interface {
	DeleteChoice(context.Context, *DeleteChoiceRequest) (*ApiReply, error)
	DeleteExercise(context.Context, *DeleteExerciseRequest) (*ApiReply, error)
	GetChoice(context.Context, *GetChoiceRequest) (*ApiReply, error)
	GetChoiceList(context.Context, *GetChoiceListRequest) (*ApiReply, error)
	GetExercise(context.Context, *GetExerciseRequest) (*ApiReply, error)
	GetExerciseList(context.Context, *GetExerciseListRequest) (*ApiReply, error)
	InsertChoice(context.Context, *Choice) (*ApiReply, error)
	InsertExercise(context.Context, *Exercise) (*ApiReply, error)
	UpdateChoice(context.Context, *Choice) (*ApiReply, error)
	UpdateExercise(context.Context, *Exercise) (*ApiReply, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.GET("/admin/v1/tiku/choicesList", _Admin_GetChoiceList0_HTTP_Handler(srv))
	r.GET("/admin/v1/tiku/choices/{id}", _Admin_GetChoice0_HTTP_Handler(srv))
	r.POST("/admin/v1/tiku/choices", _Admin_InsertChoice0_HTTP_Handler(srv))
	r.PUT("/admin/v1/tiku/choices", _Admin_UpdateChoice0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/tiku/choices/{ids}", _Admin_DeleteChoice0_HTTP_Handler(srv))
	r.GET("/admin/v1/tiku/exerciseList", _Admin_GetExerciseList0_HTTP_Handler(srv))
	r.GET("/admin/v1/tiku/exercise/{id}", _Admin_GetExercise0_HTTP_Handler(srv))
	r.POST("/admin/v1/tiku/exercise", _Admin_InsertExercise0_HTTP_Handler(srv))
	r.PUT("/admin/v1/tiku/exercise", _Admin_UpdateExercise0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/tiku/exercise/{ids}", _Admin_DeleteExercise0_HTTP_Handler(srv))
}

func _Admin_GetChoiceList0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetChoiceListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tiku.Admin/GetChoiceList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetChoiceList(ctx, req.(*GetChoiceListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetChoice0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetChoiceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tiku.Admin/GetChoice")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetChoice(ctx, req.(*GetChoiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_InsertChoice0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Choice
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tiku.Admin/InsertChoice")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InsertChoice(ctx, req.(*Choice))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateChoice0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Choice
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tiku.Admin/UpdateChoice")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateChoice(ctx, req.(*Choice))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteChoice0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteChoiceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tiku.Admin/DeleteChoice")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteChoice(ctx, req.(*DeleteChoiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetExerciseList0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetExerciseListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tiku.Admin/GetExerciseList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetExerciseList(ctx, req.(*GetExerciseListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetExercise0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetExerciseRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tiku.Admin/GetExercise")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetExercise(ctx, req.(*GetExerciseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_InsertExercise0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Exercise
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tiku.Admin/InsertExercise")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InsertExercise(ctx, req.(*Exercise))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateExercise0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Exercise
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tiku.Admin/UpdateExercise")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateExercise(ctx, req.(*Exercise))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteExercise0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteExerciseRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tiku.Admin/DeleteExercise")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteExercise(ctx, req.(*DeleteExerciseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ApiReply)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	DeleteChoice(ctx context.Context, req *DeleteChoiceRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	DeleteExercise(ctx context.Context, req *DeleteExerciseRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetChoice(ctx context.Context, req *GetChoiceRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetChoiceList(ctx context.Context, req *GetChoiceListRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetExercise(ctx context.Context, req *GetExerciseRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	GetExerciseList(ctx context.Context, req *GetExerciseListRequest, opts ...http.CallOption) (rsp *ApiReply, err error)
	InsertChoice(ctx context.Context, req *Choice, opts ...http.CallOption) (rsp *ApiReply, err error)
	InsertExercise(ctx context.Context, req *Exercise, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateChoice(ctx context.Context, req *Choice, opts ...http.CallOption) (rsp *ApiReply, err error)
	UpdateExercise(ctx context.Context, req *Exercise, opts ...http.CallOption) (rsp *ApiReply, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) DeleteChoice(ctx context.Context, in *DeleteChoiceRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tiku/choices/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tiku.Admin/DeleteChoice"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteExercise(ctx context.Context, in *DeleteExerciseRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tiku/exercise/{ids}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tiku.Admin/DeleteExercise"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetChoice(ctx context.Context, in *GetChoiceRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tiku/choices/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tiku.Admin/GetChoice"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetChoiceList(ctx context.Context, in *GetChoiceListRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tiku/choicesList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tiku.Admin/GetChoiceList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetExercise(ctx context.Context, in *GetExerciseRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tiku/exercise/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tiku.Admin/GetExercise"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetExerciseList(ctx context.Context, in *GetExerciseListRequest, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tiku/exerciseList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tiku.Admin/GetExerciseList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) InsertChoice(ctx context.Context, in *Choice, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tiku/choices"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tiku.Admin/InsertChoice"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) InsertExercise(ctx context.Context, in *Exercise, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tiku/exercise"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tiku.Admin/InsertExercise"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateChoice(ctx context.Context, in *Choice, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tiku/choices"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tiku.Admin/UpdateChoice"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateExercise(ctx context.Context, in *Exercise, opts ...http.CallOption) (*ApiReply, error) {
	var out ApiReply
	pattern := "/admin/v1/tiku/exercise"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tiku.Admin/UpdateExercise"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

type ApiHTTPServer interface {
	AnswerChoice(context.Context, *AnswerChoiceRequest) (*AnswerChoiceReply, error)
	AnswerExercise(context.Context, *AnswerExerciseRequest) (*AnswerExerciseReply, error)
	GetChoice(context.Context, *GetChoiceRequest) (*Choice, error)
	GetChoiceList(context.Context, *GetChoiceListRequest) (*GetChoiceListReply, error)
	GetExercise(context.Context, *GetExerciseRequest) (*Exercise, error)
	GetExerciseList(context.Context, *GetExerciseListRequest) (*GetExerciseListReply, error)
	Ping(context.Context, *PingReq) (*PingResp, error)
	SayHelloURL(context.Context, *HelloReq) (*HelloResp, error)
}

func RegisterApiHTTPServer(s *http.Server, srv ApiHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/tiku/say_hello", _Api_SayHelloURL6_HTTP_Handler(srv))
	r.GET("/api/v1/tiku/public/ping", _Api_Ping0_HTTP_Handler(srv))
	r.GET("/api/v1/tiku/choicesList", _Api_GetChoiceList1_HTTP_Handler(srv))
	r.GET("/api/v1/tiku/choice/{id}", _Api_GetChoice1_HTTP_Handler(srv))
	r.PUT("/api/v1/tiku/choice/answer", _Api_AnswerChoice0_HTTP_Handler(srv))
	r.GET("/admin/v1/tiku/exerciseList", _Api_GetExerciseList1_HTTP_Handler(srv))
	r.GET("/api/v1/tiku/exercise/{id}", _Api_GetExercise1_HTTP_Handler(srv))
	r.PUT("/api/v1/tiku/exercise/answer", _Api_AnswerExercise0_HTTP_Handler(srv))
}

func _Api_SayHelloURL6_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tiku.Api/SayHelloURL")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHelloURL(ctx, req.(*HelloReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloResp)
		return ctx.Result(200, reply)
	}
}

func _Api_Ping0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PingReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tiku.Api/Ping")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Ping(ctx, req.(*PingReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PingResp)
		return ctx.Result(200, reply)
	}
}

func _Api_GetChoiceList1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetChoiceListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tiku.Api/GetChoiceList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetChoiceList(ctx, req.(*GetChoiceListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetChoiceListReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetChoice1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetChoiceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tiku.Api/GetChoice")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetChoice(ctx, req.(*GetChoiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Choice)
		return ctx.Result(200, reply)
	}
}

func _Api_AnswerChoice0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AnswerChoiceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tiku.Api/AnswerChoice")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AnswerChoice(ctx, req.(*AnswerChoiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AnswerChoiceReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetExerciseList1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetExerciseListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tiku.Api/GetExerciseList")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetExerciseList(ctx, req.(*GetExerciseListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetExerciseListReply)
		return ctx.Result(200, reply)
	}
}

func _Api_GetExercise1_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetExerciseRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tiku.Api/GetExercise")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetExercise(ctx, req.(*GetExerciseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Exercise)
		return ctx.Result(200, reply)
	}
}

func _Api_AnswerExercise0_HTTP_Handler(srv ApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AnswerExerciseRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.tiku.Api/AnswerExercise")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AnswerExercise(ctx, req.(*AnswerExerciseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AnswerExerciseReply)
		return ctx.Result(200, reply)
	}
}

type ApiHTTPClient interface {
	AnswerChoice(ctx context.Context, req *AnswerChoiceRequest, opts ...http.CallOption) (rsp *AnswerChoiceReply, err error)
	AnswerExercise(ctx context.Context, req *AnswerExerciseRequest, opts ...http.CallOption) (rsp *AnswerExerciseReply, err error)
	GetChoice(ctx context.Context, req *GetChoiceRequest, opts ...http.CallOption) (rsp *Choice, err error)
	GetChoiceList(ctx context.Context, req *GetChoiceListRequest, opts ...http.CallOption) (rsp *GetChoiceListReply, err error)
	GetExercise(ctx context.Context, req *GetExerciseRequest, opts ...http.CallOption) (rsp *Exercise, err error)
	GetExerciseList(ctx context.Context, req *GetExerciseListRequest, opts ...http.CallOption) (rsp *GetExerciseListReply, err error)
	Ping(ctx context.Context, req *PingReq, opts ...http.CallOption) (rsp *PingResp, err error)
	SayHelloURL(ctx context.Context, req *HelloReq, opts ...http.CallOption) (rsp *HelloResp, err error)
}

type ApiHTTPClientImpl struct {
	cc *http.Client
}

func NewApiHTTPClient(client *http.Client) ApiHTTPClient {
	return &ApiHTTPClientImpl{client}
}

func (c *ApiHTTPClientImpl) AnswerChoice(ctx context.Context, in *AnswerChoiceRequest, opts ...http.CallOption) (*AnswerChoiceReply, error) {
	var out AnswerChoiceReply
	pattern := "/api/v1/tiku/choice/answer"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tiku.Api/AnswerChoice"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) AnswerExercise(ctx context.Context, in *AnswerExerciseRequest, opts ...http.CallOption) (*AnswerExerciseReply, error) {
	var out AnswerExerciseReply
	pattern := "/api/v1/tiku/exercise/answer"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tiku.Api/AnswerExercise"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetChoice(ctx context.Context, in *GetChoiceRequest, opts ...http.CallOption) (*Choice, error) {
	var out Choice
	pattern := "/api/v1/tiku/choice/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tiku.Api/GetChoice"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetChoiceList(ctx context.Context, in *GetChoiceListRequest, opts ...http.CallOption) (*GetChoiceListReply, error) {
	var out GetChoiceListReply
	pattern := "/api/v1/tiku/choicesList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tiku.Api/GetChoiceList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetExercise(ctx context.Context, in *GetExerciseRequest, opts ...http.CallOption) (*Exercise, error) {
	var out Exercise
	pattern := "/api/v1/tiku/exercise/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tiku.Api/GetExercise"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) GetExerciseList(ctx context.Context, in *GetExerciseListRequest, opts ...http.CallOption) (*GetExerciseListReply, error) {
	var out GetExerciseListReply
	pattern := "/admin/v1/tiku/exerciseList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tiku.Api/GetExerciseList"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) Ping(ctx context.Context, in *PingReq, opts ...http.CallOption) (*PingResp, error) {
	var out PingResp
	pattern := "/api/v1/tiku/public/ping"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tiku.Api/Ping"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ApiHTTPClientImpl) SayHelloURL(ctx context.Context, in *HelloReq, opts ...http.CallOption) (*HelloResp, error) {
	var out HelloResp
	pattern := "/api/v1/tiku/say_hello"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.tiku.Api/SayHelloURL"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
